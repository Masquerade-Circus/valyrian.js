(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global.App = factory());
}(this, (function () { 'use strict';

    var Main = {
        title: '',
        version: '',
        view: function view() {
            return [
                v('head', [
                    v('title', Main.title)
                ]),
                v('body', [
                    Main.attributes.children,
                    v('script', { src: 'valyrian.min.js' }),
                    v('script', { src: 'index.min.js?v='+Main.version })
                ])
            ];
        }
    };

    var Hello = {
        data: {
            hello: '',
            name: ''
        },
        oninit: function oninit(){
            return Hello.getServer();
        },
        getServer: function () {
            return v.get('/api/hola').then(function (data) {
                Hello.data = data;
            });
        },
        view: function view() {
            return v('div#mundo.hola', ((Hello.data.hello) + " " + (Hello.data.name)));
        }
    };

    var Counter = {
        count: 0,
        down: function (value) {
            Counter.count -= value;
        },
        up: function (value) {
            Counter.count += value;
        },
        view: function () {
            return v("div", [
                v("h1", Counter.count),
                v("button", { onclick: function () { return Counter.down(1); } }, "-"),
                v("button", { onclick: function () { return Counter.up(1); } }, "+"),
                v("button", { onclick: function () { return v.routes.go('/hello'); } }, "Go to hello"),
                v([
                    Counter.count === 2 ? v(2) : '',
                    v('br'),
                    v('','boolean true'),
                    v(true),
                    v('br'),
                    v('','boolean false'),
                    v(false),
                    v('br'),
                    v('','empty object'),
                    v({}, {}),
                    v('br'),
                    v('','null'),
                    v(null),
                    v('br'),
                    v('','undefined'),
                    v(undefined),
                    v('br'),
                    v('ul', (function () {
                        var elem = [];
                        if (Counter.count >= 0) {
                            for (var l = Counter.count; l--;) {
                                elem.push(v('li', l));
                            }
                        }

                        return elem;
                    })()),
                    v('img.div[src=http://placeimg.com/640/480/any]#ok')
                ])
            ]);
        }
    };

    var Diff = {
        s: 1,
        up: function () { return Diff.s += 1; },
        down: function () { return Diff.s -= 1; },
        view: function view() {
            return v('div', [
                Diff.s > 0 ? v('h1', Diff.s) : v('small', ''),
                v('button', { onclick: Diff.up }, '+'),
                v('button', { onclick: Diff.down }, '-') ]);
        }
    };

    var Lifecycle = {
        s: 1,
        up: function () { return Lifecycle.s+=1; },
        down: function () { return Lifecycle.s+=-1; },
        oninit: function oninit(vnode){ // Before dom element is created
            console.log('component oninit', vnode);
        },
        oncreate: function oncreate(vnode){ // After dom element is created and attached to the document
            console.log('component oncreate', vnode);
        },
        onupdate: function onupdate(vnode){ // after dom element is updated
            console.log('component onupdate', vnode);
        },
        onbeforeremove: function onbeforeremove(vnode){ // before dom element is detached from the document
            console.log('component onbeforeremove', vnode);
        },
        onremove: function onremove(vnode){ // after dom element is removed
            console.log('component onremove', vnode);
        },
        view: function view() {
            return v('div', [
                Lifecycle.s > 0 ? v('h1', {
                    oninit: function oninit(vnode){ // Before dom element is created
                        console.log('oninit', vnode);
                    },
                    oncreate: function oncreate(vnode){ // After dom element is created and attached to the document
                        console.log('oncreate', vnode);
                    },
                    onupdate: function onupdate(vnode){ // after dom element is updated
                        console.log('onupdate', vnode);
                    },
                    onbeforeremove: function onbeforeremove(vnode){ // before dom element is detached from the document
                        console.log('onbeforeremove', vnode);
                    },
                    onremove: function onremove(vnode){ // after dom element is removed
                        console.log('onremove', vnode);
                    }
                }, Lifecycle.s) : v('small', ''),
                v('button', {onclick: Lifecycle.up}, '+'),
                v('button', {onclick: Lifecycle.down}, '-'),
                v('ul', (function(){
                    var elem = [];
                    if (Lifecycle.s >= 0){
                        for (var l = Lifecycle.s; l--;){
                            if (l !== 4){
                                elem.push(v('li', {
                                    onbeforeremove: function onbeforeremove(vnode){
                                        console.log('onbeforeremovelistart');
                                        var p = new Promise(function (resolve) {
                                            setTimeout(function(){
                                                console.log('onbeforeremoveliend');
                                                resolve();
                                            }, 2000);
                                        });
                                        return p;
                                    }
                                }, v('span',{
                                    onbeforeremove: function onbeforeremove(vnode){
                                        console.log('onbeforeremovespanstart');
                                        var p = new Promise(function (resolve) {
                                            setTimeout(function(){
                                                console.log('onbeforeremovespanend');
                                                resolve();
                                            }, 1000);
                                        });
                                        return p;
                                    },
                                    onremove: function onremove(vnode){
                                        console.log('onspanremove', vnode);
                                    }
                                }, l)));
                            }
                        }
                    }

                    return elem;
                })())
            ]);
        }
    };

    var SubcomponentFactory = function(){
        var Subcomponent = {
            hidden: true,
            view: function view(vnode) {
                var this$1 = this;

                return [
                    v('button', {
                        onclick: function () {
                            this$1.hidden = !this$1.hidden;
                            v.update();
                        }
                    }, this.hidden ? 'Unhide' : 'Hide'),
                    v('div', this.hidden ? 'Hidden' : 'Unhidden')
                ]
            }
        };
        return Subcomponent;
    };

    var Component = {
        oninit: function oninit(vnode){
            Component.sub1 = SubcomponentFactory();
            Component.sub2 = SubcomponentFactory();
            Component.sub3 = SubcomponentFactory();
        },
        view: function view() {
            return [
                v(Component.sub1, { hidden: false }),
                v(Component.sub2, { hidden: true }),
                v(Component.sub3)
            ];
        }
    };

    var Components = {
        Main: Main,
        Hello: Hello,
        Counter: Counter,
        Diff: Diff,
        Lifecycle: Lifecycle,
        Subcomponent: Component
    };

    // Create a router
    var router = v.router();
    router
        .use(function () { return console.log('ok'); })
        .get('/', [
            function () { return console.log('Init'); },
            function () { return Components.Hello; }
        ])
        .get('/hello', [
            function () { return Components.Hello.getServer(); },
            function () { return Components.Hello; }
        ])
        .get('/counter', function () { return Components.Counter; })
        .get('/diff', function () { return Components.Diff; })
        .get('/lifecycle', function () { return Components.Lifecycle; })
        .get('/subcomponent', function () { return Components.Subcomponent; })
        ;

    // Assign routes to ValyrianJs
    v.routes('body', router);

    // Export what is needed for the backend
    var index = {Components: Components};

    return index;

})));
//# sourceMappingURL=index.min.js.map
