(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global = global || self, global.App = factory());
}(this, function () { 'use strict';

	var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	!function(){let a=function(a){let b,c,d,f;function g(a,b,c,d,e){if(a.nt===1){a.props[b]!==undefined&&a.props[b](a,c);if(b==='onremove'){d=0;e=a.children.length;for(;d<e;d++){ g(a.children[d],'onremove'); }a.children=[];}}}function h(b){b.currentTarget.events['on'+b.type]!==undefined&&b.currentTarget.events['on'+b.type](b);a.update();}function j(b,c,d,e,f,i,k,l,m,n){if(c.length===0){b.textContent='';return}f=c.length>d.length?c.length:d.length;l=0;for(;l<f;l++){i=c[l];k=d[l];if(i===undefined){k!==undefined&&(k.nt===3&&g(k,'onremove'),b.removeChild(k.dom));continue}if(i.nt===undefined||i.nt===3){i.nt===undefined&&(c[l]=i={name:'#text',isVnode:!0,nodeValue:i,children:[],nt:3});k===undefined?(i.dom=document.createTextNode(i.nodeValue),b.appendChild(i.dom)):k.nt===1?(i.dom=document.createTextNode(i.nodeValue),g(k,'onremove'),b.replaceChild(i.dom,k.dom)):(i.dom=k.dom,i.nodeValue!=k.nodeValue&&(i.dom.nodeValue=i.nodeValue));continue}m=!a.is.mounted;e=e||i.isSVG;if(k===undefined){ g(i,'oninit'),i.dom=e?document.createElementNS("http://www.w3.org/2000/svg",i.name):document.createElement(i.name),i.dom.events={},b.appendChild(i.dom),k={children:[]},m=!0; }else{if(i.name!==k.name){ g(i,'oninit'),i.dom=e?document.createElementNS("http://www.w3.org/2000/svg",i.name):document.createElement(i.name),i.dom.events={},g(k,'onremove'),b.replaceChild(i.dom,k.dom),m=!0; }else{i.dom=k.dom;for(n in k.props){if(i.props[n]===undefined){if(typeof k.props[n]==='function'){i.dom.removeEventListener(n.slice(2),h);continue}if(a.is.node||e||i.dom[n]===undefined){i.dom.removeAttribute(n);continue}i.dom[n]=null;}}}}j(i.dom,i.children,k.children,e);for(n in i.props){if((m||i.props[n]!==k.props[n])&&i.props[n]!==undefined){if(typeof i.props[n]==='function'){switch(n){case 'oninit':case 'oncreate':case 'onupdate':case 'onremove':break;default:i.dom.events[n]===undefined&&(i.dom.events[n]=i.props[n],i.dom.addEventListener(n.slice(2),h));break}continue}if(a.is.node||e||i.dom[n]===undefined){i.dom.setAttribute(n,i.props[n]);continue}i.dom[n]=i.props[n];}}!a.is.mounted&&!m&&(g(i,'oninit'),g(i,'oncreate'));g(i,m?'oncreate':'onupdate',k);}}a.update=function(e){e=a.utils.flat(arguments,0,[]);typeof e[0]==='object'&&(typeof e[0].isComponent==='undefined'&&typeof e[0].view==='function'?(b=Object.assign(e.shift(),{isComponent:!0})):e[0].isComponent&&(b=e.shift()));return new Promise(function h(g){if(!a.is.updating){a.is.updating=!0;e.unshift(b);d=a.apply(a,e);j(f,d,c);c=d;a.is.updating=!1;a.is.mounted=!0;if(a.is.node){return g(f.innerHTML)}g();}})};a.mount=function(b){f=a.is.node?document.createElement('div'):typeof b==='string'?document.querySelectorAll(b)[0]:b;c=a.utils.dom2vnode(f).children;return a.update.apply(this,a.utils.flat(arguments,1,[]))};};function b(a,c,d,e,f){if(typeof a==='string'){d={name:a,props:{},children:[],dom:null,isVnode:!0,nt:1,isSVG:a==='svg'};for(e in c){ d.props[e]=c[e]; }b.utils.flat(arguments,2,d.children,!0);return d}if(typeof a==='function'){return Object.assign({view:a,isComponent:!0},c)}if(typeof a==='object'){typeof a.view==='function'&&(a.isComponent=!0);if(a.isComponent){f=a.view.apply(a,b.utils.flat(arguments,1,[]));return Array.isArray(f)?f:[f]}}}b.utils={flat:function(a,c,d,e,f){f=a.length;e===undefined&&(e=!1);for(;c<f;c++){if(Array.isArray(a[c])){d=b.utils.flat(a[c],0,d);continue}(e===!1||a[c]!==undefined&&a[c]!==null)&&d.push(a[c]);}return d},dom2vnode(a,c){if(a.nodeType===3){return {name:'#text',isVnode:!0,nodeValue:a.nodeValue,children:[],dom:a,nt:3}}if(a.nodeType===1){c={name:a.nodeName.toLowerCase(),props:{},children:[],dom:a,isVnode:!0,nodeValue:null,nt:1};c.name==='svg'&&(c.isSVG=!0);c.dom.events={};Array.prototype.map.call(a.attributes,function(a){c.props[a.nodeName]=a.nodeValue;});Array.prototype.forEach.call(a.childNodes,function(a){let d=b.utils.dom2vnode(a);d!==undefined&&c.children.push(d);});return c}}};b.is={node:typeof window==='undefined',mounted:!1,updating:!1};b.is.browser=!b.is.node;b.trust=function(a){let c=document.createElement('div');c.innerHTML=a.trim();return Array.prototype.map.call(c.childNodes,a=>b.utils.dom2vnode(a))};let c=[];b.use=function(a,d){c.indexOf(a)===-1&&(a(b,d),c.push(a));return b};b.use(a);(b.is.node?commonjsGlobal:window).v=b;}();//# sourceMappingURL=valyrian.min.js.map

	/**
	 * Handles the mix of single and array of middlewares
	 * @method parseMiddlewares
	 * @param  {Function|Array}         middlewares     // Middleware or array of middlewares
	 * @param  {Array}                  [array=[]]      // The array to store the final list of middlewares
	 * @return {Array}                                  // The final list of middlewares
	 */
	let parseMiddlewares = (middlewares, array = []) => {
	    if (typeof middlewares === 'function') {
	        array.push(middlewares);
	        return array;
	    }

	    let i = 0, l = middlewares.length;
	    for (; i < l; i++) {
	        if (Array.isArray(middlewares[i])) {
	            parseMiddlewares(middlewares[i], array);
	            continue;
	        }

	        array.push(middlewares[i]);
	    }
	    return array;
	};

	/**
	 * @description Adds a path to a router
	 * @method addPath
	 * @param  {Router} router              The router in which to add the path
	 * @param  {String} method              The method that will handle this path
	 * @param  {Array} args                The mixed params (String|Function|Array)
	 * @returns {Router}                    The router
	 */
	let addPath = (router, method, args) => {
	    let path, middlewares;

	    // Get the first argument
	    if (typeof args[0] === 'string') {
	        path = args.shift();
	    }

	    // If the seccond argument is a function and has paths
	    // and regexpList properties then
	    // Treat it as a subrouter
	    if (
	        typeof args[0] === 'function' &&
	        args[0].paths &&
	        args[0].regexpList
	    ) {
	        let subrouter = args.shift(),
	            i = 0,
	            l = subrouter.paths.length;

	        // For each path of the subrouter
	        for (; i < l; i++) {
	            let submiddlewares = subrouter.paths[i].middlewares;
	            let submethod = subrouter.paths[i].method;
	            let subpath = subrouter.paths[i].path;

	            // If there is a path add it as prefix to the subpath
	            if (path) {
	                subpath = path + (subpath || '*');
	            }

	            // If there is a subpath set it as the first element
	            // on the submiddlewares array
	            if (subpath) {
	                submiddlewares.unshift(subpath);
	            }

	            // Add the path to the router
	            router = addPath(router, submethod, submiddlewares);
	        }
	    }

	    // Parse middlwares to handle mixed arrays of middlwares and sequenced middlwares
	    middlewares = parseMiddlewares(args);

	    // Add the path only if there are middlewares passed
	    if (middlewares.length > 0) {
	        // If the path wasn't set before, set the regexp and params list
	        if (path && router.regexpList[path] === undefined) {
	            // Remove the last slash
	            path = path.replace(/\/(\?.*)?$/gi, '$1');

	            // Find the express like params
	            let params = path.match(/:(\w+)?/gi) || [];

	            // Set the names of the params found
	            for (let i in params) {
	                params[i] = params[i].slice(1);
	            }

	            let regexpPath = path
	                // Catch params
	                .replace(/:(\w+)/gi, '([^\\s\\/|\\?]+)')
	                // To set to any url with the path as prefix
	                .replace(/\*/g, '.*')
	                // Remove the last slash
	                .replace(/\/(\?.*)?$/gi, '$1');

	            // Set the object to the path
	            router.regexpList[path] = {
	                regexp: new RegExp('^' + regexpPath + '/?(\\?.*)?$', 'gi'),
	                params: params
	            };
	        }

	        // Add the path to the paths list
	        router.paths.push({
	            method: method,
	            path: path,
	            middlewares: middlewares
	        });
	    }

	    return router;
	};

	let RouterFactory = () => {
	    /**
	     * new Rotuer
	     * @param  {String}    url     The path to call
	     * @return {Any}           The final response
	     */
	    let Router = async function (url = '/') {
	        let method = 'get',
	            params = {},
	            middlewares = [],
	            response,
	            i = 0,
	            l = Router.paths.length;

	        Router.url = url;

	        for (; i < l; i++) {
	            let path = Router.paths[i];
	            if (method !== path.method && path.method !== 'use') {
	                continue;
	            }

	            if ((path.method === 'use' || method === path.method) && path.path === undefined) {
	                parseMiddlewares(path.middlewares, middlewares);
	                continue;
	            }

	            let reg = Router.regexpList[path.path];
	            let matches = reg.regexp.exec(url);
	            reg.regexp.lastIndex = -1;
	            if (Array.isArray(matches)) {
	                matches.shift();
	                let regparams = reg.params;
	                let l = regparams.length;
	                for (; l--;) {
	                    if (params[regparams[l]] === undefined) {
	                        params[regparams[l]] = matches[l];
	                    }
	                }
	                parseMiddlewares(path.middlewares, middlewares);
	            }
	        }

	        Router.params = params;

	        if (middlewares.length > 0) {
	            let i = 0, l = middlewares.length;
	            // call sequentially every middleware
	            for (; i < l; i++) {
	                response = await middlewares[i](params);
	                // If there is a response
	                // break the for block
	                if (response) {
	                    return response;
	                }
	            }
	        }

	        if (Router.throwNotFound) {
	            // If no response was sent to the client throw an error
	            throw new Error(`The url ${url} requested wasn't found`);
	        }
	    };

	    Router.url = '/';
	    Router.params = {};
	    Router.throwNotFound = true;

	    /**
	     * Where to store the paths and its middlewares
	     * @type {Object}
	     */
	    Router.paths = [];

	    /**
	     * Where to store the regexp and params list for the paths
	     * @type {[type]}
	     */
	    Router.regexpList = {};

	    // For each accepted method, add the method to the router
	    Router.get = function () {
	        return addPath(Router, 'get', v.utils.flat(arguments, 0, []));
	    };
	    Router.use = function () {
	        return addPath(Router, 'use', v.utils.flat(arguments, 0, []));
	    };

	    /**
	     * Return the new router
	     * @type {Router}
	     */
	    return Router;
	};


	let plugin = function (v) {
	    let mainRouter;
	    let RoutesContainer;
	    function runRoute(parentComponent, url, args) {
	        return mainRouter(url)
	            .then(response => {
	                if (typeof response !== 'object') {
	                    throw new Error('v.router.component.required');
	                }

	                if (!response.isComponent && typeof response.view === 'function') {
	                    Object.assign(response, {isComponent: true});
	                }

	                if (!response.isComponent) {
	                    throw new Error('v.router.component.required');
	                }

	                if (parentComponent) {
	                    args.unshift(v(response, args));
	                    response = parentComponent;
	                }

	                args.unshift(response);

	                if (v.is.node || !v.is.mounted) {
	                    args.unshift(RoutesContainer);
	                    return v.mount.apply(v, args);
	                }

	                return v.update.apply(v, args);
	            });
	    }
	    v.routes = function (elementContainer, router) {
	        if (elementContainer && router) {
	            mainRouter = router;
	            RoutesContainer = elementContainer;
	            // Activate the use of the router
	            if (v.is.browser) {
	                function onPopStateGoToRoute() {
	                    v.routes.go(document.location.pathname);
	                }
	                window.addEventListener('popstate', onPopStateGoToRoute, false);
	                onPopStateGoToRoute();
	            }
	        }
	    };

	    v.routes.get = function () {
	        let routes = [];
	        mainRouter.paths.forEach(path => {
	            if (path.method === 'get') {
	                routes.push(path.path === '' ? '/' : path.path);
	            }
	        });
	        return routes;
	    };

	    v.routes.current = '/';
	    v.routes.params = {};

	    v.routes.go = function () {
	        let args = v.utils.flat(arguments, 0, []);
	        let parentComponent;
	        let url;

	        if (typeof args[0] === 'object') {
	            if (!args[0].isComponent && typeof args[0].view === 'function') {
	                args[0] = Object.assign(args[0], {isComponent: true});
	            }

	            if (args[0].isComponent) {
	                parentComponent = args.shift();
	            }
	        }

	        if (typeof args[0] === 'string') {
	            url = args.shift();
	        }

	        if (!url) {
	            throw new Error('v.router.url.required');
	        }

	        if (v.is.browser) {
	            window.history.pushState({}, '', url);
	        }

	        return runRoute(parentComponent, url, args);
	    };

	    v.Router = RouterFactory;
	};

	let plugin$1 = function (v) {
	    let Request = function (baseUrl = '', options = {}) {
	        let url = baseUrl.replace(/\/$/gi, '').trim(),
	            opts = Object.assign({
	                methods: ['get', 'post', 'put', 'patch', 'delete']
	            }, options),
	            parseUrl;

	        function serialize(obj, prefix) {
	            let e = encodeURIComponent;
	            return Object.keys(obj)
	                .map((p) => {
	                    let k = prefix ? prefix + '[' + p + ']' : p;

	                    return typeof obj[p] === 'object'
	                        ? serialize(obj[p], k)
	                        : e(k) + '=' + e(obj[p]);
	                })
	                .join('&');
	        }

	        function request(method, url, data, options = {}) {
	            let opts = Object.assign({
	                    method: method.toLowerCase(),
	                    headers: {
	                        'Accept': 'application/json',
	                        'Content-Type': 'application/json'
	                    }
	                }, request.options, options),
	                type = opts.headers.Accept;

	            if (opts.methods.indexOf(method) === -1) {
	                throw new Error('Method not allowed');
	            }

	            if (data !== undefined) {
	                if (opts.method === 'get' && typeof data === 'object') {
	                    url += data = serialize(data);
	                }

	                if (opts.method !== 'get') {
	                    opts.body = JSON.stringify(data);
	                }
	            }

	            return fetch(parseUrl(url), opts)
	                .then(response => {
	                    if (!response.ok) {
	                        let err = new Error(response.statusText);
	                        err.response = response;
	                        throw err;
	                    }

	                    if (/text/gi.test(type)) {
	                        return response.text();
	                    }

	                    if (/json/gi.test(type)) {
	                        return response.json();
	                    }

	                    return response;
	                });
	        }
	        parseUrl = function (url) {
	            let u = /^https?/gi.test(url) ? url
	                : (request.urls.base + url).trim().replace(/^\/\//gi, '/').trim();

	            if (
	                v.is.node &&
	                typeof request.urls.node === 'string'
	            ) {
	                request.urls.node = request.urls.node.replace(/\/$/gi, '').trim();

	                if (typeof request.urls.api === 'string') {
	                    request.urls.api = request.urls.api.replace(/\/$/gi, '').trim();
	                    u = u.replace(request.urls.api, request.urls.node);
	                }

	                if (!/^https?/gi.test(u)) {
	                    u = request.urls.node + u;
	                }
	            }

	            return u;
	        };

	        request.new = function (baseUrl, options) {
	            return Request(baseUrl, options);
	        };

	        request.urls = {};
	        request.urls.api = undefined;
	        request.urls.node = undefined;
	        request.urls.base = url;
	        request.options = opts;

	        opts.methods.forEach(method =>
	            request[method] = (url, data, options) => request(method, url, data, options)
	        );

	        return request;
	    };

	    v.request = Request();
	};

	let plugin$2 = function (v) {
	    if (v.is.browser) {
	        v.sw = function (file = v.sw.file, options = v.sw.options) {
	            return navigator.serviceWorker.register(file, options)
	                .then(() => navigator.serviceWorker.ready)
	                .then(registration => {
	                    v.sw.ready = true;
	                    v.sw.file = file;
	                    v.sw.options = options;
	                    return new Promise((resolve, reject) => {
	                        setTimeout(() => {
	                            resolve(navigator.serviceWorker);
	                        }, 10);
	                    });
	                });
	        };

	        v.sw.ready = false;
	        v.sw.file = '/sw.js';
	        v.sw.options = {scope: '/'};
	    }
	};

	v
	    .use(plugin)
	    .use(plugin$1)
	    .use(plugin$2);

	var links = { 
	    view(){ 
	        return [
	            v("link", {"rel":"apple-touch-icon","sizes":"114x114","href":"/icons/apple-touch-icon-114x114.png"}),
	            v("link", {"rel":"apple-touch-icon","sizes":"120x120","href":"/icons/apple-touch-icon-120x120.png"}),
	            v("link", {"rel":"apple-touch-icon","sizes":"144x144","href":"/icons/apple-touch-icon-144x144.png"}),
	            v("link", {"rel":"apple-touch-icon","sizes":"152x152","href":"/icons/apple-touch-icon-152x152.png"}),
	            v("link", {"rel":"apple-touch-icon","sizes":"180x180","href":"/icons/apple-touch-icon-180x180.png"}),
	            v("link", {"rel":"apple-touch-icon","sizes":"57x57","href":"/icons/apple-touch-icon-57x57.png"}),
	            v("link", {"rel":"apple-touch-icon","sizes":"60x60","href":"/icons/apple-touch-icon-60x60.png"}),
	            v("link", {"rel":"apple-touch-icon","sizes":"72x72","href":"/icons/apple-touch-icon-72x72.png"}),
	            v("link", {"rel":"apple-touch-icon","sizes":"76x76","href":"/icons/apple-touch-icon-76x76.png"}),
	            v("link", {"rel":"apple-touch-startup-image","media":"(device-width: 320px) and (device-height: 480px) and (-webkit-device-pixel-ratio: 1)","href":"/icons/apple-touch-startup-image-320x460.png"}),
	            v("link", {"rel":"apple-touch-startup-image","media":"(device-width: 320px) and (device-height: 480px) and (-webkit-device-pixel-ratio: 2)","href":"/icons/apple-touch-startup-image-640x920.png"}),
	            v("link", {"rel":"apple-touch-startup-image","media":"(device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2)","href":"/icons/apple-touch-startup-image-640x1096.png"}),
	            v("link", {"rel":"apple-touch-startup-image","media":"(device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2)","href":"/icons/apple-touch-startup-image-750x1294.png"}),
	            v("link", {"rel":"apple-touch-startup-image","media":"(device-width: 414px) and (device-height: 736px) and (orientation: landscape) and (-webkit-device-pixel-ratio: 3)","href":"/icons/apple-touch-startup-image-1182x2208.png"}),
	            v("link", {"rel":"apple-touch-startup-image","media":"(device-width: 414px) and (device-height: 736px) and (orientation: portrait) and (-webkit-device-pixel-ratio: 3)","href":"/icons/apple-touch-startup-image-1242x2148.png"}),
	            v("link", {"rel":"apple-touch-startup-image","media":"(device-width: 768px) and (device-height: 1024px) and (orientation: landscape) and (-webkit-device-pixel-ratio: 1)","href":"/icons/apple-touch-startup-image-748x1024.png"}),
	            v("link", {"rel":"apple-touch-startup-image","media":"(device-width: 768px) and (device-height: 1024px) and (orientation: landscape) and (-webkit-device-pixel-ratio: 2)","href":"/icons/apple-touch-startup-image-1496x2048.png"}),
	            v("link", {"rel":"apple-touch-startup-image","media":"(device-width: 768px) and (device-height: 1024px) and (orientation: portrait) and (-webkit-device-pixel-ratio: 1)","href":"/icons/apple-touch-startup-image-768x1004.png"}),
	            v("link", {"rel":"apple-touch-startup-image","media":"(device-width: 768px) and (device-height: 1024px) and (orientation: portrait) and (-webkit-device-pixel-ratio: 2)","href":"/icons/apple-touch-startup-image-1536x2008.png"}),
	            v("link", {"rel":"icon","type":"image/png","sizes":"16x16","href":"/icons/favicon-16x16.png"}),
	            v("link", {"rel":"icon","type":"image/png","sizes":"32x32","href":"/icons/favicon-32x32.png"}),
	            v("link", {"rel":"manifest","href":"/icons/manifest.json"}),
	            v("link", {"rel":"shortcut icon","href":"/icons/favicon.ico"}),
	            v("meta", {"name":"apple-mobile-web-app-capable","content":"yes"}),
	            v("meta", {"name":"apple-mobile-web-app-status-bar-style","content":"black-translucent"}),
	            v("meta", {"name":"apple-mobile-web-app-title","content":"Valyrian.js"}),
	            v("meta", {"name":"application-name","content":"Valyrian.js"}),
	            v("meta", {"name":"mobile-web-app-capable","content":"yes"}),
	            v("meta", {"name":"msapplication-TileColor","content":"#fff"}),
	            v("meta", {"name":"msapplication-TileImage","content":"/icons/mstile-144x144.png"}),
	            v("meta", {"name":"msapplication-config","content":"/icons/browserconfig.xml"}),
	            v("meta", {"name":"theme-color","content":"#fff"})
	        ];
	    }
	};

	var version = "2.0.6";

	let Main = {
	    title: 'Valyrian.js',
	    version: version,
	    view(content) {
	        return v('html', {lang: 'en'}, [
	            v('head', null, [
	                v('title', null, Main.title),
	                v('style', null, v.inline.uncss()),
	                v(links)
	                // v('script', {src: '/index.min.js', async: true})
	            ]),
	            v('body', null, [
	                content,
	                // v('script', v.inline.js())
	                v('script', {src: '/index.min.js', async: true})
	            ])
	        ]);
	    }
	};

	// function view(content) {
	//     return v('html', {lang: 'en'}, [
	//         v('head', null, [
	//             v('title', null, this.title),
	//             v('style', null, v.inline.uncss()),
	//             v(links),
	//             v('script', {src: '/index.min.js', async: true})
	//         ]),
	//         v('body', [
	//             content
	//             // v('script', v.inline.js())
	//         ])
	//     ]);
	// };

	// export default v(view, {title: 'Valyrian.js', version});

	let state = {
	    data: {
	        hello: 'Hello',
	        name: 'world'
	    },
	    getServer() {
	        return v.request.get('/api/hola').then(data => {
	            this.data = data;
	        });
	    }
	};

	function view() {
	    return v('div', {id: 'mundo', class: 'hola'}, `${this.data.hello} ${this.data.name}`);
	}

	var Hello = v(view, state);

	let Counter = {
	    count: 0,
	    down: value => {
	        Counter.count -= value;
	    },
	    up: value => {
	        Counter.count += value;
	    },
	    view: () => {
	        return v("div", null, [
	            v("h1", null, Counter.count),
	            v("button", { onclick: () => Counter.down(1) }, "-"),
	            v("button", { onclick: () => Counter.up(1) }, "+"),
	            v("a", { href: '/hello', onclick(e) {
	                v.routes.go('/hello');
	                e.preventDefault();
	            } }, "Go to hello"),
	            v('div', null, [
	                Counter.count === 2 ? v('span', null, 2) : '',
	                v('br'),
	                v('div', null, 'boolean true'),
	                v('div', null, true),
	                v('br'),
	                v('div', null, 'boolean false'),
	                v('div', null, false),
	                v('br'),
	                v('div', null, 'empty object'),
	                v('div', null, {}),
	                v('br'),
	                v('div', null, 'null'),
	                v('div', null, null),
	                v('br'),
	                v('div', null, 'undefined'),
	                v('div', null, undefined),
	                v('br'),
	                v('ul', null, (function () {
	                    let elem = [];
	                    if (Counter.count >= 0) {
	                        for (let l = Counter.count; l--;) {
	                            elem.push(v('li', null, l));
	                        }
	                    }

	                    return elem;
	                }())),
	                v('img', {
	                    className: 'div',
	                    id: 'ok',
	                    src: 'http://placeimg.com/640/480/any'
	                })
	            ])
	        ]);
	    }
	};

	let Diff = {
	    s: 1,
	    up: () => Diff.s += 1,
	    down: () => Diff.s -= 1,
	    view() {
	        return v('div', null, [
	            Diff.s > 0 ? v('h1', null, Diff.s) : v('small'),
	            v('button', { onclick: Diff.up }, '+'),
	            v('button', { onclick: Diff.down }, '-')
	        ]);
	    }
	};

	let Lifecycle = {
	    s: 1,
	    up: () => Lifecycle.s += 1,
	    down: () => Lifecycle.s += -1,
	    view() {
	        return v('div', {
	            oninit(vnode) { // Before dom element is created
	                console.log('component oninit', vnode);
	            },
	            oncreate(vnode) { // After dom element is created and attached to the document
	                console.log('component oncreate', vnode);
	            },
	            onupdate(vnode) { // after dom element is updated
	                console.log('component onupdate', vnode);
	            },
	            onremove(vnode) { // after dom element is removed
	                console.log('component onremove', vnode);
	            }
	        }, [
	            Lifecycle.s > 0 ? v('h1', {
	                oninit(vnode) { // Before dom element is created
	                    console.log('oninit', vnode);
	                },
	                oncreate(vnode) { // After dom element is created and attached to the document
	                    console.log('oncreate', vnode);
	                },
	                onupdate(vnode) { // after dom element is updated
	                    console.log('onupdate', vnode);
	                },
	                onremove(vnode) { // after dom element is removed
	                    console.log('onremove', vnode);
	                }
	            }, Lifecycle.s) : v('small'),
	            v('button', {onclick: Lifecycle.up}, '+'),
	            v('button', {onclick: Lifecycle.down}, '-'),
	            v('ul', null, (function () {
	                let elem = [];
	                if (Lifecycle.s >= 0) {
	                    for (let l = Lifecycle.s; l--;) {
	                        if (l !== 4) {
	                            elem.push(v('li', null, v('span', {
	                                onremove(vnode) {
	                                    console.log('onspanremove', vnode);
	                                }
	                            }, l + 1)));
	                        }
	                    }
	                }

	                return elem;
	            }()))
	        ]);
	    }
	};

	let SubcomponentFactory = function () {
	    let Subcomponent = {
	        hidden: true,
	        view(vnode) {
	            return [
	                v('button', {
	                    onclick: () => {
	                        this.hidden = !this.hidden;
	                        v.update();
	                    }
	                }, this.hidden ? 'Unhide' : 'Hide'),
	                v('div', null, this.hidden ? 'Hidden' : 'Unhidden')
	            ];
	        }
	    };
	    return Subcomponent;
	};

	let Component = {
	    oninit(vnode) {
	        Component.sub1 = SubcomponentFactory();
	        Component.sub2 = SubcomponentFactory();
	        Component.sub3 = SubcomponentFactory();
	    },
	    view() {
	        return [
	            v(Component.sub1, { hidden: false }),
	            v(Component.sub2, { hidden: true }),
	            v(Component.sub3)
	        ];
	    }
	};

	let Pages = {
	    Main,
	    Hello,
	    Counter,
	    Diff,
	    Lifecycle,
	    Subcomponent: Component
	};

	// Create a router
	let router = v.Router();
	router
	    .use(() => console.log('ok'))
	    .get('/', [
	        () => console.log('Init'),
	        () => Pages.Hello
	    ])
	    .get('/hello', [
	        () => Pages.Hello.getServer(),
	        () => Pages.Hello
	    ])
	    .get('/counter', () => Pages.Counter)
	    .get('/diff', () => Pages.Diff)
	    .get('/lifecycle', () => Pages.Lifecycle)
	    .get('/subcomponent', () => Pages.Subcomponent)
	    .get('/hello/:ok', (params) => {
	        return Pages.Hello;
	    })
	;

	// Assign routes to ValyrianJs
	v.routes('body', router);

	// if (v.isBrowser) {
	//     v.sw('./sw.js')
	//         .then(() => {
	//             console.log('SW registered');
	//         });
	// }

	// // Export what is needed for the backend
	var index = {Pages};

	return index;

}));
//# sourceMappingURL=index.min.js.map
