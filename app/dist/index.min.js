(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global.App = factory());
}(this, (function () { 'use strict';

	var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	!function(){function e(n,o){if(3===n.nodeType||1===n.nodeType){ return(o={name:"div",props:{},children:[],dom:null,isVnode:!0,isText:!1,nodeValue:null}).name=n.nodeName.toLowerCase(), o.dom=n, 3===n.nodeType?(o.nodeValue=n.nodeValue, o.isText=!0, o):(o.dom.events={}, Array.prototype.map.call(n.attributes,function(e){o.props[e.nodeName]=e.nodeValue;}), Array.prototype.forEach.call(n.childNodes,function(n){var t=e(n);void 0!==t&&o.children.push(t);}), o) }}function n(e,o,t,i){if("string"==typeof e){for(i in(t={name:"div",props:{},children:[],dom:null,isVnode:!0,isText:!1,nodeValue:null}).name=e, o){ t.props[i]=o[i]; }return function e(n,o,t,i,r){for(t=0, i=n.length;t<i;t++){ if(n[t]){if(Array.isArray(n[t])){e(n[t],o);continue}if("object"==typeof n[t]&&n[t].isVnode){o.push(n[t]);continue}(r={name:"div",props:{},children:[],dom:null,isVnode:!0,isText:!1,nodeValue:null}).name="#text", r.isText=!0, r.nodeValue=n[t], o.push(r);} }}(n.utils.arguments2Array(arguments,2),t.children), t}if("function"==typeof e){ return Object.assign({view:e,isComponent:!0},o); }if("object"==typeof e){if(e.isComponent){ return r=e, d=n.utils.arguments2Array(arguments,1), s=r.view.apply(r,d), Array.isArray(s)?s:[s]; }if("function"==typeof e.view){ return Object.assign(e,{isComponent:!0}) }}var r,d,s;}var o,t,i,r;function d(e,n){if(!e.isText&&void 0!==e.props&&void 0!==e.props[n]){ return e.props[n](e) }}function s(e){e.currentTarget.events["on"+event.type](e), n.update();}(n.utils={}).arguments2Array=function(e,n,o,t){for(o=[], t=e.length, void 0===n&&(n=0);n<t;n++){ o.push(e[n]); }return o}, (n.is={}).node="undefined"==typeof window, n.is.browser=!n.is.node, n.is.mounted=!1, n.trust=function(n){var o=document.createElement("div");return o.innerHTML=n.trim(), Array.prototype.map.call(o.childNodes,function (n){ return e(n); })};var u=!1;n.update=function(e){return"object"==typeof(e=n.utils.arguments2Array(arguments))[0]&&e[0].isComponent&&(o=e.shift()), new Promise(function (a){u||(u=!0, e.unshift(o), i=n.apply(n,e), function e(o,t,i,r,u,a,l,p,m,c){if(0!==t.length){ for(u=t.length>i.length?t.length:i.length, p=0;p<u;p++){ if(l=i[p], m=!n.is.mounted, void 0!==(a=t[p])){if(r=r||"svg"===a.name, void 0===l){if(d(a,"oninit"), a.dom=a.isText?document.createTextNode(a.nodeValue):r?document.createElementNS("http://www.w3.org/2000/svg",a.name):document.createElement(a.name), o.appendChild(a.dom), a.isText){ continue; }l={children:[]}, m=!0;}else if(a.name!==l.name){if(d(a,"oninit"), a.dom=a.isText?document.createTextNode(a.nodeValue):r?document.createElementNS("http://www.w3.org/2000/svg",a.name):document.createElement(a.name), d(l,"onremove"), o.replaceChild(a.dom,l.dom), a.isText){ continue; }m=!0;}else if(a.dom=l.dom, a.isText){a.dom.nodeValue=a.nodeValue;continue}if(e(a.dom,a.children,l.children,r), !m){ for(c in l.props){ if(void 0===a.props[c]){if("function"==typeof l.props[c]){a.dom.removeEventListener(c.slice(2),s);continue}a.dom[c]=null, n.is.node&&a.dom.removeAttribute(c);} } }for(c in a.props){ if(m||a.props[c]!==l.props[c]){if("function"==typeof a.props[c]){switch(c){case"oninit":case"oncreate":case"onupdate":case"onremove":break;default:void 0===a.dom.events&&(a.dom.events={}), void 0===a.dom.events[c]&&(a.dom.events[c]=a.props[c], a.dom.addEventListener(c.slice(2),s));}continue}if(n.is.node){a.dom.setAttribute(c,a.props[c]);continue}a.dom[c]=a.props[c];} }n.is.mounted||(d(a,"oninit"), d(a,"oncreate")), d(a,m?"oncreate":"onupdate");}else { d(l,"onremove"), o.removeChild(l.dom); } } }else { o.textContent=""; }}(r,i,t), t=i, u=!1, n.is.mounted=!0, a(r.innerHTML));})}, n.mount=function(i,d){return o=d, r=n.is.node?document.createElement("div"):"string"==typeof i?document.querySelectorAll(i)[0]:i, t=e(r).children, n.update.apply(this,n.utils.arguments2Array(arguments,2))};var a=[];n.use=function(e,o){return-1===a.indexOf(e)&&(e(n,o), a.push(e)), n}, (n.is.node?commonjsGlobal:window).v=n;}();

	/**
	 * Handles the mix of single and array of middlewares
	 * @method parseMiddlewares
	 * @param  {Function|Array}         middlewares     // Middleware or array of middlewares
	 * @param  {Array}                  [array=[]]      // The array to store the final list of middlewares
	 * @return {Array}                                  // The final list of middlewares
	 */
	var parseMiddlewares = function (middlewares, array) {
	    if ( array === void 0 ) array = [];

	    if (typeof middlewares === 'function') {
	        array.push(middlewares);
	        return array;
	    }

	    var i = 0, l = middlewares.length;
	    for (; i < l; i++) {
	        if (Array.isArray(middlewares[i])) {
	            parseMiddlewares(middlewares[i], array);
	            continue;
	        }

	        array.push(middlewares[i]);
	    }
	    return array;
	};

	/**
	 * @description Adds a path to a router
	 * @method addPath
	 * @param  {Router} router              The router in which to add the path
	 * @param  {String} method              The method that will handle this path
	 * @param  {Array} args                The mixed params (String|Function|Array)
	 * @returns {Router}                    The router
	 */
	var addPath = function (router, method, args) {
	    var path, middlewares;

	    // Get the first argument
	    if (typeof args[0] === 'string') {
	        path = args.shift();
	    }

	    // If the seccond argument is a function and has paths
	    // and regexpList properties then
	    // Treat it as a subrouter
	    if (
	        typeof args[0] === 'function' &&
	        args[0].paths &&
	        args[0].regexpList
	    ) {
	        var subrouter = args.shift(),
	            i = 0,
	            l = subrouter.paths.length;

	        // For each path of the subrouter
	        for (; i < l; i++) {
	            var submiddlewares = subrouter.paths[i].middlewares;
	            var submethod = subrouter.paths[i].method;
	            var subpath = subrouter.paths[i].path;

	            // If there is a path add it as prefix to the subpath
	            if (path) {
	                subpath = path + (subpath || '*');
	            }

	            // If there is a subpath set it as the first element
	            // on the submiddlewares array
	            if (subpath) {
	                submiddlewares.unshift(subpath);
	            }

	            // Add the path to the router
	            router = addPath(router, submethod, submiddlewares);
	        }
	    }

	    // Parse middlwares to handle mixed arrays of middlwares and sequenced middlwares
	    middlewares = parseMiddlewares(args);

	    // Add the path only if there are middlewares passed
	    if (middlewares.length > 0) {
	        // If the path wasn't set before, set the regexp and params list
	        if (path && router.regexpList[path] === undefined) {
	            // Remove the last slash
	            path = path.replace(/\/(\?.*)?$/gi, '$1');

	            // Find the express like params
	            var params = path.match(/:(\w+)?/gi) || [];

	            // Set the names of the params found
	            for (var i$1 in params) {
	                params[i$1] = params[i$1].slice(1);
	            }

	            var regexpPath = path
	                // Catch params
	                .replace(/:(\w+)/gi, '([^\\s\\/|\\?]+)')
	                // To set to any url with the path as prefix
	                .replace(/\*/g, '.*')
	                // Remove the last slash
	                .replace(/\/(\?.*)?$/gi, '$1');

	            // Set the object to the path
	            router.regexpList[path] = {
	                regexp: new RegExp('^' + regexpPath + '/?(\\?.*)?$', 'gi'),
	                params: params
	            };
	        }

	        // Add the path to the paths list
	        router.paths.push({
	            method: method,
	            path: path,
	            middlewares: middlewares
	        });
	    }

	    return router;
	};

	var RouterFactory = function () {
	    /**
	     * new Rotuer
	     * @param  {String}    url     The path to call
	     * @return {Any}           The final response
	     */
	    var Router = async function (url) {
	        if ( url === void 0 ) url = '/';

	        var method = 'get',
	            params = {},
	            middlewares = [],
	            response,
	            i = 0,
	            l = Router.paths.length;

	        Router.url = url;

	        for (; i < l; i++) {
	            var path = Router.paths[i];
	            if (method !== path.method && path.method !== 'use') {
	                continue;
	            }

	            if ((path.method === 'use' || method === path.method) && path.path === undefined) {
	                parseMiddlewares(path.middlewares, middlewares);
	                continue;
	            }

	            var reg = Router.regexpList[path.path];
	            var matches = reg.regexp.exec(url);
	            reg.regexp.lastIndex = -1;
	            if (Array.isArray(matches)) {
	                matches.shift();
	                var regparams = reg.params;
	                var l$1 = regparams.length;
	                for (; l$1--;) {
	                    if (params[regparams[l$1]] === undefined) {
	                        params[regparams[l$1]] = matches[l$1];
	                    }
	                }
	                parseMiddlewares(path.middlewares, middlewares);
	            }
	        }

	        Router.params = params;

	        if (middlewares.length > 0) {
	            var i$1 = 0, l$2 = middlewares.length;
	            // call sequentially every middleware
	            for (; i$1 < l$2; i$1++) {
	                response = await middlewares[i$1](params);
	                // If there is a response
	                // break the for block
	                if (response) {
	                    return response;
	                }
	            }
	        }

	        if (Router.throwNotFound) {
	            // If no response was sent to the client throw an error
	            throw new Error(("The url " + url + " requested wasn't found"));
	        }
	    };

	    Router.url = '/';
	    Router.params = {};
	    Router.throwNotFound = true;

	    /**
	     * Where to store the paths and its middlewares
	     * @type {Object}
	     */
	    Router.paths = [];

	    /**
	     * Where to store the regexp and params list for the paths
	     * @type {[type]}
	     */
	    Router.regexpList = {};

	    // For each accepted method, add the method to the router
	    Router.get = function () {
	        return addPath(Router, 'get', v.utils.arguments2Array(arguments));
	    };
	    Router.use = function () {
	        return addPath(Router, 'use', v.utils.arguments2Array(arguments));
	    };

	    /**
	     * Return the new router
	     * @type {Router}
	     */
	    return Router;
	};


	var plugin = function (v) {
	    var mainRouter;
	    var RoutesContainer;
	    function runRoute(parentComponent, url, args) {
	        return mainRouter(url)
	            .then(function (response) {
	                if (typeof response !== 'object') {
	                    throw new Error('v.router.component.required');
	                }

	                if (!response.isComponent && typeof response.view === 'function') {
	                    response = v(response);
	                }

	                if (!response.isComponent) {
	                    throw new Error('v.router.component.required');
	                }

	                if (parentComponent) {
	                    args.unshift(v(response, args));
	                    response = parentComponent;
	                }

	                args.unshift(response);

	                if (v.is.node || !v.is.mounted) {
	                    args.unshift(RoutesContainer);
	                    return v.mount.apply(v, args);
	                }

	                return v.update.apply(v, args);
	            });
	    }
	    v.routes = function (elementContainer, router) {
	        if (elementContainer && router) {
	            mainRouter = router;
	            RoutesContainer = elementContainer;
	            // Activate the use of the router
	            if (v.is.browser) {
	                function onPopStateGoToRoute() {
	                    v.routes.go(document.location.pathname);
	                }
	                window.addEventListener('popstate', onPopStateGoToRoute, false);
	                onPopStateGoToRoute();
	            }
	        }
	    };

	    v.routes.get = function () {
	        var routes = [];
	        mainRouter.paths.forEach(function (path) {
	            if (path.method === 'get') {
	                routes.push(path.path === '' ? '/' : path.path);
	            }
	        });
	        return routes;
	    };

	    v.routes.current = '/';
	    v.routes.params = {};

	    v.routes.go = function () {
	        var args = v.utils.arguments2Array(arguments);
	        var parentComponent;
	        var url;

	        if (typeof args[0] === 'object') {
	            if (!args[0].isComponent && typeof args[0].view === 'function') {
	                args[0] = v(args[0]);
	            }

	            if (args[0].isComponent) {
	                parentComponent = args.shift();
	            }
	        }

	        if (typeof args[0] === 'string') {
	            url = args.shift();
	        }

	        if (!url) {
	            throw new Error('v.router.url.required');
	        }

	        if (v.is.browser) {
	            window.history.pushState({}, '', url);
	        }

	        return runRoute(parentComponent, url, args);
	    };

	    v.Router = RouterFactory;
	};

	var plugin$1 = function (v) {
	    var Request = function (baseUrl, options) {
	        if ( baseUrl === void 0 ) baseUrl = '';
	        if ( options === void 0 ) options = {};

	        var url = baseUrl.replace(/\/$/gi, '').trim(),
	            opts = Object.assign({
	                methods: ['get', 'post', 'put', 'patch', 'delete']
	            }, options),
	            parseUrl;

	        function serialize(obj, prefix) {
	            var e = encodeURIComponent;
	            return Object.keys(obj)
	                .map(function (p) {
	                    var k = prefix ? prefix + '[' + p + ']' : p;

	                    return typeof obj[p] === 'object'
	                        ? serialize(obj[p], k)
	                        : e(k) + '=' + e(obj[p]);
	                })
	                .join('&');
	        }

	        function request(method, url, data, options) {
	            if ( options === void 0 ) options = {};

	            var opts = Object.assign({
	                    method: method.toLowerCase(),
	                    headers: {
	                        'Accept': 'application/json',
	                        'Content-Type': 'application/json'
	                    }
	                }, request.options, options),
	                type = opts.headers.Accept;

	            if (data !== undefined) {
	                if (opts.method === 'get' && typeof data === 'object') {
	                    url += data = serialize(data);
	                }

	                if (opts.method !== 'get') {
	                    opts.body = JSON.stringify(data);
	                }
	            }

	            return fetch(parseUrl(url), opts)
	                .then(function (response) {
	                    if (response.status < 200 || response.status > 300) {
	                        var err = new Error(response.statusText);
	                        err.response = response;
	                        throw err;
	                    }

	                    if (/text/gi.test(type)) {
	                        return response.text();
	                    }

	                    if (/json/gi.test(type)) {
	                        return response.json();
	                    }

	                    return response;
	                });
	        }
	        parseUrl = function (url) {
	            var u = /^https?/gi.test(url)
	                ? url
	                : (request.baseUrl + '/' + url).trim().replace(/^\/\//gi, '/').trim();

	            if (
	                v.is.node &&
	                typeof request.nodeUrl === 'string'
	            ) {
	                request.nodeUrl = request.nodeUrl.replace(/\/$/gi, '').trim();

	                if (/^https?/gi.test(u) && typeof request.apiUrl === 'string') {
	                    request.apiUrl = request.apiUrl.replace(/\/$/gi, '').trim();
	                    u = u.replace(request.apiUrl, request.nodeUrl);
	                }

	                if (!/^https?/gi.test(u)) {
	                    u = request.nodeUrl + u;
	                }
	            }

	            return u;
	        };

	        request.new = function (baseUrl, options) {
	            return Request(baseUrl, options);
	        };

	        // Change this to  request.urls.api etc...
	        request.apiUrl = undefined;
	        request.nodeUrl = undefined;
	        request.options = opts;
	        request.baseUrl = url;

	        opts.methods.forEach(function (method) { return request[method] = function (url, data, options) { return request(method, url, data, options); }; }
	        );

	        return request;
	    };

	    v.request = Request();
	};

	var plugin$2 = function (v) {
	    if (v.is.browser) {
	        v.sw = function (file, options) {
	            if ( file === void 0 ) file = v.sw.file;
	            if ( options === void 0 ) options = v.sw.options;

	            return navigator.serviceWorker.register(file, options)
	                .then(function () { return navigator.serviceWorker.ready; })
	                .then(function (registration) {
	                    v.sw.ready = true;
	                    v.sw.file = file;
	                    v.sw.options = options;
	                    return new Promise(function (resolve, reject) {
	                        setTimeout(function () {
	                            resolve(navigator.serviceWorker);
	                        }, 10);
	                    });
	                });
	        };

	        v.sw.ready = false;
	        v.sw.file = '/sw.js';
	        v.sw.options = {scope: '/'};
	    }
	};

	v
	    .use(plugin)
	    .use(plugin$1)
	    .use(plugin$2);

	var links = { 
	    view: function view(){ 
	        return [
	            v("link", {"rel":"apple-touch-icon","sizes":"114x114","href":"/icons/apple-touch-icon-114x114.png"}),
	            v("link", {"rel":"apple-touch-icon","sizes":"120x120","href":"/icons/apple-touch-icon-120x120.png"}),
	            v("link", {"rel":"apple-touch-icon","sizes":"144x144","href":"/icons/apple-touch-icon-144x144.png"}),
	            v("link", {"rel":"apple-touch-icon","sizes":"152x152","href":"/icons/apple-touch-icon-152x152.png"}),
	            v("link", {"rel":"apple-touch-icon","sizes":"180x180","href":"/icons/apple-touch-icon-180x180.png"}),
	            v("link", {"rel":"apple-touch-icon","sizes":"57x57","href":"/icons/apple-touch-icon-57x57.png"}),
	            v("link", {"rel":"apple-touch-icon","sizes":"60x60","href":"/icons/apple-touch-icon-60x60.png"}),
	            v("link", {"rel":"apple-touch-icon","sizes":"72x72","href":"/icons/apple-touch-icon-72x72.png"}),
	            v("link", {"rel":"apple-touch-icon","sizes":"76x76","href":"/icons/apple-touch-icon-76x76.png"}),
	            v("link", {"rel":"apple-touch-startup-image","media":"(device-width: 320px) and (device-height: 480px) and (-webkit-device-pixel-ratio: 1)","href":"/icons/apple-touch-startup-image-320x460.png"}),
	            v("link", {"rel":"apple-touch-startup-image","media":"(device-width: 320px) and (device-height: 480px) and (-webkit-device-pixel-ratio: 2)","href":"/icons/apple-touch-startup-image-640x920.png"}),
	            v("link", {"rel":"apple-touch-startup-image","media":"(device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2)","href":"/icons/apple-touch-startup-image-640x1096.png"}),
	            v("link", {"rel":"apple-touch-startup-image","media":"(device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2)","href":"/icons/apple-touch-startup-image-750x1294.png"}),
	            v("link", {"rel":"apple-touch-startup-image","media":"(device-width: 414px) and (device-height: 736px) and (orientation: landscape) and (-webkit-device-pixel-ratio: 3)","href":"/icons/apple-touch-startup-image-1182x2208.png"}),
	            v("link", {"rel":"apple-touch-startup-image","media":"(device-width: 414px) and (device-height: 736px) and (orientation: portrait) and (-webkit-device-pixel-ratio: 3)","href":"/icons/apple-touch-startup-image-1242x2148.png"}),
	            v("link", {"rel":"apple-touch-startup-image","media":"(device-width: 768px) and (device-height: 1024px) and (orientation: landscape) and (-webkit-device-pixel-ratio: 1)","href":"/icons/apple-touch-startup-image-748x1024.png"}),
	            v("link", {"rel":"apple-touch-startup-image","media":"(device-width: 768px) and (device-height: 1024px) and (orientation: landscape) and (-webkit-device-pixel-ratio: 2)","href":"/icons/apple-touch-startup-image-1496x2048.png"}),
	            v("link", {"rel":"apple-touch-startup-image","media":"(device-width: 768px) and (device-height: 1024px) and (orientation: portrait) and (-webkit-device-pixel-ratio: 1)","href":"/icons/apple-touch-startup-image-768x1004.png"}),
	            v("link", {"rel":"apple-touch-startup-image","media":"(device-width: 768px) and (device-height: 1024px) and (orientation: portrait) and (-webkit-device-pixel-ratio: 2)","href":"/icons/apple-touch-startup-image-1536x2008.png"}),
	            v("link", {"rel":"icon","type":"image/png","sizes":"16x16","href":"/icons/favicon-16x16.png"}),
	            v("link", {"rel":"icon","type":"image/png","sizes":"32x32","href":"/icons/favicon-32x32.png"}),
	            v("link", {"rel":"manifest","href":"/icons/manifest.json"}),
	            v("link", {"rel":"shortcut icon","href":"/icons/favicon.ico"}),
	            v("meta", {"name":"apple-mobile-web-app-capable","content":"yes"}),
	            v("meta", {"name":"apple-mobile-web-app-status-bar-style","content":"black-translucent"}),
	            v("meta", {"name":"apple-mobile-web-app-title","content":"Valyrian.js"}),
	            v("meta", {"name":"application-name","content":"Valyrian.js"}),
	            v("meta", {"name":"mobile-web-app-capable","content":"yes"}),
	            v("meta", {"name":"msapplication-TileColor","content":"#fff"}),
	            v("meta", {"name":"msapplication-TileImage","content":"/icons/mstile-144x144.png"}),
	            v("meta", {"name":"msapplication-config","content":"/icons/browserconfig.xml"}),
	            v("meta", {"name":"theme-color","content":"#fff"})
	        ];
	    }
	};

	var version = "1.9.1";

	var Main = {
	    title: 'Valyrian.js',
	    version: version,
	    view: function view(content) {
	        return v('html', {lang: 'en'}, [
	            v('head', null, [
	                v('title', null, Main.title),
	                v('style', null, v.inline.uncss()),
	                v(links) ]),
	            v('body', null, [
	                content,
	                // v('script', v.inline.js())
	                v('script', {src: '/index.min.js', async: true})
	            ])
	        ]);
	    }
	};

	// function view(content) {
	//     return v('html', {lang: 'en'}, [
	//         v('head', null, [
	//             v('title', null, this.title),
	//             v('style', null, v.inline.uncss()),
	//             v(links),
	//             v('script', {src: '/index.min.js', async: true})
	//         ]),
	//         v('body', [
	//             content
	//             // v('script', v.inline.js())
	//         ])
	//     ]);
	// };

	// export default v(view, {title: 'Valyrian.js', version});

	var state = {
	    data: {
	        hello: 'Hello',
	        name: 'world'
	    },
	    oninit: function oninit() {
	        return this.getServer();
	    },
	    getServer: function getServer() {
	        var this$1 = this;

	        return v.request.get('/api/hola').then(function (data) {
	            this$1.data = data;
	        });
	    }
	};

	function view() {
	    return v('div', {id: 'mundo', class: 'hola'}, ((this.data.hello) + " " + (this.data.name)));
	}

	var Hello = v(view, state);

	var Counter = {
	    count: 0,
	    down: function (value) {
	        Counter.count -= value;
	    },
	    up: function (value) {
	        Counter.count += value;
	    },
	    view: function () {
	        return v("div", null, [
	            v("h1", null, Counter.count),
	            v("button", { onclick: function () { return Counter.down(1); } }, "-"),
	            v("button", { onclick: function () { return Counter.up(1); } }, "+"),
	            v("a", { href: '/hello', onclick: function onclick(e) {
	                v.routes.go('/hello');
	                e.preventDefault();
	            } }, "Go to hello"),
	            v('div', null, [
	                Counter.count === 2 ? v(2) : '',
	                v('br'),
	                v('div', null, 'boolean true'),
	                v('div', null, true),
	                v('br'),
	                v('div', null, 'boolean false'),
	                v('div', null, false),
	                v('br'),
	                v('div', null, 'empty object'),
	                v('div', null, {}),
	                v('br'),
	                v('div', null, 'null'),
	                v('div', null, null),
	                v('br'),
	                v('div', null, 'undefined'),
	                v('div', null, undefined),
	                v('br'),
	                v('ul', null, (function () {
	                    var elem = [];
	                    if (Counter.count >= 0) {
	                        for (var l = Counter.count; l--;) {
	                            elem.push(v('li', null, l));
	                        }
	                    }

	                    return elem;
	                }())),
	                v('img', {
	                    className: 'div',
	                    id: 'ok',
	                    src: 'http://placeimg.com/640/480/any'
	                })
	            ])
	        ]);
	    }
	};

	var Diff = {
	    s: 1,
	    up: function () { return Diff.s += 1; },
	    down: function () { return Diff.s -= 1; },
	    view: function view() {
	        return v('div', null, [
	            Diff.s > 0 ? v('h1', null, Diff.s) : v('small'),
	            v('button', { onclick: Diff.up }, '+'),
	            v('button', { onclick: Diff.down }, '-')
	        ]);
	    }
	};

	var Lifecycle = {
	    s: 1,
	    up: function () { return Lifecycle.s += 1; },
	    down: function () { return Lifecycle.s += -1; },
	    view: function view() {
	        return v('div', {
	            oninit: function oninit(vnode) { // Before dom element is created
	                console.log('component oninit', vnode);
	            },
	            oncreate: function oncreate(vnode) { // After dom element is created and attached to the document
	                console.log('component oncreate', vnode);
	            },
	            onupdate: function onupdate(vnode) { // after dom element is updated
	                console.log('component onupdate', vnode);
	            },
	            onremove: function onremove(vnode) { // after dom element is removed
	                console.log('component onremove', vnode);
	            }
	        }, [
	            Lifecycle.s > 0 ? v('h1', {
	                oninit: function oninit(vnode) { // Before dom element is created
	                    console.log('oninit', vnode);
	                },
	                oncreate: function oncreate(vnode) { // After dom element is created and attached to the document
	                    console.log('oncreate', vnode);
	                },
	                onupdate: function onupdate(vnode) { // after dom element is updated
	                    console.log('onupdate', vnode);
	                },
	                onremove: function onremove(vnode) { // after dom element is removed
	                    console.log('onremove', vnode);
	                }
	            }, Lifecycle.s) : v('small'),
	            v('button', {onclick: Lifecycle.up}, '+'),
	            v('button', {onclick: Lifecycle.down}, '-'),
	            v('ul', null, (function () {
	                var elem = [];
	                if (Lifecycle.s >= 0) {
	                    for (var l = Lifecycle.s; l--;) {
	                        if (l !== 4) {
	                            elem.push(v('li', null, v('span', {
	                                onremove: function onremove(vnode) {
	                                    console.log('onspanremove', vnode);
	                                }
	                            }, l + 1)));
	                        }
	                    }
	                }

	                return elem;
	            }()))
	        ]);
	    }
	};

	var SubcomponentFactory = function () {
	    var Subcomponent = {
	        hidden: true,
	        view: function view(vnode) {
	            var this$1 = this;

	            return [
	                v('button', {
	                    onclick: function () {
	                        this$1.hidden = !this$1.hidden;
	                        v.update();
	                    }
	                }, this.hidden ? 'Unhide' : 'Hide'),
	                v('div', null, this.hidden ? 'Hidden' : 'Unhidden')
	            ];
	        }
	    };
	    return Subcomponent;
	};

	var Component = {
	    oninit: function oninit(vnode) {
	        Component.sub1 = SubcomponentFactory();
	        Component.sub2 = SubcomponentFactory();
	        Component.sub3 = SubcomponentFactory();
	    },
	    view: function view() {
	        return [
	            v(Component.sub1, { hidden: false }),
	            v(Component.sub2, { hidden: true }),
	            v(Component.sub3)
	        ];
	    }
	};

	var Pages = {
	    Main: Main,
	    Hello: Hello,
	    Counter: Counter,
	    Diff: Diff,
	    Lifecycle: Lifecycle,
	    Subcomponent: Component
	};

	// Create a router
	var router = v.Router();
	router
	    .use(function () { return console.log('ok'); })
	    .get('/', [
	        function () { return console.log('Init'); },
	        function () { return Pages.Hello; }
	    ])
	    .get('/hello', [
	        function () { return Pages.Hello.getServer(); },
	        function () { return Pages.Hello; }
	    ])
	    .get('/counter', function () { return Pages.Counter; })
	    .get('/diff', function () { return Pages.Diff; })
	    .get('/lifecycle', function () { return Pages.Lifecycle; })
	    .get('/subcomponent', function () { return Pages.Subcomponent; })
	    .get('/hello/:ok', function (params) {
	        return Pages.Hello;
	    })
	;

	// Assign routes to ValyrianJs
	v.routes('body', router);

	// if (v.isBrowser) {
	//     v.sw('./sw.js')
	//         .then(() => {
	//             console.log('SW registered');
	//         });
	// }

	// // Export what is needed for the backend
	var index = {Pages: Pages};

	return index;

})));
//# sourceMappingURL=index.min.js.map
