(function () {
    'use strict';

    (typeof window === 'undefined' ? global : window).v = Valyrian();

    var Store$1 = {
        hello: v.data('hello'),
        name: v.data('name'),
        count: v.data(1)
    };

    Store$1.message = v.data(function () { return Store$1.hello + ' ' + Store$1.name; });

    var Main = {
        view: function view() {
            return [
                v('head'),
                v('body', [
                    Main.attributes.children,
                    v('script', { src: 'valyrian.min.js' }),
                    v('script', { src: 'index.min.js' })
                ])
            ];
        }
    };

    var Hello = {
        getServer: function () {
            return v.get('/api/hola').then(function (data) {
                Store.hello(data.hello);
                Store.name(data.name);
            });
        },
        view: function view() {
            return v('div#mundo.hola', Store.message());
        }
    };

    var Counter = {
        down: function (value) {
            Store.count(Store.count - value);
        },
        up: function (value) {
            Store.count(Store.count + value);
        },
        view: function () {
            return v("div", [
                v("h1", Store.count()),
                v("button", { onclick: function () { return Counter.down(1); } }, "-"),
                v("button", { onclick: function () { return Counter.up(1); } }, "+"),
                v("button", { onclick: function () { return Store.hello('aloha'); } }, "Aloha"),
                v("button", { onclick: function () { return v.router.go('/hello'); } }, "<"),
                v("button", { onclick: function () { return v.router.go(-1); } }, "-1"),
                v("button", { onclick: function () { return v.router.back(); } }, "back"),
                v("button", { onclick: function () { return v.router.forward(); } }, "forward"),
                v([
                    Store.count() === 2 ? v(2) : '',
                    v('br'),
                    v(true),
                    v('br'),
                    v({}, {}),
                    v('br'),
                    v(null),
                    v('br'),
                    v(undefined),
                    v('br'),
                    v('ul', (function () {
                        var elem = [];
                        if (Store.count() >= 0) {
                            for (var l = Store.count(); l--;) {
                                elem.push(v('li', l));
                            }
                        }

                        return elem;
                    })()),
                    v('img.div[src=http://placeimg.com/640/480/any]#ok')
                ])
            ]);
        }
    };

    var Diff = {
        s: v.data(1),
        up: function () { return Diff.s(Diff.s + 1); },
        down: function () { return Diff.s(Diff.s - 1); },
        view: function view() {
            return v('div', [
                Diff.s() > 0 ? v('h1', Diff.s()) : v('small', ''),
                v('button', { onclick: Diff.up }, '+'),
                v('button', { onclick: Diff.down }, '-') ]);
        }
    };

    var Lifecycle = {
        s: v.data(1),
        up: function () { return Lifecycle.s(Lifecycle.s+1); },
        down: function () { return Lifecycle.s(Lifecycle.s-1); },
        oninit: function oninit(vnode){ // Before dom element is created
            console.log('component oninit', vnode);
        },
        oncreate: function oncreate(vnode){ // After dom element is created and attached to the document
            console.log('component oncreate', vnode);
        },
        onupdate: function onupdate(vnode){ // after dom element is updated
            console.log('component onupdate', vnode);
        },
        onbeforeremove: function onbeforeremove(vnode){ // before dom element is detached from the document
            console.log('component onbeforeremove', vnode);
        },
        onremove: function onremove(vnode){ // after dom element is removed
            console.log('component onremove', vnode);
        },
        view: function view() {
            return v('div', [
                Lifecycle.s() > 0 ? v('h1', {
                    oninit: function oninit(vnode){ // Before dom element is created
                        console.log('oninit', vnode);
                    },
                    oncreate: function oncreate(vnode){ // After dom element is created and attached to the document
                        console.log('oncreate', vnode);
                    },
                    onupdate: function onupdate(vnode){ // after dom element is updated
                        console.log('onupdate', vnode);
                    },
                    onbeforeremove: function onbeforeremove(vnode){ // before dom element is detached from the document
                        console.log('onbeforeremove', vnode);
                    },
                    onremove: function onremove(vnode){ // after dom element is removed
                        console.log('onremove', vnode);
                    }
                }, Lifecycle.s()) : v('small', ''),
                v('button', {onclick: Lifecycle.up}, '+'),
                v('button', {onclick: Lifecycle.down}, '-'),
                v('ul', (function(){
                    var elem = [];
                    if (Lifecycle.s() >= 0){
                        for (var l = Lifecycle.s(); l--;){
                            if (l !== 4){
                                elem.push(v('li', {
                                    onbeforeremove: function onbeforeremove(vnode){
                                        console.log('onbeforeremovelistart');
                                        var p = new Promise(function (resolve) {
                                            setTimeout(function(){
                                                console.log('onbeforeremoveliend');
                                                resolve();
                                            }, 2000);
                                        });
                                        return p;
                                    }
                                }, v('span',{
                                    onbeforeremove: function onbeforeremove(vnode){
                                        console.log('onbeforeremovespanstart');
                                        var p = new Promise(function (resolve) {
                                            setTimeout(function(){
                                                console.log('onbeforeremovespanend');
                                                resolve();
                                            }, 1000);
                                        });
                                        return p;
                                    },
                                    onremove: function onremove(vnode){
                                        console.log('onspanremove', vnode);
                                    }
                                }, l)));
                            }
                        }
                    }

                    return elem;
                })())
            ]);
        }
    };

    var Subcomponent = {
        hidden: true,
        view: function view() {
            var this$1 = this;

            console.log(this);
            return [
                v('button', {
                    onclick: function () {
                        this$1.hidden = !this$1.hidden;
                        console.log(this$1);
                        v.update();
                    }
                }, this.hidden ? 'Unhide' : 'Hide'),
                v('div', this.hidden ? 'Hidden' : 'Unhidden')
            ]
        }
    };

    var Component = {
        view: function view() {
            return [
                v(Subcomponent, { hidden: false }),
                v(Subcomponent, { hidden: true })
            ];
        }
    };

    var Components = {
        Main: Main,
        Hello: Hello,
        Counter: Counter,
        Diff: Diff,
        Lifecycle: Lifecycle,
        Subcomponent: Component
    };

    var root = (typeof window === 'undefined' ? global : window);
    root.Store = Store$1;
    root.Components = Components;

    v.r.nodeUrl = 'http://localhost:3000';

    v.router(v.isNode ? v.container : document.body, Components.Main)
        // Use middlewares available for all requests
        .use(function () { return console.log('ok'); })
        .get('/', [
            function () { return console.log('Init'); },
            function () { return Components.Hello; }
        ])
        .get('/hello', [
            function () { return Components.Hello.getServer(); },
            function () { return Components.Hello; }
        ])
        .get('/counter', function () { return Components.Counter; })
        .get('/diff', function () { return Components.Diff; })
        .get('/lifecycle', function () { return Components.Lifecycle; })
        .get('/subcomponent', function () { return Components.Subcomponent; })
        ;

    if (!v.isNode) {

        setTimeout(function () {
            console.log('hello');
            Store$1.hello('Hola');
        }, 5000);
        //
        setTimeout(function () {
            console.log('world');
            Store$1.name('Mundo');
        }, 7000);

        setTimeout(function () {
            v.router.go('/counter');
        }, 10000);
    }

}());
//# sourceMappingURL=index.min.js.map
