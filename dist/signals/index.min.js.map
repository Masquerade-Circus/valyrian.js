//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzaWduYWxzX2V4cG9ydHMiLCJfX2V4cG9ydCIsImNyZWF0ZUVmZmVjdCIsImNyZWF0ZVNpZ25hbCIsImNyZWF0ZVNpZ25hbFN0b3JlIiwiX19FWFBPUlRTX18iLCJpbXBvcnRfdmFseXJpYW4iLCJyZXF1aXJlIiwiaW1wb3J0X3V0aWxzIiwiZWZmZWN0U3RhY2siLCJpbml0aWFsVmFsdWUiLCJ2YWx1ZSIsInN1YnNjcmliZXJzIiwiU2V0IiwiZG9tV2l0aFZub2Rlc1RvVXBkYXRlIiwiV2Vha1NldCIsInJ1blN1YnNjcmliZXJzIiwiZm9yRWFjaCIsInN1YnNjcmliZXIiLCJjdXJyZW50RWZmZWN0IiwibGVuZ3RoIiwiaGFzIiwiYWRkIiwiY3VycmVudFZub2RlIiwiY3VycmVudCIsInZub2RlIiwiZG9tIiwic3Vic2NyaXB0aW9uIiwicGFyZW50Tm9kZSIsImRlbGV0ZSIsInVwZGF0ZVZub2RlIiwibmV3VmFsdWUiLCJyZXNvbHZlZFZhbHVlIiwiZXZlbnQiLCJkZWZhdWx0UHJldmVudGVkIiwicHJldmVudERlZmF1bHQiLCJoYXNDaGFuZ2VkIiwiZWZmZWN0RGVwcyIsIldlYWtNYXAiLCJlZmZlY3QiLCJkZXBlbmRlbmNpZXMiLCJydW5FZmZlY3QiLCJvbGREZXBzIiwiZ2V0Iiwic29tZSIsImRlcCIsImkiLCJPYmplY3QiLCJpcyIsInNldCIsInB1c2giLCJwb3AiLCJpbml0aWFsU3RhdGUiLCJzdGF0ZSIsInBhdGgiXSwic291cmNlcyI6WyIuLi8uLi9saWIvc2lnbmFscy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjdXJyZW50LCBEb21FbGVtZW50LCB1cGRhdGVWbm9kZSwgVm5vZGVXaXRoRG9tIH0gZnJvbSBcInZhbHlyaWFuLmpzXCI7XG5pbXBvcnQgeyBnZXQsIHNldCwgaGFzQ2hhbmdlZCB9IGZyb20gXCJ2YWx5cmlhbi5qcy91dGlsc1wiO1xuXG5jb25zdCBlZmZlY3RTdGFjazogRnVuY3Rpb25bXSA9IFtdO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbmV4cG9ydCB0eXBlIFNpZ25hbDxUPiA9IFsoKSA9PiBULCAobmV3VmFsdWU6IFQgfCAoKGN1cnJlbnQ6IFQpID0+IFQpKSA9PiB2b2lkLCAoKSA9PiB2b2lkXTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNpZ25hbDxUPihpbml0aWFsVmFsdWU6IFQpOiBTaWduYWw8VD4ge1xuICBsZXQgdmFsdWUgPSBpbml0aWFsVmFsdWU7XG4gIGNvbnN0IHN1YnNjcmliZXJzID0gbmV3IFNldDxGdW5jdGlvbj4oKTtcbiAgY29uc3QgZG9tV2l0aFZub2Rlc1RvVXBkYXRlID0gbmV3IFdlYWtTZXQ8RG9tRWxlbWVudD4oKTtcblxuICBjb25zdCBydW5TdWJzY3JpYmVycyA9ICgpID0+IHN1YnNjcmliZXJzLmZvckVhY2goKHN1YnNjcmliZXIpID0+IHN1YnNjcmliZXIoKSk7XG5cbiAgY29uc3QgcmVhZCA9ICgpID0+IHtcbiAgICBjb25zdCBjdXJyZW50RWZmZWN0ID0gZWZmZWN0U3RhY2tbZWZmZWN0U3RhY2subGVuZ3RoIC0gMV07XG4gICAgaWYgKGN1cnJlbnRFZmZlY3QgJiYgIXN1YnNjcmliZXJzLmhhcyhjdXJyZW50RWZmZWN0KSkge1xuICAgICAgc3Vic2NyaWJlcnMuYWRkKGN1cnJlbnRFZmZlY3QpO1xuICAgIH1cblxuICAgIGNvbnN0IGN1cnJlbnRWbm9kZSA9IGN1cnJlbnQudm5vZGUgYXMgVm5vZGVXaXRoRG9tO1xuICAgIGlmIChjdXJyZW50Vm5vZGUgJiYgIWRvbVdpdGhWbm9kZXNUb1VwZGF0ZS5oYXMoY3VycmVudFZub2RlLmRvbSkpIHtcbiAgICAgIGNvbnN0IGRvbSA9IGN1cnJlbnRWbm9kZS5kb207XG4gICAgICBjb25zdCBzdWJzY3JpcHRpb24gPSAoKSA9PiB7XG4gICAgICAgIGlmICghZG9tLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICBzdWJzY3JpYmVycy5kZWxldGUoc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICBkb21XaXRoVm5vZGVzVG9VcGRhdGUuZGVsZXRlKGRvbSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHVwZGF0ZVZub2RlKGRvbS52bm9kZSk7XG4gICAgICB9O1xuXG4gICAgICBzdWJzY3JpYmVycy5hZGQoc3Vic2NyaXB0aW9uKTtcbiAgICAgIGRvbVdpdGhWbm9kZXNUb1VwZGF0ZS5hZGQoZG9tKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIGNvbnN0IHdyaXRlID0gKG5ld1ZhbHVlOiBUIHwgKChjdXJyZW50OiBUKSA9PiBUKSkgPT4ge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIGNvbnN0IHJlc29sdmVkVmFsdWUgPSB0eXBlb2YgbmV3VmFsdWUgPT09IFwiZnVuY3Rpb25cIiA/IChuZXdWYWx1ZSBhcyAoY3VycmVudDogVCkgPT4gVCkodmFsdWUpIDogbmV3VmFsdWU7XG5cbiAgICBpZiAoY3VycmVudC5ldmVudCAmJiAhY3VycmVudC5ldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICBjdXJyZW50LmV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgaWYgKCFoYXNDaGFuZ2VkKHZhbHVlLCByZXNvbHZlZFZhbHVlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhbHVlID0gcmVzb2x2ZWRWYWx1ZTtcblxuICAgIHJ1blN1YnNjcmliZXJzKCk7XG4gIH07XG5cbiAgcmV0dXJuIFtyZWFkLCB3cml0ZSwgcnVuU3Vic2NyaWJlcnNdO1xufVxuXG5jb25zdCBlZmZlY3REZXBzID0gbmV3IFdlYWtNYXA8RnVuY3Rpb24sIGFueVtdPigpO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRWZmZWN0KGVmZmVjdDogRnVuY3Rpb24sIGRlcGVuZGVuY2llcz86IGFueVtdKSB7XG4gIGNvbnN0IHJ1bkVmZmVjdCA9ICgpID0+IHtcbiAgICBjb25zdCBvbGREZXBzID0gZWZmZWN0RGVwcy5nZXQoZWZmZWN0KTtcbiAgICBjb25zdCBoYXNDaGFuZ2VkRGVwcyA9ICFvbGREZXBzIHx8ICFkZXBlbmRlbmNpZXMgfHwgZGVwZW5kZW5jaWVzLnNvbWUoKGRlcCwgaSkgPT4gIU9iamVjdC5pcyhkZXAsIG9sZERlcHNbaV0pKTtcblxuICAgIGlmICghaGFzQ2hhbmdlZERlcHMpIHJldHVybjtcblxuICAgIGVmZmVjdERlcHMuc2V0KGVmZmVjdCwgZGVwZW5kZW5jaWVzIHx8IFtdKTtcbiAgICB0cnkge1xuICAgICAgZWZmZWN0U3RhY2sucHVzaChydW5FZmZlY3QpO1xuICAgICAgZWZmZWN0KCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGVmZmVjdFN0YWNrLnBvcCgpO1xuICAgIH1cbiAgfTtcblxuICBydW5FZmZlY3QoKTtcbn1cblxuLy8gUGF0aCBpcyBhIHN0cmluZyB3aXRoIGRvdCBub3RhdGlvbiwgZS5nOlxuLy8gJ2EuYi5jJyA9PT0gb2JqLmEuYi5jXG4vLyAnYS4wLmMnID09PSBvYmouYVswXS5jXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbmV4cG9ydCB0eXBlIFNpZ25hbFN0b3JlPFQ+ID0gWygpID0+IFQsIChwYXRoOiBzdHJpbmcsIG5ld1ZhbHVlOiBUIHwgKChjdXJyZW50OiBUKSA9PiBUKSB8IGFueSkgPT4gdm9pZF07XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTaWduYWxTdG9yZTxUPihpbml0aWFsU3RhdGU6IFQpOiBTaWduYWxTdG9yZTxUPiB7XG4gIGNvbnN0IFtzdGF0ZSwgLCBydW5TdWJzY3JpYmVyc10gPSBjcmVhdGVTaWduYWwoaW5pdGlhbFN0YXRlKTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgY29uc3Qgc2V0dGVyID0gKHBhdGg6IHN0cmluZywgbmV3VmFsdWU6IFQgfCAoKGN1cnJlbnQ6IFQpID0+IFQpKSA9PiB7XG4gICAgY29uc3QgY3VycmVudCA9IGdldChpbml0aWFsU3RhdGUsIHBhdGgpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIGNvbnN0IHJlc29sdmVkVmFsdWUgPSB0eXBlb2YgbmV3VmFsdWUgPT09IFwiZnVuY3Rpb25cIiA/IChuZXdWYWx1ZSBhcyAoY3VycmVudDogVCkgPT4gVCkoY3VycmVudCkgOiBuZXdWYWx1ZTtcblxuICAgIGlmICghaGFzQ2hhbmdlZChjdXJyZW50LCByZXNvbHZlZFZhbHVlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHNldChpbml0aWFsU3RhdGUsIHBhdGgsIHJlc29sdmVkVmFsdWUpO1xuICAgIHJ1blN1YnNjcmliZXJzKCk7XG4gIH07XG5cbiAgcmV0dXJuIFtzdGF0ZSwgc2V0dGVyXTtcbn1cbiJdLCJtYXBwaW5ncyI6ImdKQUFBQSxFQUFBLEcseURBQUFDLENBQUFELEVBQUEsQ0FBQUUsYUFBQSxJQUFBQSxFQUFBQyxhQUFBLElBQUFBLEVBQUFDLGtCQUFBLElBQUFBLElBQUEsSSxFQUFBQyxHLEVBQUFMLEUsME1BQUFNLEVBQStEQyxRQUFBLGVBQy9EQyxFQUFxQ0QsUUFBQSxxQkFFL0JFLEVBQTBCLEdBS3pCLFNBQVNOLEVBQWdCTyxHQUM5QixJQUFJQyxFQUFRRCxFQUNaLE1BQU1FLEVBQWMsSUFBSUMsSUFDbEJDLEVBQXdCLElBQUlDLFFBRTVCQyxFQUFpQixJQUFNSixFQUFZSyxRQUFTQyxHQUFlQSxLQTZDakUsTUFBTyxDQTNDTSxLQUNYLE1BQU1DLEVBQWdCVixFQUFZQSxFQUFZVyxPQUFTLEdBQ25ERCxJQUFrQlAsRUFBWVMsSUFBSUYsSUFDcENQLEVBQVlVLElBQUlILEdBR2xCLE1BQU1JLEVBQWVqQixFQUFBa0IsUUFBUUMsTUFDN0IsR0FBSUYsSUFBaUJULEVBQXNCTyxJQUFJRSxFQUFhRyxLQUFNLENBQ2hFLE1BQU1BLEVBQU1ILEVBQWFHLElBQ25CQyxFQUFlLEtBQ25CLElBQUtELEVBQUlFLFdBR1AsT0FGQWhCLEVBQVlpQixPQUFPRixRQUNuQmIsRUFBc0JlLE9BQU9ILElBRy9CLEVBQUFwQixFQUFBd0IsYUFBWUosRUFBSUQsTUFBSyxFQUd2QmIsRUFBWVUsSUFBSUssR0FDaEJiLEVBQXNCUSxJQUFJSSxFQUM1QixDQUVBLE9BQU9mLENBQUEsRUFJTW9CLElBRWIsTUFBTUMsRUFBb0MsbUJBQWJELEVBQTJCQSxFQUErQnBCLEdBQVNvQixFQUU1RnpCLEVBQUFrQixRQUFRUyxRQUFVM0IsRUFBQWtCLFFBQVFTLE1BQU1DLGtCQUNsQzVCLEVBQUFrQixRQUFRUyxNQUFNRSxrQkFHWixFQUFDM0IsRUFBQTRCLFlBQVd6QixFQUFPcUIsS0FJdkJyQixFQUFRcUIsRUFFUmhCLElBQWUsRUFHSUEsRUFDdkIsQ0FFQSxJQUFNcUIsRUFBYSxJQUFJQyxRQUVoQixTQUFTcEMsRUFBYXFDLEVBQWtCQyxHQUM3QyxNQUFNQyxFQUFZLEtBQ2hCLE1BQU1DLEVBQVVMLEVBQVdNLElBQUlKLEdBRy9CLElBRndCRyxJQUFZRixHQUFnQkEsRUFBYUksS0FBSyxDQUFDQyxFQUFLQyxLQUFPQyxPQUFPQyxHQUFHSCxFQUFLSCxFQUFRSSxLQUUxRyxDQUVBVCxFQUFXWSxJQUFJVixFQUFRQyxHQUFnQixJQUN2QyxJQUNFL0IsRUFBWXlDLEtBQUtULEdBQ2pCRixHQUNGLFNBQ0U5QixFQUFZMEMsS0FDZCxDQVJxQixDQVFyQixFQUdGVixHQUNGLENBUU8sU0FBU3JDLEVBQXFCZ0QsR0FDbkMsTUFBT0MsRUFBTyxDQUFFckMsR0FBa0JiLEVBQWFpRCxHQWdCL0MsTUFBTyxDQUFDQyxFQWJPLENBQUNDLEVBQWN2QixLQUM1QixNQUFNUCxLQUFVaEIsRUFBQW1DLEtBQUlTLEVBQWNFLEdBRTVCdEIsRUFBb0MsbUJBQWJELEVBQTJCQSxFQUErQlAsR0FBV08sR0FFOUYsRUFBQ3ZCLEVBQUE0QixZQUFXWixFQUFTUSxNQUl6QixFQUFBeEIsRUFBQXlDLEtBQUlHLEVBQWNFLEVBQU10QixHQUN4QmhCLElBQWUsRUFJbkIsQyJ9