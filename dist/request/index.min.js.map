//# sourceMappingURL=data:application/json;charset=utf-8;base64,{"version":3,"names":["localValyrian","isNodeJs","Boolean","process","versions","node","serialize","obj","prefix","Object","keys","map","prop","k","encodeURIComponent","join","request","Requester","baseUrl","options","allowedMethods","url","replace","trim","urls","base","api","opts","request2","async","method","url2","data","options2","innerOptions","toLowerCase","headers","resolveWithFullResponse","Accept","acceptType","contentType","indexOf","Error","test","body","JSON","stringify","formData","FormData","i","append","response","fetch","u","parts","split","parseUrl","ok","err","statusText","text","json","error","new","baseUrl2","setOption","key","value","next","result","parsed","length","shift","nextIsArray","idx","unshift","getOptions","forEach","v"],"sources":["../../lib/request/index.ts"],"sourcesContent":["import { Valyrian } from \"../index\";\n\ninterface UrlOptions {\n  base: string; // Used to prefix the url for scoped requests.\n  node: string | null; // Used to redirect local requests to node server for server side rendering.\n  api: string | null; // Used to redirect api requests to node server for server side rendering.\n}\n\ninterface RequestOptions {\n  allowedMethods: string[];\n  urls?: UrlOptions;\n  [key: string | number | symbol]: any;\n}\n\ninterface RequestOptionsWithUrls extends RequestOptions {\n  urls: UrlOptions;\n}\n\ninterface SendOptions extends RequestOptionsWithUrls, RequestInit {\n  method: string;\n  headers: Record<string, string>;\n  resolveWithFullResponse?: boolean;\n}\n\ninterface RequestInterface {\n  // eslint-disable-next-line no-unused-vars\n  (method: string, url: string, data?: Record<string, any>, options?: Partial<SendOptions>): any | Response;\n  // eslint-disable-next-line no-unused-vars\n  new: (baseUrl: string, options: RequestOptions) => RequestInterface;\n  // eslint-disable-next-line no-unused-vars\n  setOptions: (key: string, value: any) => void;\n  // eslint-disable-next-line no-unused-vars\n  getOptions: (key?: string) => RequestOptions | void;\n  // eslint-disable-next-line no-unused-vars\n  get?: (url: string, data?: Record<string, any>, options?: Record<string, any>) => any | Response;\n  // eslint-disable-next-line no-unused-vars\n  post?: (url: string, data?: Record<string, any>, options?: Record<string, any>) => any | Response;\n  // eslint-disable-next-line no-unused-vars\n  put?: (url: string, data?: Record<string, any>, options?: Record<string, any>) => any | Response;\n  // eslint-disable-next-line no-unused-vars\n  patch?: (url: string, data?: Record<string, any>, options?: Record<string, any>) => any | Response;\n  // eslint-disable-next-line no-unused-vars\n  delete?: (url: string, data?: Record<string, any>, options?: Record<string, any>) => any | Response;\n  // eslint-disable-next-line no-unused-vars\n  head?: (url: string, data?: Record<string, any>, options?: Record<string, any>) => any | Response;\n  // eslint-disable-next-line no-unused-vars\n  options?: (url: string, data?: Record<string, any>, options?: Record<string, any>) => any | Response;\n  [key: string | number | symbol]: any;\n}\n\ndeclare module \"../index\" {\n  // eslint-disable-next-line no-unused-vars\n  interface Valyrian {\n    request?: RequestInterface;\n  }\n}\n\nlet localValyrian: Valyrian = {\n  isNodeJs: Boolean(typeof process !== \"undefined\" && process.versions && process.versions.node)\n} as unknown as Valyrian;\n\n// This method is used to serialize an object into a query string.\nfunction serialize(obj: Record<string, any>, prefix: string = \"\"): string {\n  return Object.keys(obj)\n    .map((prop: string) => {\n      let k = prefix ? `${prefix}[${prop}]` : prop;\n      return typeof obj[prop] === \"object\" ? serialize(obj[prop], k) : `${encodeURIComponent(k)}=${encodeURIComponent(obj[prop])}`;\n    })\n    .join(\"&\");\n}\n\nfunction parseUrl(url: string, options: RequestOptionsWithUrls) {\n  let u = /^https?/gi.test(url) ? url : options.urls.base + url;\n\n  let parts = u.split(\"?\");\n  u = parts[0].trim().replace(/^\\/\\//, \"/\").replace(/\\/$/, \"\").trim();\n\n  if (parts[1]) {\n    u += `?${parts[1]}`;\n  }\n\n  if (localValyrian.isNodeJs && typeof options.urls.node === \"string\") {\n    options.urls.node = options.urls.node;\n\n    if (typeof options.urls.api === \"string\") {\n      options.urls.api = options.urls.api.replace(/\\/$/gi, \"\").trim();\n      u = u.replace(options.urls.api, options.urls.node);\n    }\n\n    if (!/^https?/gi.test(u)) {\n      u = options.urls.node + u;\n    }\n  }\n\n  return u;\n}\n\n// eslint-disable-next-line sonarjs/cognitive-complexity\nfunction Requester(baseUrl = \"\", options: RequestOptions = { allowedMethods: [\"get\", \"post\", \"put\", \"patch\", \"delete\"] }) {\n  let url = baseUrl.replace(/\\/$/gi, \"\").trim();\n  if (!options.urls) {\n    options.urls = {\n      base: \"\",\n      node: null,\n      api: null\n    };\n  }\n  let opts: RequestOptionsWithUrls = {\n    ...options,\n    urls: {\n      node: options.urls.node || null,\n      api: options.urls.api || null,\n      base: options.urls.base ? options.urls.base + url : url\n    }\n  };\n\n  const request = async function request(method: string, url: string, data?: Record<string, any>, options = {}) {\n    let innerOptions: SendOptions = {\n      method: method.toLowerCase(),\n      headers: {},\n      resolveWithFullResponse: false,\n      ...opts,\n      ...options\n    } as SendOptions;\n\n    if (!innerOptions.headers.Accept) {\n      innerOptions.headers.Accept = \"application/json\";\n    }\n\n    let acceptType = innerOptions.headers.Accept;\n    let contentType = innerOptions.headers[\"Content-Type\"] || innerOptions.headers[\"content-type\"] || \"\";\n\n    if (innerOptions.allowedMethods.indexOf(method) === -1) {\n      throw new Error(\"Method not allowed\");\n    }\n\n    if (data) {\n      if (innerOptions.method === \"get\" && typeof data === \"object\") {\n        url += `?${serialize(data)}`;\n      }\n\n      if (innerOptions.method !== \"get\") {\n        if (/json/gi.test(contentType)) {\n          innerOptions.body = JSON.stringify(data);\n        } else {\n          let formData;\n          if (data instanceof FormData) {\n            formData = data;\n          } else {\n            formData = new FormData();\n            for (let i in data) {\n              formData.append(i, data[i]);\n            }\n          }\n          innerOptions.body = formData;\n        }\n      }\n    }\n\n    let response = await fetch(parseUrl(url, opts), innerOptions);\n    let body = null;\n    if (!response.ok) {\n      let err = new Error(response.statusText) as Error & { response?: any; body?: any };\n      err.response = response;\n      if (/text/gi.test(acceptType)) {\n        err.body = await response.text();\n      }\n\n      if (/json/gi.test(acceptType)) {\n        try {\n          err.body = await response.json();\n        } catch (error) {\n          // ignore\n        }\n      }\n\n      throw err;\n    }\n\n    if (innerOptions.resolveWithFullResponse) {\n      return response;\n    }\n\n    if (/text/gi.test(acceptType)) {\n      body = await response.text();\n      return body;\n    }\n\n    if (/json/gi.test(acceptType)) {\n      try {\n        body = await response.json();\n        return body;\n      } catch (error) {\n        // ignore\n      }\n    }\n\n    return response;\n  } as unknown as RequestInterface;\n\n  request.new = (baseUrl: string, options: RequestOptions) => Requester(baseUrl, { ...opts, ...options });\n\n  request.setOption = (key: string, value: any) => {\n    let result = opts;\n\n    let parsed = key.split(\".\");\n    let next;\n\n    while (parsed.length) {\n      next = parsed.shift() as string;\n\n      let nextIsArray = next.indexOf(\"[\") > -1;\n      if (nextIsArray) {\n        let idx = next.replace(/\\D/gi, \"\");\n        next = next.split(\"[\")[0];\n        parsed.unshift(idx);\n      }\n\n      if (parsed.length > 0 && typeof result[next] !== \"object\") {\n        result[next] = nextIsArray ? [] : {};\n      }\n\n      if (parsed.length === 0 && typeof value !== \"undefined\") {\n        result[next] = value;\n      }\n\n      result = result[next];\n    }\n\n    return result;\n  };\n\n  request.getOptions = (key?: string) => {\n    if (!key) {\n      return opts;\n    }\n\n    let result = opts;\n    let parsed = key.split(\".\");\n    let next;\n\n    while (parsed.length) {\n      next = parsed.shift() as string;\n\n      let nextIsArray = next.indexOf(\"[\") > -1;\n      if (nextIsArray) {\n        let idx = next.replace(/\\D/gi, \"\");\n        next = next.split(\"[\")[0];\n        parsed.unshift(idx);\n      }\n\n      if (parsed.length > 0 && typeof result[next] !== \"object\") {\n        return null;\n      }\n\n      if (parsed.length === 0) {\n        return result[next];\n      }\n\n      result = result[next];\n    }\n  };\n\n  opts.allowedMethods.forEach(\n    (method) => (request[method] = (url: string, data?: Record<string, any>, options?: Record<string, any>) => request(method, url, data, options))\n  );\n\n  return request;\n}\n\nexport const request = Requester();\nconst plugin = (v: Valyrian): RequestInterface => {\n  localValyrian = v;\n  v.request = request;\n  return request;\n};\n\nexport default plugin;\n"],"mappings":"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"}