//# sourceMappingURL=data:application/json;charset=utf-8;base64,{"version":3,"names":["localValyrian","isNodeJs","Boolean","process","versions","node","serialize","obj","prefix","Object","keys","map","prop","k","encodeURIComponent","join","defaultOptions","allowedMethods","request","Requester","baseUrl","options","url","replace","trim","urls","base","api","opts","async","method","data","innerOptions","toUpperCase","headers","resolveWithFullResponse","Accept","acceptType","contentType","indexOf","Error","test","body","JSON","stringify","formData","FormData","i","append","response","fetch","u","parts","split","parseUrl","ok","err","statusText","text","json","error","new","setOption","key","value","next","result","parsed","length","shift","nextIsArray","idx","unshift","getOptions","forEach","v"],"sources":["../../lib/request/index.ts"],"sourcesContent":["import { Valyrian } from \"Valyrian\";\n\ninterface UrlOptions {\n  base: string; // Used to prefix the url for scoped requests.\n  node: string | null; // Used to redirect local requests to node server for server side rendering.\n  api: string | null; // Used to redirect api requests to node server for server side rendering.\n}\n\ninterface RequestOptions {\n  allowedMethods?: string[];\n  urls?: UrlOptions;\n  [key: string | number | symbol]: any;\n}\n\ninterface RequestOptionsWithUrls extends RequestOptions {\n  urls: UrlOptions;\n  allowedMethods: string[];\n}\n\ninterface SendOptions extends RequestOptionsWithUrls, RequestInit {\n  allowedMethods: string[];\n  method: string;\n  headers: Record<string, string>;\n  resolveWithFullResponse?: boolean;\n}\n\ninterface RequestInterface {\n  // eslint-disable-next-line no-unused-vars\n  (method: string, url: string, data?: Record<string, any>, options?: Partial<SendOptions>): any | Response;\n  // eslint-disable-next-line no-unused-vars\n  new: (baseUrl: string, options: RequestOptions) => RequestInterface;\n  // eslint-disable-next-line no-unused-vars\n  setOptions: (key: string, value: any) => void;\n  // eslint-disable-next-line no-unused-vars\n  getOptions: (key?: string) => RequestOptions | void;\n  // eslint-disable-next-line no-unused-vars\n  get?: (url: string, data?: Record<string, any>, options?: Record<string, any>) => any | Response;\n  // eslint-disable-next-line no-unused-vars\n  post?: (url: string, data?: Record<string, any>, options?: Record<string, any>) => any | Response;\n  // eslint-disable-next-line no-unused-vars\n  put?: (url: string, data?: Record<string, any>, options?: Record<string, any>) => any | Response;\n  // eslint-disable-next-line no-unused-vars\n  patch?: (url: string, data?: Record<string, any>, options?: Record<string, any>) => any | Response;\n  // eslint-disable-next-line no-unused-vars\n  delete?: (url: string, data?: Record<string, any>, options?: Record<string, any>) => any | Response;\n  // eslint-disable-next-line no-unused-vars\n  head?: (url: string, data?: Record<string, any>, options?: Record<string, any>) => any | Response;\n  // eslint-disable-next-line no-unused-vars\n  options?: (url: string, data?: Record<string, any>, options?: Record<string, any>) => any | Response;\n  [key: string | number | symbol]: any;\n}\n\ndeclare module \"Valyrian\" {\n  // eslint-disable-next-line no-unused-vars\n  interface Valyrian {\n    request?: RequestInterface;\n  }\n}\n\nlet localValyrian: Valyrian = {\n  isNodeJs: Boolean(typeof process !== \"undefined\" && process.versions && process.versions.node)\n} as unknown as Valyrian;\n\n// This method is used to serialize an object into a query string.\nfunction serialize(obj: Record<string, any>, prefix: string = \"\"): string {\n  return Object.keys(obj)\n    .map((prop: string) => {\n      let k = prefix ? `${prefix}[${prop}]` : prop;\n      return typeof obj[prop] === \"object\" ? serialize(obj[prop], k) : `${encodeURIComponent(k)}=${encodeURIComponent(obj[prop])}`;\n    })\n    .join(\"&\");\n}\n\nfunction parseUrl(url: string, options: RequestOptionsWithUrls) {\n  let u = /^https?/gi.test(url) ? url : options.urls.base + url;\n\n  let parts = u.split(\"?\");\n  u = parts[0].trim().replace(/^\\/\\//, \"/\").replace(/\\/$/, \"\").trim();\n\n  if (parts[1]) {\n    u += `?${parts[1]}`;\n  }\n\n  if (localValyrian.isNodeJs && typeof options.urls.node === \"string\") {\n    options.urls.node = options.urls.node;\n\n    if (typeof options.urls.api === \"string\") {\n      options.urls.api = options.urls.api.replace(/\\/$/gi, \"\").trim();\n      u = u.replace(options.urls.api, options.urls.node);\n    }\n\n    if (!/^https?/gi.test(u)) {\n      u = options.urls.node + u;\n    }\n  }\n\n  return u;\n}\n\nconst defaultOptions: RequestOptions = { allowedMethods: [\"get\", \"post\", \"put\", \"patch\", \"delete\"] };\n\n// eslint-disable-next-line sonarjs/cognitive-complexity\nfunction Requester(baseUrl = \"\", options: RequestOptions = defaultOptions) {\n  let url = baseUrl.replace(/\\/$/gi, \"\").trim();\n  if (!options.urls) {\n    options.urls = {\n      base: \"\",\n      node: null,\n      api: null\n    };\n  }\n\n  if (!options.allowedMethods) {\n    options.allowedMethods = defaultOptions.allowedMethods;\n  }\n\n  let opts: RequestOptionsWithUrls = {\n    ...(options as RequestOptionsWithUrls),\n    urls: {\n      node: options.urls.node || null,\n      api: options.urls.api || null,\n      base: options.urls.base ? options.urls.base + url : url\n    }\n  };\n\n  const request = async function request(method: string, url: string, data?: Record<string, any>, options = {}) {\n    let innerOptions: SendOptions = {\n      method: method.toUpperCase(),\n      headers: {},\n      resolveWithFullResponse: false,\n      ...opts,\n      ...options\n    } as SendOptions;\n\n    if (!innerOptions.headers.Accept) {\n      innerOptions.headers.Accept = \"application/json\";\n    }\n\n    let acceptType = innerOptions.headers.Accept;\n    let contentType = innerOptions.headers[\"Content-Type\"] || innerOptions.headers[\"content-type\"] || \"\";\n\n    if (innerOptions.allowedMethods.indexOf(method) === -1) {\n      throw new Error(\"Method not allowed\");\n    }\n\n    if (data) {\n      if (innerOptions.method === \"GET\" && typeof data === \"object\") {\n        url += `?${serialize(data)}`;\n      }\n\n      if (innerOptions.method !== \"GET\") {\n        if (/json/gi.test(contentType)) {\n          innerOptions.body = JSON.stringify(data);\n        } else {\n          let formData;\n          if (data instanceof FormData) {\n            formData = data;\n          } else {\n            formData = new FormData();\n            for (let i in data) {\n              formData.append(i, data[i]);\n            }\n          }\n          innerOptions.body = formData;\n        }\n      }\n    }\n\n    let response = await fetch(parseUrl(url, opts), innerOptions);\n    let body = null;\n    if (!response.ok) {\n      let err = new Error(response.statusText) as Error & { response?: any; body?: any };\n      err.response = response;\n      if (/text/gi.test(acceptType)) {\n        err.body = await response.text();\n      }\n\n      if (/json/gi.test(acceptType)) {\n        try {\n          err.body = await response.json();\n        } catch (error) {\n          // ignore\n        }\n      }\n\n      throw err;\n    }\n\n    if (innerOptions.resolveWithFullResponse) {\n      return response;\n    }\n\n    if (/text/gi.test(acceptType)) {\n      body = await response.text();\n      return body;\n    }\n\n    if (/json/gi.test(acceptType)) {\n      try {\n        body = await response.json();\n        return body;\n      } catch (error) {\n        // ignore\n      }\n    }\n\n    return response;\n  } as unknown as RequestInterface;\n\n  request.new = (baseUrl: string, options: RequestOptions) => Requester(baseUrl, { ...opts, ...options });\n\n  request.setOption = (key: string, value: any) => {\n    let result = opts;\n\n    let parsed = key.split(\".\");\n    let next;\n\n    while (parsed.length) {\n      next = parsed.shift() as string;\n\n      let nextIsArray = next.indexOf(\"[\") > -1;\n      if (nextIsArray) {\n        let idx = next.replace(/\\D/gi, \"\");\n        next = next.split(\"[\")[0];\n        parsed.unshift(idx);\n      }\n\n      if (parsed.length > 0 && typeof result[next] !== \"object\") {\n        result[next] = nextIsArray ? [] : {};\n      }\n\n      if (parsed.length === 0 && typeof value !== \"undefined\") {\n        result[next] = value;\n      }\n\n      result = result[next];\n    }\n\n    return result;\n  };\n\n  request.getOptions = (key?: string) => {\n    if (!key) {\n      return opts;\n    }\n\n    let result = opts;\n    let parsed = key.split(\".\");\n    let next;\n\n    while (parsed.length) {\n      next = parsed.shift() as string;\n\n      let nextIsArray = next.indexOf(\"[\") > -1;\n      if (nextIsArray) {\n        let idx = next.replace(/\\D/gi, \"\");\n        next = next.split(\"[\")[0];\n        parsed.unshift(idx);\n      }\n\n      if (parsed.length > 0 && typeof result[next] !== \"object\") {\n        return null;\n      }\n\n      if (parsed.length === 0) {\n        return result[next];\n      }\n\n      result = result[next];\n    }\n  };\n\n  opts.allowedMethods.forEach(\n    (method) => (request[method] = (url: string, data?: Record<string, any>, options?: Record<string, any>) => request(method, url, data, options))\n  );\n\n  return request;\n}\n\nexport const request = Requester();\nexport const plugin = (v: Valyrian): RequestInterface => {\n  localValyrian = v;\n  v.request = request;\n  return request;\n};\n"],"mappings":"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"}