{
  "version": 3,
  "sources": ["../../lib/request/index.ts"],
  "sourcesContent": ["import { isNodeJs } from \"valyrian.js\";\nimport { get, set } from \"valyrian.js/utils\";\n\ninterface UrlOptions {\n  base: string; // Used to prefix the url for scoped requests.\n  node: string | null; // Used to redirect local requests to node server for server side rendering.\n  api: string | null; // Used to redirect api requests to node server for server side rendering.\n}\n\ninterface RequestOptions {\n  allowedMethods?: string[];\n  urls?: UrlOptions;\n  [key: string | number | symbol]: any;\n}\n\ninterface RequestOptionsWithUrls extends RequestOptions {\n  urls: UrlOptions;\n  allowedMethods: string[];\n}\n\ninterface SendOptions extends RequestOptionsWithUrls, RequestInit {\n  allowedMethods: string[];\n  method: string;\n  headers: Record<string, string>;\n  resolveWithFullResponse?: boolean;\n}\n\nexport interface RequestInterface {\n  // eslint-disable-next-line no-unused-vars\n  (method: string, url: string, data?: Record<string, any>, options?: Partial<SendOptions>): any | Response;\n  // eslint-disable-next-line no-unused-vars\n  new: (baseUrl: string, options?: RequestOptions) => RequestInterface;\n  // eslint-disable-next-line no-unused-vars\n  setOptions: (key: string, value: any) => void;\n  // eslint-disable-next-line no-unused-vars\n  getOptions: (key?: string) => RequestOptions | void;\n  // eslint-disable-next-line no-unused-vars\n  get: (url: string, data?: Record<string, any>, options?: Record<string, any>) => any | Response;\n  // eslint-disable-next-line no-unused-vars\n  post: (url: string, data?: Record<string, any>, options?: Record<string, any>) => any | Response;\n  // eslint-disable-next-line no-unused-vars\n  put: (url: string, data?: Record<string, any>, options?: Record<string, any>) => any | Response;\n  // eslint-disable-next-line no-unused-vars\n  patch: (url: string, data?: Record<string, any>, options?: Record<string, any>) => any | Response;\n  // eslint-disable-next-line no-unused-vars\n  delete: (url: string, data?: Record<string, any>, options?: Record<string, any>) => any | Response;\n  // eslint-disable-next-line no-unused-vars\n  head: (url: string, data?: Record<string, any>, options?: Record<string, any>) => any | Response;\n  // eslint-disable-next-line no-unused-vars\n  options: (url: string, data?: Record<string, any>, options?: Record<string, any>) => any | Response;\n  [key: string | number | symbol]: any;\n}\n\n// This method is used to serialize an object into a query string.\nfunction serialize(obj: Record<string, any>, prefix: string = \"\"): URLSearchParams {\n  const params = new URLSearchParams();\n\n  Object.keys(obj).forEach((prop: string) => {\n    const key = prefix ? `${prefix}[${prop}]` : prop;\n    if (typeof obj[prop] === \"object\") {\n      params.append(key, serialize(obj[prop], key).toString());\n    } else {\n      params.append(key, obj[prop]);\n    }\n  });\n\n  return params;\n}\n\nfunction serializeFormData(data: Record<string, any>): FormData {\n  return Object.entries(data).reduce((fd, [key, value]) => {\n    fd.append(key, value);\n    return fd;\n  }, new FormData());\n}\n\nfunction parseUrl(url: string, options: RequestOptionsWithUrls) {\n  const urlWithoutSlash = url.replace(/\\/+$/, \"\").trim();\n  const u = /^https?/gi.test(urlWithoutSlash) ? urlWithoutSlash : `${options.urls.base}${urlWithoutSlash}`;\n\n  if (isNodeJs && typeof options.urls.node === \"string\") {\n    if (typeof options.urls.api === \"string\") {\n      return new URL(u.replace(options.urls.api, options.urls.node));\n    }\n\n    if (!/^https?/gi.test(u)) {\n      return new URL(u, options.urls.node);\n    }\n  }\n\n  if (/^https?/gi.test(u)) {\n    return new URL(u);\n  }\n\n  return new URL(u, options.urls.base);\n}\n\nconst defaultOptions: RequestOptions = { allowedMethods: [\"get\", \"post\", \"put\", \"patch\", \"delete\", \"head\", \"options\"] };\n\n// eslint-disable-next-line sonarjs/cognitive-complexity\nfunction Requester(baseUrl = \"\", options: RequestOptions = defaultOptions) {\n  const url = baseUrl.replace(/\\/$/gi, \"\").trim();\n  if (!options.urls) {\n    options.urls = {\n      base: \"\",\n      node: null,\n      api: null\n    };\n  }\n\n  if (!options.allowedMethods) {\n    options.allowedMethods = defaultOptions.allowedMethods;\n  }\n\n  const opts: RequestOptionsWithUrls = {\n    ...(options as RequestOptionsWithUrls),\n    urls: {\n      node: options.urls.node || null,\n      api: options.urls.api || null,\n      base: options.urls.base ? options.urls.base + url : url\n    }\n  };\n\n  // eslint-disable-next-line complexity\n  const request = async function request(\n    method: string,\n    url: string,\n    data?: Record<string, any>,\n    options: Record<string, any> = {}\n  ) {\n    const innerOptions: SendOptions = {\n      method: method.toUpperCase(),\n      headers: {},\n      resolveWithFullResponse: false,\n      ...opts,\n      ...options\n    } as SendOptions;\n\n    innerOptions.headers = { ...innerOptions.headers, ...opts.headers, ...options.headers };\n\n    if (!innerOptions.headers.Accept) {\n      innerOptions.headers.Accept = \"application/json\";\n    }\n\n    const acceptType = innerOptions.headers.Accept;\n    const contentType = innerOptions.headers[\"Content-Type\"] || innerOptions.headers[\"content-type\"] || \"\";\n\n    if (!innerOptions.allowedMethods.includes(method)) {\n      throw new Error(`Method ${method} not allowed. Allowed methods: ${innerOptions.allowedMethods.join(\", \")}`);\n    }\n\n    let finalUrl: URL;\n    try {\n      finalUrl = parseUrl(url, opts);\n    } catch (error) {\n      throw new Error(`Failed to parse URL: ${url}`);\n    }\n\n    if (data) {\n      const isJson = /json/gi.test(contentType);\n\n      if (innerOptions.method === \"GET\" && typeof data === \"object\") {\n        finalUrl.search = serialize(data).toString();\n      } else if (innerOptions.method !== \"GET\") {\n        innerOptions.body = isJson ? JSON.stringify(data) : serializeFormData(data);\n      }\n    }\n\n    const response = await fetch(finalUrl.toString(), innerOptions);\n    let body = null;\n    if (!response.ok) {\n      const err = new Error(`${response.status}: ${response.statusText}`) as Error & { response?: any; body?: any };\n      err.response = response;\n      if (/text/gi.test(acceptType)) {\n        err.body = await response.text();\n      }\n\n      if (/json/gi.test(acceptType)) {\n        try {\n          err.body = await response.json();\n        } catch (error) {\n          err.body = null;\n          // eslint-disable-next-line no-console\n          console.warn(\"Failed to parse JSON response:\", error);\n        }\n      }\n\n      throw err;\n    }\n\n    if (innerOptions.resolveWithFullResponse) {\n      return response;\n    }\n\n    if (/text/gi.test(acceptType)) {\n      body = await response.text();\n    } else if (/json/gi.test(acceptType)) {\n      try {\n        body = await response.json();\n      } catch (error) {\n        // eslint-disable-next-line no-console\n        console.warn(\"Failed to parse JSON response:\", error);\n        body = null;\n      }\n    } else if (/blob/gi.test(acceptType)) {\n      body = await response.blob();\n    } else if (/arraybuffer/gi.test(acceptType)) {\n      body = await response.arrayBuffer();\n    } else {\n      body = response;\n    }\n\n    return body || response;\n  } as unknown as RequestInterface;\n\n  request.new = (baseUrl: string, options?: RequestOptions) => Requester(baseUrl, { ...opts, ...(options || {}) });\n\n  request.setOption = (key: string, value: any) => {\n    set(opts, key, value);\n    return opts;\n  };\n\n  request.getOptions = (key?: string) => {\n    if (key) {\n      return get(opts, key);\n    }\n\n    return opts;\n  };\n\n  Object.assign(\n    request,\n    opts.allowedMethods.reduce((acc: Record<string, any>, method) => {\n      acc[method] = (url: string, data?: Record<string, any>, options?: Record<string, any>) =>\n        request(method, url, data, options);\n      return acc;\n    }, {})\n  );\n\n  return request;\n}\n\nexport const request = Requester();\n"],
  "mappings": "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",
  "names": ["request", "url", "options", "baseUrl"]
}
