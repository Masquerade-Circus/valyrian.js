{
  "version": 3,
  "sources": ["../../lib/request/index.ts"],
  "sourcesContent": ["import { isNodeJs } from \"valyrian.js\";\n\ninterface UrlOptions {\n  base: string; // Used to prefix the url for scoped requests.\n  node: string | null; // Used to redirect local requests to node server for server side rendering.\n  api: string | null; // Used to redirect api requests to node server for server side rendering.\n}\n\ninterface RequestOptions {\n  allowedMethods?: string[];\n  urls?: UrlOptions;\n  [key: string | number | symbol]: any;\n}\n\ninterface RequestOptionsWithUrls extends RequestOptions {\n  urls: UrlOptions;\n  allowedMethods: string[];\n}\n\ninterface SendOptions extends RequestOptionsWithUrls, RequestInit {\n  allowedMethods: string[];\n  method: string;\n  headers: Record<string, string>;\n  resolveWithFullResponse?: boolean;\n}\n\nexport interface RequestInterface {\n  // eslint-disable-next-line no-unused-vars\n  (method: string, url: string, data?: Record<string, any>, options?: Partial<SendOptions>): any | Response;\n  // eslint-disable-next-line no-unused-vars\n  new: (baseUrl: string, options?: RequestOptions) => RequestInterface;\n  // eslint-disable-next-line no-unused-vars\n  setOptions: (key: string, value: any) => void;\n  // eslint-disable-next-line no-unused-vars\n  getOptions: (key?: string) => RequestOptions | void;\n  // eslint-disable-next-line no-unused-vars\n  get: (url: string, data?: Record<string, any>, options?: Record<string, any>) => any | Response;\n  // eslint-disable-next-line no-unused-vars\n  post: (url: string, data?: Record<string, any>, options?: Record<string, any>) => any | Response;\n  // eslint-disable-next-line no-unused-vars\n  put: (url: string, data?: Record<string, any>, options?: Record<string, any>) => any | Response;\n  // eslint-disable-next-line no-unused-vars\n  patch: (url: string, data?: Record<string, any>, options?: Record<string, any>) => any | Response;\n  // eslint-disable-next-line no-unused-vars\n  delete: (url: string, data?: Record<string, any>, options?: Record<string, any>) => any | Response;\n  // eslint-disable-next-line no-unused-vars\n  head: (url: string, data?: Record<string, any>, options?: Record<string, any>) => any | Response;\n  // eslint-disable-next-line no-unused-vars\n  options: (url: string, data?: Record<string, any>, options?: Record<string, any>) => any | Response;\n  [key: string | number | symbol]: any;\n}\n\n// This method is used to serialize an object into a query string.\nfunction serialize(obj: Record<string, any>, prefix: string = \"\"): string {\n  return Object.keys(obj)\n    .map((prop: string) => {\n      let k = prefix ? `${prefix}[${prop}]` : prop;\n      return typeof obj[prop] === \"object\"\n        ? serialize(obj[prop], k)\n        : `${encodeURIComponent(k)}=${encodeURIComponent(obj[prop])}`;\n    })\n    .join(\"&\");\n}\n\nfunction parseUrl(url: string, options: RequestOptionsWithUrls) {\n  let u = /^https?/gi.test(url) ? url : options.urls.base + url;\n\n  let parts = u.split(\"?\");\n  u = parts[0].trim().replace(/^\\/\\//, \"/\").replace(/\\/$/, \"\").trim();\n\n  if (parts[1]) {\n    u += `?${parts[1]}`;\n  }\n\n  if (isNodeJs && typeof options.urls.node === \"string\") {\n    options.urls.node = options.urls.node;\n\n    if (typeof options.urls.api === \"string\") {\n      options.urls.api = options.urls.api.replace(/\\/$/gi, \"\").trim();\n      u = u.replace(options.urls.api, options.urls.node);\n    }\n\n    if (!/^https?/gi.test(u)) {\n      u = options.urls.node + u;\n    }\n  }\n\n  return u;\n}\n\nconst defaultOptions: RequestOptions = { allowedMethods: [\"get\", \"post\", \"put\", \"patch\", \"delete\", \"head\", \"options\"] };\n\n// eslint-disable-next-line sonarjs/cognitive-complexity\nfunction Requester(baseUrl = \"\", options: RequestOptions = defaultOptions) {\n  let url = baseUrl.replace(/\\/$/gi, \"\").trim();\n  if (!options.urls) {\n    options.urls = {\n      base: \"\",\n      node: null,\n      api: null\n    };\n  }\n\n  if (!options.allowedMethods) {\n    options.allowedMethods = defaultOptions.allowedMethods;\n  }\n\n  let opts: RequestOptionsWithUrls = {\n    ...(options as RequestOptionsWithUrls),\n    urls: {\n      node: options.urls.node || null,\n      api: options.urls.api || null,\n      base: options.urls.base ? options.urls.base + url : url\n    }\n  };\n\n  const request = async function request(method: string, url: string, data?: Record<string, any>, options = {}) {\n    let innerOptions: SendOptions = {\n      method: method.toUpperCase(),\n      headers: {},\n      resolveWithFullResponse: false,\n      ...opts,\n      ...options\n    } as SendOptions;\n\n    if (!innerOptions.headers.Accept) {\n      innerOptions.headers.Accept = \"application/json\";\n    }\n\n    let acceptType = innerOptions.headers.Accept;\n    let contentType = innerOptions.headers[\"Content-Type\"] || innerOptions.headers[\"content-type\"] || \"\";\n\n    if (innerOptions.allowedMethods.indexOf(method) === -1) {\n      throw new Error(\"Method not allowed\");\n    }\n\n    if (data) {\n      if (innerOptions.method === \"GET\" && typeof data === \"object\") {\n        url += `?${serialize(data)}`;\n      }\n\n      if (innerOptions.method !== \"GET\") {\n        if (/json/gi.test(contentType)) {\n          innerOptions.body = JSON.stringify(data);\n        } else {\n          let formData;\n          if (data instanceof FormData) {\n            formData = data;\n          } else {\n            formData = new FormData();\n            for (let i in data) {\n              formData.append(i, data[i]);\n            }\n          }\n          innerOptions.body = formData;\n        }\n      }\n    }\n\n    let response = await fetch(parseUrl(url, opts), innerOptions);\n    let body = null;\n    if (!response.ok) {\n      let err = new Error(response.statusText) as Error & { response?: any; body?: any };\n      err.response = response;\n      if (/text/gi.test(acceptType)) {\n        err.body = await response.text();\n      }\n\n      if (/json/gi.test(acceptType)) {\n        try {\n          err.body = await response.json();\n        } catch (error) {\n          // ignore\n        }\n      }\n\n      throw err;\n    }\n\n    if (innerOptions.resolveWithFullResponse) {\n      return response;\n    }\n\n    if (/text/gi.test(acceptType)) {\n      body = await response.text();\n      return body;\n    }\n\n    if (/json/gi.test(acceptType)) {\n      try {\n        body = await response.json();\n        return body;\n      } catch (error) {\n        // ignore\n      }\n    }\n\n    return response;\n  } as unknown as RequestInterface;\n\n  request.new = (baseUrl: string, options?: RequestOptions) => Requester(baseUrl, { ...opts, ...(options || {}) });\n\n  request.setOption = (key: string, value: any) => {\n    let result = opts;\n\n    let parsed = key.split(\".\");\n    let next;\n\n    while (parsed.length) {\n      next = parsed.shift() as string;\n\n      let nextIsArray = next.indexOf(\"[\") > -1;\n      if (nextIsArray) {\n        let idx = next.replace(/\\D/gi, \"\");\n        next = next.split(\"[\")[0];\n        parsed.unshift(idx);\n      }\n\n      if (parsed.length > 0 && typeof result[next] !== \"object\") {\n        result[next] = nextIsArray ? [] : {};\n      }\n\n      if (parsed.length === 0 && typeof value !== \"undefined\") {\n        result[next] = value;\n      }\n\n      result = result[next];\n    }\n\n    return result;\n  };\n\n  request.getOptions = (key?: string) => {\n    if (!key) {\n      return opts;\n    }\n\n    let result = opts;\n    let parsed = key.split(\".\");\n    let next;\n\n    while (parsed.length) {\n      next = parsed.shift() as string;\n\n      let nextIsArray = next.indexOf(\"[\") > -1;\n      if (nextIsArray) {\n        let idx = next.replace(/\\D/gi, \"\");\n        next = next.split(\"[\")[0];\n        parsed.unshift(idx);\n      }\n\n      if (parsed.length > 0 && typeof result[next] !== \"object\") {\n        return null;\n      }\n\n      if (parsed.length === 0) {\n        return result[next];\n      }\n\n      result = result[next];\n    }\n  };\n\n  opts.allowedMethods.forEach(\n    (method) =>\n      (request[method] = (url: string, data?: Record<string, any>, options?: Record<string, any>) =>\n        request(method, url, data, options))\n  );\n\n  return request;\n}\n\nexport const request = Requester();\n"],
  "mappings": "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",
  "names": ["request", "url", "options", "baseUrl"]
}
