//# sourceMappingURL=data:application/json;charset=utf-8;base64,{"version":3,"names":["router_exports","__export","Router","RouterError","mountRouter","redirect","__EXPORTS__","import_valyrian","require","getPathWithoutLastSlash","path","pathWithoutLastSlash","replace","localRedirect","RouteTree","root","segment","children","Map","isDynamic","addRoute","middlewares","segments","split","filter","Boolean","currentNode","this","startsWith","key","has","set","paramKey","slice","get","findRoute","params","wildcardMiddlewares","segmentsLength","length","i","found","child","push","allMiddlewares","Error","status","_Router","routeTree","container","query","options","url","matches","pathPrefix","errorHandlers","constructor","add","args","flatArgs","array","Array","isArray","flat","Infinity","shift","subrouter","subroute","routes","subroutePath","some","item","condition","name","includes","handlers","getAllRoutes","go","parentComponent","handleError","test","constructedPath","parts","queryParts","nameValue","value","isNaN","Number","parseQuery","finalPath","route","finalPathParts","pop","wildcardRoute","join","error","component","searchComponent","isComponent","isVnodeComponent","childComponent","v","isNodeJs","window","location","pathname","search","history","pushState","mount","getOnClickHandler","e","button","ctrlKey","metaKey","shiftKey","altKey","defaultPrevented","preventDefault","node","prefix","newPrefix","createRequest","getErrorConditionMiddlewares","code","message","request","response","middleware","err","cause","errorCauseCount","async","preventPushState","console","warn","elementContainer","router","bind","onPopStateGoToRoute","pathWithoutPrefix","document","RegExp","addEventListener","directive","vnode","setAttribute"],"sources":["../../lib/router/index.ts"],"sourcesContent":["/* eslint-disable no-console */\n/* eslint-disable no-use-before-define */\nimport {\n  Component,\n  POJOComponent,\n  VnodeComponentInterface,\n  VnodeWithDom,\n  directive,\n  isComponent,\n  isNodeJs,\n  isVnodeComponent,\n  mount,\n  setAttribute,\n  v\n} from \"valyrian.js\";\n\ninterface Request {\n  params: Record<string, any>;\n  query: Record<string, any>;\n  url: string;\n  path: string;\n  matches: string[];\n  // eslint-disable-next-line no-unused-vars\n  redirect: (path: string) => Promise<string | void>;\n}\n\ninterface Middleware {\n  // eslint-disable-next-line no-unused-vars\n  (req: Request, err?: any):\n    | Promise<any | Component | POJOComponent | VnodeComponentInterface>\n    | any\n    | Component\n    | POJOComponent\n    | VnodeComponentInterface;\n}\n\ninterface Middlewares extends Array<Middleware> {}\n\ninterface RedirectFunction {\n  // eslint-disable-next-line no-unused-vars\n  (\n    path: string,\n    parentComponent?: Component | POJOComponent | VnodeComponentInterface,\n    preventPushState?: boolean\n  ): Promise<string | void>;\n}\n\nfunction flat(array: any) {\n  return Array.isArray(array) ? array.flat(Infinity) : [array];\n}\n\nfunction getPathWithoutPrefix(path: string, prefix: string) {\n  return getPathWithoutLastSlash(path.replace(new RegExp(`^${prefix}`), \"\"));\n}\n\nfunction getPathWithoutLastSlash(path: string) {\n  let pathWithoutLastSlash = path.replace(/\\/$/, \"\");\n  if (pathWithoutLastSlash === \"\") {\n    pathWithoutLastSlash = \"/\";\n  }\n  return pathWithoutLastSlash;\n}\n\n// Parse a query string into an object\nfunction parseQuery(queryParts?: string): Record<string, any> {\n  const parts = queryParts ? queryParts.split(\"&\") : [];\n  const query: Record<string, any> = {};\n\n  for (const nameValue of parts) {\n    const [name, value] = nameValue.split(\"=\", 2);\n    query[name] =\n      isNaN(Number(value)) === false ? Number(value) : value === \"true\" ? true : value === \"false\" ? false : value;\n  }\n\n  return query;\n}\n\ninterface RouteNode {\n  segment: string;\n  children: Map<string, RouteNode>;\n  middlewares?: Middlewares;\n  paramKey?: string;\n  isDynamic: boolean;\n}\n\nclass RouteTree {\n  root: RouteNode = { segment: \"\", children: new Map(), isDynamic: false };\n\n  addRoute(path: string, middlewares: Middlewares) {\n    const segments = path === \"/\" ? [path] : path.split(\"/\").filter(Boolean); // Divide the path into segments\n    let currentNode = this.root;\n\n    for (const segment of segments) {\n      const isDynamic = segment.startsWith(\":\");\n      const key = isDynamic ? \":\" : segment; // If the segment is dynamic, use \":\" as key\n\n      if (!currentNode.children.has(key)) {\n        currentNode.children.set(key, {\n          segment: segment,\n          children: new Map(),\n          isDynamic: isDynamic,\n          paramKey: isDynamic ? segment.slice(1) : undefined\n        });\n      }\n\n      currentNode = currentNode.children.get(key)!;\n    }\n\n    currentNode.middlewares = middlewares; // Assign the middlewares to the last node\n  }\n\n  // Search for a route in the tree\n  // eslint-disable-next-line sonarjs/cognitive-complexity\n  findRoute(path: string): { middlewares?: Middlewares; params: Record<string, string> } | null {\n    const pathWithoutLastSlash = getPathWithoutLastSlash(path);\n    const segments =\n      pathWithoutLastSlash === \"/\" ? [pathWithoutLastSlash] : pathWithoutLastSlash.split(\"/\").filter(Boolean);\n    let currentNode: RouteNode | null = this.root;\n    const params: Record<string, string> = {};\n\n    const wildcardMiddlewares: Middlewares = []; // Middlewares for wildcard routes\n    const segmentsLength = segments.length;\n\n    for (let i = 0; i < segmentsLength; i++) {\n      if (!currentNode) {\n        break;\n      }\n\n      const segment = segments[i];\n\n      let found = false;\n\n      for (const [key, child] of currentNode.children) {\n        if (key === segment) {\n          currentNode = child;\n          found = true;\n          break;\n        }\n\n        if (segment !== \".*\" && key === \":\") {\n          currentNode = child;\n          params[child.paramKey!] = segment;\n          found = true;\n          break;\n        }\n\n        if (key === \".*\" && !found) {\n          wildcardMiddlewares.push(...(child.middlewares || []));\n        }\n      }\n\n      if (!found) {\n        if (currentNode.children.has(\".*\")) {\n          return { middlewares: wildcardMiddlewares, params };\n        }\n        return null;\n      }\n    }\n\n    // Add the wildcard middlewares to the current node middlewares\n    const allMiddlewares = [...wildcardMiddlewares, ...(currentNode.middlewares || [])];\n\n    // If there are no middlewares, return null\n    if (allMiddlewares.length === 0) {\n      return null;\n    }\n\n    // If there are middlewares, return them\n    return { middlewares: allMiddlewares, params };\n  }\n}\n\nexport const RouterError = class RouterError extends Error {\n  status: number | undefined = 500;\n};\n\nexport class Router {\n  private routeTree = new RouteTree();\n  container: Element | string | null = null;\n  query: Record<string, string | number> = {};\n  options: Record<string, any> = {};\n  url: string = \"\";\n  path: string = \"\";\n  params: Record<string, string | number | any> = {};\n  matches: string[] = [];\n  pathPrefix: string = \"\";\n\n  private errorHandlers: Map<number | string | Error | \"generic\", Middlewares> = new Map();\n\n  constructor(pathPrefix: string = \"\") {\n    this.pathPrefix = pathPrefix;\n  }\n\n  add(...args: (string | Middleware | Router)[]): Router {\n    const flatArgs = flat(args);\n    const path = getPathWithoutLastSlash(\n      `${this.pathPrefix}${typeof flatArgs[0] === \"string\" ? flatArgs.shift() : \"/.*\"}`\n    );\n\n    // If the first argument is a Router, add all its routes\n    if (flatArgs.length === 1 && flatArgs[0] instanceof Router) {\n      const subrouter = flatArgs[0] as Router;\n      for (const subroute of subrouter.routes()) {\n        const subroutePath = `${path}${subroute}`;\n        this.routeTree.addRoute(subroutePath, subrouter.routeTree.findRoute(subroute)!.middlewares || []);\n      }\n    } else {\n      // Verify that no middlewares are added when a subrouter is added\n      if (flatArgs.some((item) => item instanceof Router)) {\n        throw new RouterError(\"You cannot add middlewares when adding a subrouter.\");\n      }\n\n      // Verify that all middlewares are functions\n      if (flatArgs.some((item) => typeof item !== \"function\")) {\n        throw new RouterError(\"All middlewares must be functions.\");\n      }\n\n      this.routeTree.addRoute(path, flatArgs as Middlewares);\n    }\n\n    return this;\n  }\n\n  catch(...args: (number | string | Error | Middleware)[]): Router {\n    const condition =\n      typeof args[0] === \"number\" || typeof args[0] === \"string\" || args[0].name.includes(\"Error\")\n        ? (args.shift() as number | string | Error)\n        : \"generic\";\n\n    if (typeof condition !== \"number\" && typeof condition !== \"string\" && !condition.name.includes(\"Error\")) {\n      throw new RouterError(\"The condition must be a number, string or an instance of Error.\");\n    }\n\n    // Verify that all middlewares are functions\n    if (args.some((item) => typeof item !== \"function\")) {\n      throw new RouterError(\"All middlewares must be functions.\");\n    }\n\n    let handlers = this.errorHandlers.get(condition);\n    if (!handlers) {\n      handlers = [];\n      this.errorHandlers.set(condition, handlers);\n    }\n\n    handlers.push(...(args as Middlewares));\n    return this;\n  }\n\n  routes(): string[] {\n    return this.getAllRoutes(this.routeTree.root, \"\");\n  }\n\n  async go(\n    path: string,\n    parentComponent?: Component | POJOComponent | VnodeComponentInterface\n  ): Promise<string | void> {\n    if (!path) {\n      return this.handleError(new RouterError(\"The URL is empty.\"), parentComponent);\n    }\n\n    if (/%[^0-9A-Fa-f]{2}/.test(path)) {\n      return this.handleError(new RouterError(`The URL ${path} is malformed.`));\n    }\n\n    const constructedPath = getPathWithoutLastSlash(`${this.pathPrefix}${path}`);\n    const parts = constructedPath.split(\"?\", 2);\n    this.url = constructedPath;\n    this.query = parseQuery(parts[1]);\n\n    const finalPath = parts[0].replace(/(.+)\\/$/, \"$1\").split(\"#\")[0];\n    this.path = path;\n\n    let route = this.routeTree.findRoute(finalPath);\n\n    if (!route || !route.middlewares) {\n      // If the route is not found, search for a wildcard route\n      const finalPathParts = finalPath.split(\"/\"); // Divide the path into segments\n\n      while (finalPathParts.length > 0) {\n        finalPathParts.pop(); // Remove the last segment\n        const wildcardRoute = this.routeTree.findRoute(finalPathParts.join(\"/\") + \"/.*\"); // Search for a wildcard route\n        if (wildcardRoute) {\n          route = wildcardRoute;\n          break;\n        }\n      }\n\n      // If no route is found, return a 404 error\n      if (!route || !route.middlewares) {\n        const error = new RouterError(`The URL ${constructedPath} was not found in the router's registered paths.`);\n        (error as any).status = 404;\n        return this.handleError(error, parentComponent);\n      }\n    }\n\n    const { middlewares, params } = route;\n    this.params = params;\n\n    let component = await this.searchComponent(middlewares, parentComponent);\n\n    if (component === false) {\n      return;\n    }\n\n    if (!component) {\n      return this.handleError(\n        new RouterError(`The URL ${constructedPath} did not return a valid component.`),\n        parentComponent\n      );\n    }\n\n    if (isComponent(parentComponent) || isVnodeComponent(parentComponent)) {\n      const childComponent = isVnodeComponent(component) ? component : v(component as Component, {});\n      if (isVnodeComponent(parentComponent)) {\n        parentComponent.children.push(childComponent);\n        component = parentComponent;\n      } else {\n        component = v(parentComponent, {}, childComponent) as VnodeComponentInterface;\n      }\n    }\n\n    if (!isNodeJs && window.location.pathname + window.location.search !== constructedPath) {\n      window.history.pushState(null, \"\", constructedPath);\n    }\n\n    if (this.container) {\n      return mount(this.container, component);\n    }\n  }\n\n  getOnClickHandler(url: string) {\n    return (e: MouseEvent) => {\n      if (e.button !== 0 || e.ctrlKey || e.metaKey || e.shiftKey || e.altKey || e.defaultPrevented) {\n        return;\n      }\n\n      if (typeof url === \"string\" && url.length > 0) {\n        this.go(url);\n      }\n      e.preventDefault();\n    };\n  }\n\n  private getAllRoutes(node: RouteNode, prefix: string): string[] {\n    const routes: string[] = [];\n\n    for (const [key, child] of node.children) {\n      // eslint-disable-next-line sonarjs/no-nested-template-literals\n      const newPrefix = `${prefix}/${child.isDynamic ? `:${child.paramKey}` : key}`.replace(/\\/$/, \"\");\n      if (child.middlewares) {\n        routes.push(newPrefix);\n      }\n      routes.push(...this.getAllRoutes(child, newPrefix));\n    }\n\n    return routes;\n  }\n\n  private createRequest(): Request {\n    return {\n      params: this.params,\n      query: this.query,\n      url: this.url,\n      path: this.path,\n      matches: this.matches,\n      redirect: (path: string) => this.go(path)\n    };\n  }\n\n  private getErrorConditionMiddlewares(error: any): Middlewares | false {\n    // Search first for class and name errors\n    for (const [condition, middlewares] of this.errorHandlers) {\n      if (\n        typeof condition !== \"number\" &&\n        typeof condition !== \"string\" &&\n        error instanceof (condition as any) &&\n        error.name === condition.name\n      ) {\n        return middlewares;\n      }\n    }\n\n    // then for code errors\n    for (const [condition, middlewares] of this.errorHandlers) {\n      if (typeof condition === \"number\" && (error.status === condition || error.code === condition)) {\n        return middlewares;\n      }\n    }\n\n    // and then for message errors\n    for (const [condition, middlewares] of this.errorHandlers) {\n      if (typeof condition === \"string\" && (error.name === condition || error.message.includes(condition))) {\n        return middlewares;\n      }\n    }\n\n    // If no specific error handler is found, return the generic one\n    return this.errorHandlers.get(\"generic\") || false;\n  }\n\n  // eslint-disable-next-line sonarjs/cognitive-complexity\n  private async handleError(\n    error: Error,\n    parentComponent?: Component | POJOComponent | VnodeComponentInterface\n  ): Promise<void | string> {\n    const request: Request = this.createRequest();\n    let component = null;\n    const middlewares = this.getErrorConditionMiddlewares(error);\n\n    // If no error handler is found, throw the error\n    if (middlewares === false) {\n      throw error;\n    }\n\n    let response;\n    try {\n      for (const middleware of middlewares) {\n        response = await middleware(request, error);\n\n        // If the response is a component or vnode, return it for rendering\n        if (response !== undefined && (isComponent(response) || isVnodeComponent(response))) {\n          component = response;\n          break;\n        }\n\n        // If the response is false, stop the middleware chain\n        if (response === false) {\n          return;\n        }\n      }\n    } catch (err) {\n      // If an error occurs during the error handling, we handle it recursively\n      (err as Error).cause = error;\n\n      let errorCauseCount = 0;\n      while ((err as Error).cause) {\n        errorCauseCount++;\n      }\n\n      if (errorCauseCount > 20) {\n        throw new RouterError(\"Too many error causes. Possible circular error handling.\");\n      }\n\n      return this.handleError(err as Error, parentComponent);\n    }\n\n    if (component) {\n      // If there is an error middleware that returns a component, we return it\n      if (isComponent(parentComponent) || isVnodeComponent(parentComponent)) {\n        const childComponent = isVnodeComponent(component) ? component : v(component as Component, {});\n        if (isVnodeComponent(parentComponent)) {\n          parentComponent.children.push(childComponent);\n          component = parentComponent;\n        } else {\n          component = v(parentComponent, {}, childComponent) as VnodeComponentInterface;\n        }\n      }\n\n      // If we are in the browser, we update the URL\n      if (!isNodeJs && window.location.pathname + window.location.search !== this.url) {\n        window.history.pushState(null, \"\", this.url);\n      }\n\n      // If there is a container, we mount the component\n      if (this.container) {\n        return mount(this.container, component);\n      }\n    }\n\n    // If there is no component to render, we throw the error\n    throw error;\n  }\n\n  private async searchComponent(\n    middlewares: Middlewares,\n    parentComponent?: Component | POJOComponent | VnodeComponentInterface\n  ) {\n    const request: Request = this.createRequest();\n\n    let response;\n\n    for (const middleware of middlewares) {\n      try {\n        response = await middleware(request);\n      } catch (error) {\n        return this.handleError(error as Error, parentComponent);\n      }\n\n      // If the response is a component or vnode, return it for rendering\n      if (response !== undefined && (isComponent(response) || isVnodeComponent(response))) {\n        return response;\n      }\n\n      // If the response is false, stop the middleware chain\n      if (response === false) {\n        return false;\n      }\n    }\n\n    return response;\n  }\n}\n\nlet localRedirect: RedirectFunction;\n\nexport async function redirect(\n  url: string,\n  parentComponent?: Component | POJOComponent | VnodeComponentInterface,\n  preventPushState = false\n): Promise<string | void> {\n  if (!localRedirect) {\n    // eslint-disable-next-line no-console\n    console.warn(\"Redirect function is not initialized. Please mount the router first.\");\n    return;\n  }\n  return localRedirect(url, parentComponent, preventPushState);\n}\n\nexport function mountRouter(elementContainer: string | any, router: Router): void {\n  router.container = elementContainer;\n  localRedirect = router.go.bind(router);\n\n  if (!isNodeJs) {\n    function onPopStateGoToRoute(): void {\n      const pathWithoutPrefix = getPathWithoutPrefix(document.location.pathname, router.pathPrefix);\n      (router as unknown as Router).go(pathWithoutPrefix);\n    }\n    window.addEventListener(\"popstate\", onPopStateGoToRoute, false);\n    onPopStateGoToRoute();\n  }\n\n  directive(\"route\", (url: string, vnode: VnodeWithDom): void => {\n    setAttribute(\"href\", url, vnode);\n    setAttribute(\"onclick\", router.getOnClickHandler(url), vnode);\n  });\n}\n"],"mappings":"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"}