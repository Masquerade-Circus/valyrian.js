//# sourceMappingURL=data:application/json;charset=utf-8;base64,{"version":3,"names":["router_exports","__export","Router","plugin","localValyrian","__EXPORTS__","addPath","router","method","path","middlewares","length","realpath","replace","params","match","param","slice","regexpPath","array","paths","push","Array","isArray","flat","Infinity","regexp","RegExp","container","query","options","url","matches","add","args","this","use","i","k","subrouter","item","subpath","shift","routes","forEach","async","parentComponent","Error","parts","split","urlParts","queryParts","nameValue","parseQuery","key","exec","searchMiddlewares","component","response","req","redirect","go","isComponent","searchComponent","childComponent","isVnodeComponent","children","isNodeJs","window","history","pushState","isMounted","update","mount","getOnClickHandler","e","preventDefault","v","mountRouter","elementContainer","routerOrComponent","bind","onPopStateGoToRoute","document","location","pathname","addEventListener","directive","vnode","oldnode","setAttribute"],"sources":["../../lib/router/index.ts"],"sourcesContent":["/* eslint-disable no-use-before-define */\nimport { Component, Valyrian, ValyrianComponent, VnodeComponentInterface } from \"Valyrian\";\n\ninterface Path {\n  method: string;\n  path: string;\n  middlewares: Middlewares;\n  params: string[];\n  regexp: RegExp;\n}\n\ninterface Request {\n  params: Record<string, any>;\n  query: Record<string, any>;\n  url: string;\n  path: string;\n  matches: string[];\n  // eslint-disable-next-line no-unused-vars\n  redirect: (path: string, parentComponent?: Component | ValyrianComponent | VnodeComponentInterface) => false;\n}\n\ninterface Middleware {\n  // eslint-disable-next-line no-unused-vars\n  (req: Request, res?: any): Promise<any | Component | ValyrianComponent | VnodeComponentInterface>;\n}\n\ninterface Middlewares extends Array<Middleware> {}\n\ninterface RouterInterface {\n  paths: Path[];\n  container: Element | string | null;\n  query: Record<string, string | number>;\n  options: Record<string, any>;\n  url: string;\n  path: string;\n  params: Record<string, string | number | any>;\n  matches: string[];\n  // eslint-disable-next-line no-unused-vars\n  add(method: string, ...args: Middlewares): Router;\n  // eslint-disable-next-line no-unused-vars\n  use(...args: Middlewares | Router[]): Router;\n  routes(): string[];\n  // eslint-disable-next-line no-unused-vars\n  go(path: string, parentComponent?: Component | ValyrianComponent | VnodeComponentInterface): Promise<string | void>;\n}\n\nlet localValyrian: Valyrian;\n\nfunction flat(array: any) {\n  return Array.isArray(array) ? array.flat(Infinity) : [array];\n}\n\nlet addPath = (router: Router, method: string, path: string, middlewares: any[]) => {\n  if (middlewares.length === 0) {\n    return;\n  }\n\n  let realpath = path.replace(/(\\S)(\\/+)$/, \"$1\");\n\n  // Find the express like params\n  let params = realpath.match(/:(\\w+)?/gi) || [];\n\n  // Set the names of the params found\n  for (let param in params) {\n    params[param] = params[param].slice(1);\n  }\n\n  let regexpPath = \"^\" + realpath.replace(/:(\\w+)/gi, \"([^\\\\/\\\\s]+)\") + \"$\";\n\n  router.paths.push({\n    method,\n    path: realpath,\n    middlewares: flat(middlewares),\n    params,\n    regexp: new RegExp(regexpPath, \"i\")\n  });\n};\n\nfunction parseQuery(queryParts?: string) {\n  let parts = queryParts ? queryParts.split(\"&\", 20) : [];\n  let query: Record<string, any> = {};\n  let i = 0;\n  let nameValue;\n\n  for (; i < parts.length; i++) {\n    nameValue = parts[i].split(\"=\", 2);\n    query[nameValue[0]] = nameValue[1];\n  }\n\n  return query;\n}\n\nfunction searchMiddlewares(router: RouterInterface, path: string): Middlewares {\n  let i;\n  let k;\n  let item;\n  let match;\n  let key;\n  let middlewares: Middlewares = [];\n  let params: Record<string, any> = {};\n  let matches = [];\n  router.params = {};\n  router.path = \"\";\n  router.matches = [];\n\n  // Search for middlewares\n  for (i = 0; i < router.paths.length; i++) {\n    item = router.paths[i];\n\n    match = item.regexp.exec(path);\n    // If we found middlewares\n    if (Array.isArray(match)) {\n      middlewares.push(...item.middlewares);\n      match.shift();\n\n      // Parse params\n      for (k = 0; k < item.params.length; k++) {\n        key = item.params[k];\n        params[key] = match.shift();\n      }\n\n      while (match.length) {\n        matches.push(match.shift() as string);\n      }\n\n      if (item.method === \"add\") {\n        router.path = item.path;\n        break;\n      }\n    }\n  }\n\n  router.params = params;\n  router.matches = matches;\n\n  return middlewares;\n}\n\nasync function searchComponent(\n  router: RouterInterface,\n  middlewares: Middlewares\n): Promise<Component | ValyrianComponent | VnodeComponentInterface | false | void> {\n  let response;\n  let req: Request = {\n    params: router.params,\n    query: router.query,\n    url: router.url,\n    path: router.path,\n    matches: router.matches,\n    redirect: (path: string, parentComponent?: Component | ValyrianComponent | VnodeComponentInterface) => {\n      router.go(path, parentComponent);\n      return false;\n    }\n  };\n  let i = 0;\n\n  for (; i < middlewares.length; i++) {\n    response = await middlewares[i](req, response);\n\n    if (response !== undefined && localValyrian.isComponent(response)) {\n      return response;\n    }\n\n    if (response === false) {\n      return false;\n    }\n  }\n}\n\nexport class Router implements RouterInterface {\n  paths: Path[] = [];\n  container: Element | string | null = null;\n  query: Record<string, string | number> = {};\n  options: Record<string, any> = {};\n  url: string = \"\";\n  path: string = \"\";\n  params: Record<string, string | number | any> = {};\n  matches: string[] = [];\n\n  add(path: string, ...args: Middlewares): Router {\n    addPath(this, \"add\", path, args);\n    return this;\n  }\n\n  use(...args: Middlewares | Router[]): Router {\n    let path = typeof args[0] === \"string\" ? args.shift() : \"/\";\n    let i;\n    let k;\n    let subrouter;\n    let item;\n    let subpath;\n\n    for (i = 0; i < args.length; i++) {\n      subrouter = args[i];\n      if (typeof subrouter === \"function\") {\n        addPath(this, \"use\", `${path}.*`, [subrouter]);\n      } else if (subrouter.paths) {\n        for (k = 0; k < subrouter.paths.length; k++) {\n          item = subrouter.paths[k];\n          subpath = `${path}${item.path}`.replace(/^\\/\\//, \"/\");\n          addPath(this, item.method, subpath, item.middlewares);\n        }\n      }\n    }\n\n    return this;\n  }\n\n  routes() {\n    let routes: string[] = [];\n    this.paths.forEach((path) => {\n      if (path.method === \"add\") {\n        routes.push(path.path);\n      }\n    });\n    return routes;\n  }\n\n  async go(path: string, parentComponent?: Component | ValyrianComponent): Promise<string | void> {\n    if (!path) {\n      throw new Error(\"router.url.required\");\n    }\n\n    let parts = path.split(\"?\", 2);\n    let urlParts = parts[0].replace(/(.+)\\/$/, \"$1\");\n    let queryParts = parts[1];\n    this.url = path;\n    this.query = parseQuery(queryParts);\n\n    let middlewares = searchMiddlewares(this, urlParts);\n\n    let component = await searchComponent(this, middlewares);\n\n    if (component === false) {\n      return;\n    }\n\n    if (!component) {\n      throw new Error(`The url ${path} requested wasn't found`);\n    }\n\n    if (localValyrian.isComponent(parentComponent)) {\n      let childComponent = localValyrian.isVnodeComponent(component) ? component : localValyrian(component, {});\n      if (localValyrian.isVnodeComponent(parentComponent)) {\n        parentComponent.children.push(childComponent);\n        component = parentComponent;\n      } else {\n        component = localValyrian(parentComponent, {}, childComponent) as VnodeComponentInterface;\n      }\n    }\n\n    if (!localValyrian.isNodeJs) {\n      window.history.pushState(null, \"\", path);\n    }\n\n    if (localValyrian.isMounted && localValyrian.component === component) {\n      return localValyrian.update();\n    }\n\n    if (this.container) {\n      return localValyrian.mount(this.container, component);\n    }\n  }\n\n  getOnClickHandler(url: string) {\n    return (e: MouseEvent) => {\n      if (typeof url === \"string\" && url.length > 0) {\n        this.go(url);\n      }\n      e.preventDefault();\n    };\n  }\n}\n\ndeclare module \"Valyrian\" {\n  // eslint-disable-next-line no-unused-vars\n  interface Valyrian {\n    // eslint-disable-next-line no-unused-vars\n    mountRouter?(container: Element | string, router: Router): string | void;\n  }\n}\n\nexport function plugin(v: Valyrian) {\n  localValyrian = v;\n  localValyrian.mountRouter = (elementContainer, routerOrComponent) => {\n    if (routerOrComponent instanceof Router) {\n      routerOrComponent.container = elementContainer;\n      localValyrian.redirect = routerOrComponent.go.bind(routerOrComponent);\n\n      // Activate the use of the router\n      if (!localValyrian.isNodeJs) {\n        function onPopStateGoToRoute() {\n          (routerOrComponent as unknown as Router).go(document.location.pathname);\n        }\n        window.addEventListener(\"popstate\", onPopStateGoToRoute, false);\n        onPopStateGoToRoute();\n      }\n\n      localValyrian.directive(\"route\", (url, vnode, oldnode) => {\n        localValyrian.setAttribute(\"href\", url, vnode, oldnode);\n        localValyrian.setAttribute(\"onclick\", routerOrComponent.getOnClickHandler(url), vnode, oldnode);\n      });\n    }\n  };\n  return Router;\n}\n"],"mappings":"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"}