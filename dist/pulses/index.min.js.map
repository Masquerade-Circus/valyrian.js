//# sourceMappingURL=data:application/json;charset=utf-8;base64,{"version":3,"names":["index_exports","__export","createEffect","createMutableStore","createPulse","createPulseStore","__EXPORTS__","import_valyrian","require","import_utils","effectStack","registerDomSubscription","subscribers","domWithVnodesToUpdate","currentVnode","current","vnode","has","dom","hasParent","parent","parentElement","subscription","updateVnode","delete","add","createStore","initialState","pulses","immutable","Set","WeakSet","boundPulses","key","Error","getPulseMethod","localState","isMutable","currentState","pulseCallCount","proxyState","Proxy","get","state","prop","currentEffect","length","set","value","Reflect","deleteProperty","syncState","newState","deepFreeze","debounceTimeout","setState","flush","hasChanged","clearTimeout","setTimeout","forEach","subscriber","args","deepCloneUnfreeze","this","async","Promise","resolve","emptyFlush","pulseResult","apply","then","resolvedValue","catch","error","console","pulsesProxy","pulseMethod","bind","warn","effect","runEffect","push","pop","initialValue","runSubscribers","newValue"],"sources":["../../lib/pulses/index.ts"],"sourcesContent":["/* eslint-disable no-console */\nimport { updateVnode, VnodeWithDom, current, DomElement } from \"valyrian.js\";\nimport { deepCloneUnfreeze, deepFreeze, hasChanged } from \"valyrian.js/utils\";\n\ntype State = Record<string, any>;\n\nexport type Pulse<StateType, TReturn = unknown> = (state: StateType, ...args: any[]) => TReturn | Promise<TReturn>;\n\nexport type Pulses<StateType> = Record<string, Pulse<StateType, any> & { $flush?: () => Promise<void> }>;\n\ntype ProxyState<StateType> = StateType & { [key: string]: any };\n\nconst effectStack: Function[] = [];\n\ntype StorePulses<PulsesType extends Pulses<any>> = {\n  [K in keyof PulsesType]: PulsesType[K] extends (state: any, ...args: infer Args) => infer R\n    ? (...args: Args) => R\n    : never;\n};\n\n/** Función auxiliar para registrar la suscripción al nodo DOM.\n *  Retorna true si se agregó la suscripción, o false si se encontró un nodo padre ya suscrito.\n */\nfunction registerDomSubscription(subscribers: Set<Function>, domWithVnodesToUpdate: WeakSet<DomElement>): void {\n  const currentVnode = current.vnode as VnodeWithDom;\n  if (!currentVnode || domWithVnodesToUpdate.has(currentVnode.dom)) {\n    return;\n  }\n\n  let hasParent = false;\n  let parent = currentVnode.dom.parentElement as DomElement;\n  while (parent) {\n    if (domWithVnodesToUpdate.has(parent)) {\n      hasParent = true;\n      break;\n    }\n    parent = parent.parentElement as DomElement;\n  }\n\n  // Si no hay nodo padre registrado, se crea la suscripción.\n  if (!hasParent) {\n    const dom = currentVnode.dom;\n    const subscription = () => {\n      updateVnode(dom.vnode);\n      if (!dom.parentElement) {\n        subscribers.delete(subscription);\n        domWithVnodesToUpdate.delete(dom);\n      }\n    };\n    subscribers.add(subscription);\n    domWithVnodesToUpdate.add(dom);\n  }\n}\n\nfunction createStore<StateType extends State, PulsesType extends Pulses<StateType>>(\n  initialState: StateType | (() => StateType) | null,\n  pulses: PulsesType,\n  immutable = false\n): StorePulses<PulsesType> & { state: ProxyState<StateType> } {\n  const subscribers = new Set<Function>();\n  const domWithVnodesToUpdate = new WeakSet<DomElement>();\n\n  const boundPulses: Pulses<StateType> = {};\n  for (const key in pulses) {\n    if (typeof pulses[key] !== \"function\") {\n      throw new Error(`Pulse '${key}' must be a function`);\n    }\n    if (key === \"state\") {\n      throw new Error(`A pulse cannot be named 'state'`);\n    }\n    boundPulses[key] = getPulseMethod(key);\n  }\n\n  const localState: StateType =\n    (typeof initialState === \"function\" ? initialState() : initialState) || ({} as StateType);\n\n  function isMutable() {\n    if (immutable) {\n      throw new Error(\"You need to call a pulse to modify the state\");\n    }\n  }\n\n  let currentState: StateType | null = null;\n  let pulseCallCount = 0;\n\n  const proxyState = new Proxy(localState, {\n    get: (state, prop: string) => {\n      // If we are in a pulse, we return the value of the cloned state.\n      if (currentState) {\n        return currentState[prop];\n      }\n\n      const currentEffect = effectStack[effectStack.length - 1];\n      if (currentEffect && !subscribers.has(currentEffect)) {\n        subscribers.add(currentEffect);\n      }\n\n      registerDomSubscription(subscribers, domWithVnodesToUpdate);\n\n      return state[prop];\n    },\n    set: (state, prop: string, value: any) => {\n      isMutable();\n      Reflect.set(state, prop, value);\n      return true;\n    },\n    deleteProperty: (state, prop: string) => {\n      isMutable();\n      Reflect.deleteProperty(state, prop);\n      return true;\n    }\n  });\n\n  function syncState(newState: StateType) {\n    for (const key in newState) {\n      localState[key] = immutable ? deepFreeze(newState[key]) : newState[key];\n    }\n    for (const key in localState) {\n      if (!(key in newState)) {\n        Reflect.deleteProperty(localState, key);\n      }\n    }\n  }\n\n  let debounceTimeout: ReturnType<typeof setTimeout> | null = null;\n  function debouncedUpdate() {\n    if (debounceTimeout) {\n      clearTimeout(debounceTimeout);\n    }\n    debounceTimeout = setTimeout(() => subscribers.forEach((subscriber) => subscriber()), 0);\n  }\n\n  function setState(newState: StateType, flush = false) {\n    pulseCallCount--;\n    if (!hasChanged(localState, newState)) {\n      return;\n    }\n    if (pulseCallCount > 0 && !flush) {\n      return;\n    }\n    syncState(newState);\n    currentState = null;\n    debouncedUpdate();\n  }\n\n  function getPulseMethod(key: string) {\n    function pulseMethod(this: Pulse<StateType, any> & { $flush: () => Promise<void> }, ...args: any[]) {\n      pulseCallCount++;\n      if (currentState === null) {\n        currentState = deepCloneUnfreeze(localState);\n      }\n\n      const $flush = async () => {\n        setState(currentState as StateType, true);\n        currentState = deepCloneUnfreeze(localState);\n        await new Promise((resolve) => setTimeout(resolve, 0));\n      };\n\n      Reflect.set(this, \"$flush\", $flush);\n      const emptyFlush = async () => {};\n\n      try {\n        const pulseResult = pulses[key].apply(this, [currentState, ...args]);\n        if (pulseResult instanceof Promise) {\n          return pulseResult\n            .then((resolvedValue) => {\n              setState(currentState as StateType);\n              Reflect.set(this, \"$flush\", emptyFlush);\n              return resolvedValue;\n            })\n            .catch((error) => {\n              console.error(`Error in pulse '${key}':`, error);\n              Reflect.set(this, \"$flush\", emptyFlush);\n              throw error;\n            });\n        } else {\n          setState(currentState);\n          Reflect.set(this, \"$flush\", emptyFlush);\n          return pulseResult;\n        }\n      } catch (error) {\n        console.error(`Error in pulse '${key}':`, error);\n        Reflect.set(this, \"$flush\", emptyFlush);\n        throw error;\n      }\n    }\n\n    return pulseMethod;\n  }\n\n  syncState(localState);\n\n  const pulsesProxy = new Proxy(boundPulses, {\n    get: (pulses, prop: string) => {\n      if (prop === \"state\") {\n        return proxyState;\n      }\n      if (!(prop in pulses)) {\n        throw new Error(`Pulse '${prop}' does not exist`);\n      }\n      const pulseMethod = pulses[prop];\n\n      if (typeof pulseMethod === \"function\") {\n        return pulseMethod.bind(pulsesProxy);\n      }\n\n      return pulseMethod;\n    }\n  });\n\n  return pulsesProxy as StorePulses<PulsesType> & { state: ProxyState<StateType> };\n}\n\nexport function createPulseStore<StateType extends State, PulsesType extends Pulses<StateType>>(\n  initialState: StateType,\n  pulses: PulsesType\n): StorePulses<PulsesType> & { state: ProxyState<StateType> } {\n  return createStore(initialState, pulses, true);\n}\n\nexport function createMutableStore<StateType extends State, PulsesType extends Pulses<StateType>>(\n  initialState: StateType,\n  pulses: PulsesType\n): StorePulses<PulsesType> & { state: ProxyState<StateType> } {\n  console.warn(\n    \"Warning: You are working with a mutable state. This can lead to unpredictable behavior. All state changes made outside of a pulse will not trigger a re-render.\"\n  );\n  return createStore(initialState, pulses, false);\n}\n\nexport function createEffect(effect: Function) {\n  const runEffect = () => {\n    try {\n      effectStack.push(runEffect);\n      effect();\n    } finally {\n      effectStack.pop();\n    }\n  };\n  runEffect();\n}\n\nexport function createPulse<T>(initialValue: T): [() => T, (newValue: T | ((current: T) => T)) => void, () => void] {\n  let value = initialValue;\n  const subscribers = new Set<Function>();\n  const domWithVnodesToUpdate = new WeakSet<DomElement>();\n\n  const runSubscribers = () => {\n    subscribers.forEach((subscriber) => subscriber());\n  };\n\n  const read = (): T => {\n    const currentEffect = effectStack[effectStack.length - 1];\n    if (currentEffect && !subscribers.has(currentEffect)) {\n      subscribers.add(currentEffect);\n    }\n    registerDomSubscription(subscribers, domWithVnodesToUpdate);\n    return value;\n  };\n\n  const write = (newValue: T | ((current: T) => T)): void => {\n    const resolvedValue = typeof newValue === \"function\" ? (newValue as (current: T) => T)(value) : newValue;\n    if (!hasChanged(value, resolvedValue)) {\n      return;\n    }\n    value = resolvedValue;\n    runSubscribers();\n  };\n\n  return [read, write, runSubscribers];\n}\n"],"mappings":"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"}