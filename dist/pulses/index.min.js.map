//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJwdWxzZXNfZXhwb3J0cyIsIl9fZXhwb3J0IiwiY3JlYXRlRWZmZWN0IiwiY3JlYXRlTXV0YWJsZVN0b3JlIiwiY3JlYXRlUHVsc2UiLCJjcmVhdGVQdWxzZVN0b3JlIiwiX19FWFBPUlRTX18iLCJpbXBvcnRfdmFseXJpYW4iLCJyZXF1aXJlIiwiaW1wb3J0X3V0aWxzIiwiZWZmZWN0U3RhY2siLCJyZWdpc3RlckRvbVN1YnNjcmlwdGlvbiIsInN1YnNjcmliZXJzIiwiZG9tV2l0aFZub2Rlc1RvVXBkYXRlIiwiY3VycmVudFZub2RlIiwiY3VycmVudCIsInZub2RlIiwiaGFzIiwiZG9tIiwiaGFzUGFyZW50IiwicGFyZW50IiwicGFyZW50RWxlbWVudCIsInN1YnNjcmlwdGlvbiIsInVwZGF0ZVZub2RlIiwiZGVsZXRlIiwiYWRkIiwiY3JlYXRlU3RvcmUiLCJpbml0aWFsU3RhdGUiLCJwdWxzZXMiLCJpbW11dGFibGUiLCJTZXQiLCJXZWFrU2V0IiwiYm91bmRQdWxzZXMiLCJrZXkiLCJFcnJvciIsImdldFB1bHNlTWV0aG9kIiwibG9jYWxTdGF0ZSIsImlzTXV0YWJsZSIsImN1cnJlbnRTdGF0ZSIsInB1bHNlQ2FsbENvdW50IiwicHJveHlTdGF0ZSIsIlByb3h5IiwiZ2V0Iiwic3RhdGUiLCJwcm9wIiwiY3VycmVudEVmZmVjdCIsImxlbmd0aCIsInNldCIsInZhbHVlIiwiUmVmbGVjdCIsImRlbGV0ZVByb3BlcnR5Iiwic3luY1N0YXRlIiwibmV3U3RhdGUiLCJkZWVwRnJlZXplIiwiZGVib3VuY2VUaW1lb3V0Iiwic2V0U3RhdGUiLCJoYXNDaGFuZ2VkIiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsImZvckVhY2giLCJzdWJzY3JpYmVyIiwiYXJncyIsImRlZXBDbG9uZVVuZnJlZXplIiwicHVsc2VSZXN1bHQiLCJQcm9taXNlIiwidGhlbiIsInJlc29sdmVkVmFsdWUiLCJjYXRjaCIsImVycm9yIiwiY29uc29sZSIsIndhcm4iLCJlZmZlY3QiLCJydW5FZmZlY3QiLCJwdXNoIiwicG9wIiwiaW5pdGlhbFZhbHVlIiwicnVuU3Vic2NyaWJlcnMiLCJuZXdWYWx1ZSJdLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9wdWxzZXMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuaW1wb3J0IHsgdXBkYXRlVm5vZGUsIFZub2RlV2l0aERvbSwgY3VycmVudCwgRG9tRWxlbWVudCB9IGZyb20gXCJ2YWx5cmlhbi5qc1wiO1xuaW1wb3J0IHsgZGVlcENsb25lVW5mcmVlemUsIGRlZXBGcmVlemUsIGhhc0NoYW5nZWQgfSBmcm9tIFwidmFseXJpYW4uanMvdXRpbHNcIjtcblxudHlwZSBTdGF0ZSA9IFJlY29yZDxzdHJpbmcsIGFueT47XG5cbmV4cG9ydCB0eXBlIFB1bHNlPFN0YXRlVHlwZSwgVFJldHVybiA9IHVua25vd24+ID0gKHN0YXRlOiBTdGF0ZVR5cGUsIC4uLmFyZ3M6IGFueVtdKSA9PiBUUmV0dXJuIHwgUHJvbWlzZTxUUmV0dXJuPjtcblxuZXhwb3J0IHR5cGUgUHVsc2VzPFN0YXRlVHlwZT4gPSBSZWNvcmQ8c3RyaW5nLCBQdWxzZTxTdGF0ZVR5cGUsIGFueT4+O1xuXG50eXBlIFByb3h5U3RhdGU8U3RhdGVUeXBlPiA9IFN0YXRlVHlwZSAmIHsgW2tleTogc3RyaW5nXTogYW55IH07XG5cbmNvbnN0IGVmZmVjdFN0YWNrOiBGdW5jdGlvbltdID0gW107XG5cbnR5cGUgU3RvcmVQdWxzZXM8UHVsc2VzVHlwZSBleHRlbmRzIFB1bHNlczxhbnk+PiA9IHtcbiAgW0sgaW4ga2V5b2YgUHVsc2VzVHlwZV06IFB1bHNlc1R5cGVbS10gZXh0ZW5kcyAoc3RhdGU6IGFueSwgLi4uYXJnczogaW5mZXIgQXJncykgPT4gaW5mZXIgUlxuICAgID8gKC4uLmFyZ3M6IEFyZ3MpID0+IFJcbiAgICA6IG5ldmVyO1xufTtcblxuLyoqIEZ1bmNpw7NuIGF1eGlsaWFyIHBhcmEgcmVnaXN0cmFyIGxhIHN1c2NyaXBjacOzbiBhbCBub2RvIERPTS5cbiAqICBSZXRvcm5hIHRydWUgc2kgc2UgYWdyZWfDsyBsYSBzdXNjcmlwY2nDs24sIG8gZmFsc2Ugc2kgc2UgZW5jb250csOzIHVuIG5vZG8gcGFkcmUgeWEgc3VzY3JpdG8uXG4gKi9cbmZ1bmN0aW9uIHJlZ2lzdGVyRG9tU3Vic2NyaXB0aW9uKHN1YnNjcmliZXJzOiBTZXQ8RnVuY3Rpb24+LCBkb21XaXRoVm5vZGVzVG9VcGRhdGU6IFdlYWtTZXQ8RG9tRWxlbWVudD4pOiB2b2lkIHtcbiAgY29uc3QgY3VycmVudFZub2RlID0gY3VycmVudC52bm9kZSBhcyBWbm9kZVdpdGhEb207XG4gIGlmICghY3VycmVudFZub2RlIHx8IGRvbVdpdGhWbm9kZXNUb1VwZGF0ZS5oYXMoY3VycmVudFZub2RlLmRvbSkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgaGFzUGFyZW50ID0gZmFsc2U7XG4gIGxldCBwYXJlbnQgPSBjdXJyZW50Vm5vZGUuZG9tLnBhcmVudEVsZW1lbnQgYXMgRG9tRWxlbWVudDtcbiAgd2hpbGUgKHBhcmVudCkge1xuICAgIGlmIChkb21XaXRoVm5vZGVzVG9VcGRhdGUuaGFzKHBhcmVudCkpIHtcbiAgICAgIGhhc1BhcmVudCA9IHRydWU7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgcGFyZW50ID0gcGFyZW50LnBhcmVudEVsZW1lbnQgYXMgRG9tRWxlbWVudDtcbiAgfVxuXG4gIC8vIFNpIG5vIGhheSBub2RvIHBhZHJlIHJlZ2lzdHJhZG8sIHNlIGNyZWEgbGEgc3VzY3JpcGNpw7NuLlxuICBpZiAoIWhhc1BhcmVudCkge1xuICAgIGNvbnN0IGRvbSA9IGN1cnJlbnRWbm9kZS5kb207XG4gICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gKCkgPT4ge1xuICAgICAgdXBkYXRlVm5vZGUoZG9tLnZub2RlKTtcbiAgICAgIGlmICghZG9tLnBhcmVudEVsZW1lbnQpIHtcbiAgICAgICAgc3Vic2NyaWJlcnMuZGVsZXRlKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIGRvbVdpdGhWbm9kZXNUb1VwZGF0ZS5kZWxldGUoZG9tKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHN1YnNjcmliZXJzLmFkZChzdWJzY3JpcHRpb24pO1xuICAgIGRvbVdpdGhWbm9kZXNUb1VwZGF0ZS5hZGQoZG9tKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTdG9yZTxTdGF0ZVR5cGUgZXh0ZW5kcyBTdGF0ZSwgUHVsc2VzVHlwZSBleHRlbmRzIFB1bHNlczxTdGF0ZVR5cGU+PihcbiAgaW5pdGlhbFN0YXRlOiBTdGF0ZVR5cGUgfCAoKCkgPT4gU3RhdGVUeXBlKSB8IG51bGwsXG4gIHB1bHNlczogUHVsc2VzVHlwZSxcbiAgaW1tdXRhYmxlID0gZmFsc2Vcbik6IFN0b3JlUHVsc2VzPFB1bHNlc1R5cGU+ICYgeyBzdGF0ZTogUHJveHlTdGF0ZTxTdGF0ZVR5cGU+IH0ge1xuICBjb25zdCBzdWJzY3JpYmVycyA9IG5ldyBTZXQ8RnVuY3Rpb24+KCk7XG4gIGNvbnN0IGRvbVdpdGhWbm9kZXNUb1VwZGF0ZSA9IG5ldyBXZWFrU2V0PERvbUVsZW1lbnQ+KCk7XG5cbiAgY29uc3QgYm91bmRQdWxzZXM6IFJlY29yZDxzdHJpbmcsIFB1bHNlPFN0YXRlVHlwZSwgYW55Pj4gPSB7fTtcbiAgZm9yIChjb25zdCBrZXkgaW4gcHVsc2VzKSB7XG4gICAgaWYgKHR5cGVvZiBwdWxzZXNba2V5XSAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFB1bHNlICcke2tleX0nIG11c3QgYmUgYSBmdW5jdGlvbmApO1xuICAgIH1cbiAgICBpZiAoa2V5ID09PSBcInN0YXRlXCIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQSBwdWxzZSBjYW5ub3QgYmUgbmFtZWQgJ3N0YXRlJ2ApO1xuICAgIH1cbiAgICBib3VuZFB1bHNlc1trZXldID0gZ2V0UHVsc2VNZXRob2Qoa2V5KTtcbiAgfVxuXG4gIGNvbnN0IGxvY2FsU3RhdGU6IFN0YXRlVHlwZSA9XG4gICAgKHR5cGVvZiBpbml0aWFsU3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IGluaXRpYWxTdGF0ZSgpIDogaW5pdGlhbFN0YXRlKSB8fCAoe30gYXMgU3RhdGVUeXBlKTtcblxuICBmdW5jdGlvbiBpc011dGFibGUoKSB7XG4gICAgaWYgKGltbXV0YWJsZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IG5lZWQgdG8gY2FsbCBhIHB1bHNlIHRvIG1vZGlmeSB0aGUgc3RhdGVcIik7XG4gICAgfVxuICB9XG5cbiAgbGV0IGN1cnJlbnRTdGF0ZTogU3RhdGVUeXBlIHwgbnVsbCA9IG51bGw7XG4gIGxldCBwdWxzZUNhbGxDb3VudCA9IDA7XG5cbiAgY29uc3QgcHJveHlTdGF0ZSA9IG5ldyBQcm94eShsb2NhbFN0YXRlLCB7XG4gICAgZ2V0OiAoc3RhdGUsIHByb3A6IHN0cmluZykgPT4ge1xuICAgICAgLy8gSWYgd2UgYXJlIGluIGEgcHVsc2UsIHdlIHJldHVybiB0aGUgdmFsdWUgb2YgdGhlIGNsb25lZCBzdGF0ZS5cbiAgICAgIGlmIChjdXJyZW50U3RhdGUpIHtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRTdGF0ZVtwcm9wXTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgY3VycmVudEVmZmVjdCA9IGVmZmVjdFN0YWNrW2VmZmVjdFN0YWNrLmxlbmd0aCAtIDFdO1xuICAgICAgaWYgKGN1cnJlbnRFZmZlY3QgJiYgIXN1YnNjcmliZXJzLmhhcyhjdXJyZW50RWZmZWN0KSkge1xuICAgICAgICBzdWJzY3JpYmVycy5hZGQoY3VycmVudEVmZmVjdCk7XG4gICAgICB9XG5cbiAgICAgIHJlZ2lzdGVyRG9tU3Vic2NyaXB0aW9uKHN1YnNjcmliZXJzLCBkb21XaXRoVm5vZGVzVG9VcGRhdGUpO1xuXG4gICAgICByZXR1cm4gc3RhdGVbcHJvcF07XG4gICAgfSxcbiAgICBzZXQ6IChzdGF0ZSwgcHJvcDogc3RyaW5nLCB2YWx1ZTogYW55KSA9PiB7XG4gICAgICBpc011dGFibGUoKTtcbiAgICAgIFJlZmxlY3Quc2V0KHN0YXRlLCBwcm9wLCB2YWx1ZSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuICAgIGRlbGV0ZVByb3BlcnR5OiAoc3RhdGUsIHByb3A6IHN0cmluZykgPT4ge1xuICAgICAgaXNNdXRhYmxlKCk7XG4gICAgICBSZWZsZWN0LmRlbGV0ZVByb3BlcnR5KHN0YXRlLCBwcm9wKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG5cbiAgZnVuY3Rpb24gc3luY1N0YXRlKG5ld1N0YXRlOiBTdGF0ZVR5cGUpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBuZXdTdGF0ZSkge1xuICAgICAgbG9jYWxTdGF0ZVtrZXldID0gaW1tdXRhYmxlID8gZGVlcEZyZWV6ZShuZXdTdGF0ZVtrZXldKSA6IG5ld1N0YXRlW2tleV07XG4gICAgfVxuICAgIGZvciAoY29uc3Qga2V5IGluIGxvY2FsU3RhdGUpIHtcbiAgICAgIGlmICghKGtleSBpbiBuZXdTdGF0ZSkpIHtcbiAgICAgICAgUmVmbGVjdC5kZWxldGVQcm9wZXJ0eShsb2NhbFN0YXRlLCBrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGxldCBkZWJvdW5jZVRpbWVvdXQ6IFJldHVyblR5cGU8dHlwZW9mIHNldFRpbWVvdXQ+IHwgbnVsbCA9IG51bGw7XG4gIGZ1bmN0aW9uIGRlYm91bmNlZFVwZGF0ZSgpIHtcbiAgICBpZiAoZGVib3VuY2VUaW1lb3V0KSB7XG4gICAgICBjbGVhclRpbWVvdXQoZGVib3VuY2VUaW1lb3V0KTtcbiAgICB9XG4gICAgZGVib3VuY2VUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiBzdWJzY3JpYmVycy5mb3JFYWNoKChzdWJzY3JpYmVyKSA9PiBzdWJzY3JpYmVyKCkpLCAwKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldFN0YXRlKG5ld1N0YXRlOiBTdGF0ZVR5cGUpIHtcbiAgICBwdWxzZUNhbGxDb3VudC0tO1xuICAgIGlmICghaGFzQ2hhbmdlZChsb2NhbFN0YXRlLCBuZXdTdGF0ZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHB1bHNlQ2FsbENvdW50ID4gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzeW5jU3RhdGUobmV3U3RhdGUpO1xuICAgIGN1cnJlbnRTdGF0ZSA9IG51bGw7XG4gICAgZGVib3VuY2VkVXBkYXRlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRQdWxzZU1ldGhvZChrZXk6IHN0cmluZykge1xuICAgIHJldHVybiAoLi4uYXJnczogYW55W10pID0+IHtcbiAgICAgIHB1bHNlQ2FsbENvdW50Kys7XG4gICAgICBpZiAoY3VycmVudFN0YXRlID09PSBudWxsKSB7XG4gICAgICAgIGN1cnJlbnRTdGF0ZSA9IGRlZXBDbG9uZVVuZnJlZXplKGxvY2FsU3RhdGUpO1xuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcHVsc2VSZXN1bHQgPSBwdWxzZXNba2V5XShjdXJyZW50U3RhdGUsIC4uLmFyZ3MpO1xuICAgICAgICBpZiAocHVsc2VSZXN1bHQgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgcmV0dXJuIHB1bHNlUmVzdWx0XG4gICAgICAgICAgICAudGhlbigocmVzb2x2ZWRWYWx1ZSkgPT4ge1xuICAgICAgICAgICAgICBzZXRTdGF0ZShjdXJyZW50U3RhdGUgYXMgU3RhdGVUeXBlKTtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVkVmFsdWU7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBFcnJvciBpbiBwdWxzZSAnJHtrZXl9JzpgLCBlcnJvcik7XG4gICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2V0U3RhdGUoY3VycmVudFN0YXRlKTtcbiAgICAgICAgICByZXR1cm4gcHVsc2VSZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIGluIHB1bHNlICcke2tleX0nOmAsIGVycm9yKTtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIHN5bmNTdGF0ZShsb2NhbFN0YXRlKTtcblxuICBjb25zdCBwdWxzZXNQcm94eSA9IG5ldyBQcm94eShib3VuZFB1bHNlcywge1xuICAgIGdldDogKHB1bHNlcywgcHJvcDogc3RyaW5nKSA9PiB7XG4gICAgICBpZiAocHJvcCA9PT0gXCJzdGF0ZVwiKSB7XG4gICAgICAgIHJldHVybiBwcm94eVN0YXRlO1xuICAgICAgfVxuICAgICAgaWYgKCEocHJvcCBpbiBwdWxzZXMpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgUHVsc2UgJyR7cHJvcH0nIGRvZXMgbm90IGV4aXN0YCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcHVsc2VzW3Byb3BdO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHB1bHNlc1Byb3h5IGFzIFN0b3JlUHVsc2VzPFB1bHNlc1R5cGU+ICYgeyBzdGF0ZTogUHJveHlTdGF0ZTxTdGF0ZVR5cGU+IH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQdWxzZVN0b3JlPFN0YXRlVHlwZSBleHRlbmRzIFN0YXRlLCBQdWxzZXNUeXBlIGV4dGVuZHMgUHVsc2VzPFN0YXRlVHlwZT4+KFxuICBpbml0aWFsU3RhdGU6IFN0YXRlVHlwZSxcbiAgcHVsc2VzOiBQdWxzZXNUeXBlXG4pOiBTdG9yZVB1bHNlczxQdWxzZXNUeXBlPiAmIHsgc3RhdGU6IFByb3h5U3RhdGU8U3RhdGVUeXBlPiB9IHtcbiAgcmV0dXJuIGNyZWF0ZVN0b3JlKGluaXRpYWxTdGF0ZSwgcHVsc2VzLCB0cnVlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU11dGFibGVTdG9yZTxTdGF0ZVR5cGUgZXh0ZW5kcyBTdGF0ZSwgUHVsc2VzVHlwZSBleHRlbmRzIFB1bHNlczxTdGF0ZVR5cGU+PihcbiAgaW5pdGlhbFN0YXRlOiBTdGF0ZVR5cGUsXG4gIHB1bHNlczogUHVsc2VzVHlwZVxuKTogU3RvcmVQdWxzZXM8UHVsc2VzVHlwZT4gJiB7IHN0YXRlOiBQcm94eVN0YXRlPFN0YXRlVHlwZT4gfSB7XG4gIGNvbnNvbGUud2FybihcbiAgICBcIldhcm5pbmc6IFlvdSBhcmUgd29ya2luZyB3aXRoIGEgbXV0YWJsZSBzdGF0ZS4gVGhpcyBjYW4gbGVhZCB0byB1bnByZWRpY3RhYmxlIGJlaGF2aW9yLiBBbGwgc3RhdGUgY2hhbmdlcyBtYWRlIG91dHNpZGUgb2YgYSBwdWxzZSB3aWxsIG5vdCB0cmlnZ2VyIGEgcmUtcmVuZGVyLlwiXG4gICk7XG4gIHJldHVybiBjcmVhdGVTdG9yZShpbml0aWFsU3RhdGUsIHB1bHNlcywgZmFsc2UpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRWZmZWN0KGVmZmVjdDogRnVuY3Rpb24pIHtcbiAgY29uc3QgcnVuRWZmZWN0ID0gKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBlZmZlY3RTdGFjay5wdXNoKHJ1bkVmZmVjdCk7XG4gICAgICBlZmZlY3QoKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgZWZmZWN0U3RhY2sucG9wKCk7XG4gICAgfVxuICB9O1xuICBydW5FZmZlY3QoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVB1bHNlPFQ+KGluaXRpYWxWYWx1ZTogVCk6IFsoKSA9PiBULCAobmV3VmFsdWU6IFQgfCAoKGN1cnJlbnQ6IFQpID0+IFQpKSA9PiB2b2lkLCAoKSA9PiB2b2lkXSB7XG4gIGxldCB2YWx1ZSA9IGluaXRpYWxWYWx1ZTtcbiAgY29uc3Qgc3Vic2NyaWJlcnMgPSBuZXcgU2V0PEZ1bmN0aW9uPigpO1xuICBjb25zdCBkb21XaXRoVm5vZGVzVG9VcGRhdGUgPSBuZXcgV2Vha1NldDxEb21FbGVtZW50PigpO1xuXG4gIGNvbnN0IHJ1blN1YnNjcmliZXJzID0gKCkgPT4ge1xuICAgIHN1YnNjcmliZXJzLmZvckVhY2goKHN1YnNjcmliZXIpID0+IHN1YnNjcmliZXIoKSk7XG4gIH07XG5cbiAgY29uc3QgcmVhZCA9ICgpOiBUID0+IHtcbiAgICBjb25zdCBjdXJyZW50RWZmZWN0ID0gZWZmZWN0U3RhY2tbZWZmZWN0U3RhY2subGVuZ3RoIC0gMV07XG4gICAgaWYgKGN1cnJlbnRFZmZlY3QgJiYgIXN1YnNjcmliZXJzLmhhcyhjdXJyZW50RWZmZWN0KSkge1xuICAgICAgc3Vic2NyaWJlcnMuYWRkKGN1cnJlbnRFZmZlY3QpO1xuICAgIH1cbiAgICByZWdpc3RlckRvbVN1YnNjcmlwdGlvbihzdWJzY3JpYmVycywgZG9tV2l0aFZub2Rlc1RvVXBkYXRlKTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG5cbiAgY29uc3Qgd3JpdGUgPSAobmV3VmFsdWU6IFQgfCAoKGN1cnJlbnQ6IFQpID0+IFQpKTogdm9pZCA9PiB7XG4gICAgY29uc3QgcmVzb2x2ZWRWYWx1ZSA9IHR5cGVvZiBuZXdWYWx1ZSA9PT0gXCJmdW5jdGlvblwiID8gKG5ld1ZhbHVlIGFzIChjdXJyZW50OiBUKSA9PiBUKSh2YWx1ZSkgOiBuZXdWYWx1ZTtcbiAgICBpZiAoIWhhc0NoYW5nZWQodmFsdWUsIHJlc29sdmVkVmFsdWUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhbHVlID0gcmVzb2x2ZWRWYWx1ZTtcbiAgICBydW5TdWJzY3JpYmVycygpO1xuICB9O1xuXG4gIHJldHVybiBbcmVhZCwgd3JpdGUsIHJ1blN1YnNjcmliZXJzXTtcbn1cbiJdLCJtYXBwaW5ncyI6ImdKQUFBQSxFQUFBLEcseURBQUFDLENBQUFELEVBQUEsQ0FBQUUsYUFBQSxJQUFBQSxFQUFBQyxtQkFBQSxJQUFBQSxFQUFBQyxZQUFBLElBQUFBLEVBQUFDLGlCQUFBLElBQUFBLElBQUEsSSxFQUFBQyxHLEVBQUFOLEUsME1BQ0FPLEVBQStEQyxRQUFBLGVBQy9EQyxFQUEwREQsUUFBQSxxQkFVcERFLEVBQTBCLEdB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