{
  "version": 3,
  "sources": ["../../lib/utils/getter-setter.ts", "../../lib/utils/has-changed.ts", "../../lib/utils/deep-freeze.ts"],
  "sourcesContent": ["// Dot notation: get(obj, 'a.b.c' ) === obj.a.b.c\n// get(obj, 'a.0.c') === obj.a[0].c\nexport function get(obj: unknown, path: string, defaultValue?: unknown) {\n  if (!path || typeof path !== \"string\" || !obj || typeof obj !== \"object\") {\n    return defaultValue;\n  }\n\n  const result = path.split(\".\").reduce((acc: any, part) => acc && acc?.[part], obj);\n\n  if (typeof result === \"undefined\") {\n    return defaultValue || null;\n  }\n\n  return result;\n}\n\n// Dot notation: set(obj, 'a.b.c', value) === obj.a.b.c = value\n// set(obj, 'a.0.c', value) === obj.a[0].c = value\nexport function set(obj: any, path: string, value: any) {\n  if (!path || typeof path !== \"string\" || !obj || typeof obj !== \"object\") {\n    return;\n  }\n\n  const parts = path.split(\".\");\n  const last = parts.pop();\n\n  if (!last) {\n    return;\n  }\n\n  let target = obj;\n  for (const part of parts) {\n    if (!target[part]) {\n      target[part] = {};\n    }\n    target = target[part];\n  }\n\n  target[last] = value;\n}\n", "// Utility function to check if dependencies have changed recursively\nexport function hasChanged(prev: any, current: any) {\n  if (Array.isArray(prev)) {\n    if (Array.isArray(current) === false) {\n      return true;\n    }\n\n    if (prev.length !== current.length) {\n      return true;\n    }\n\n    for (let i = 0; i < current.length; i++) {\n      if (hasChanged(prev[i], current[i])) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  if (typeof prev === \"object\" && prev !== null) {\n    if (typeof current !== \"object\" || current === null) {\n      return true;\n    }\n\n    for (const key in current) {\n      if (hasChanged(prev[key], current[key])) {\n        return true;\n      }\n    }\n\n    for (const key in prev) {\n      if (hasChanged(prev[key], current[key])) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  return Object.is(prev, current) === false;\n}\n", "export function deepFreeze(obj: any): any {\n  if (typeof obj === \"object\" && obj !== null && !Object.isFrozen(obj)) {\n    if (Array.isArray(obj)) {\n      for (let i = 0, l = obj.length; i < l; i++) {\n        deepFreeze(obj[i]);\n      }\n    } else {\n      const props = Reflect.ownKeys(obj);\n      for (let i = 0, l = props.length; i < l; i++) {\n        deepFreeze(obj[props[i]]);\n      }\n\n      // If the object is an instance of a class (not a plain object or array) we need to freeze the prototype\n      const proto = Object.getPrototypeOf(obj);\n      if (proto && proto !== Object.prototype) {\n        deepFreeze(proto);\n      }\n    }\n    Object.freeze(obj);\n  }\n\n  return obj;\n}\n\nexport function deepCloneUnfreeze<T>(obj: T): T {\n  if (typeof obj === \"undefined\" || obj === null || typeof obj !== \"object\") {\n    return obj;\n  }\n\n  // If the object is an instance of a class (not a plain object or array) we need to clone it\n  // This could not work with classes that have required parameters in the constructor\n  if (obj.constructor && obj.constructor !== Object && obj.constructor !== Array) {\n    const clone = Reflect.construct(obj.constructor, []);\n\n    for (const key of Reflect.ownKeys(obj)) {\n      const value = (obj as Record<string | symbol, any>)[key];\n      (clone as Record<string | symbol, any>)[key] = deepCloneUnfreeze(value);\n    }\n\n    return clone;\n  }\n\n  if (Array.isArray(obj)) {\n    return obj.map((item) => deepCloneUnfreeze(item)) as unknown as T;\n  }\n\n  const clone = {} as T;\n  for (const key of Reflect.ownKeys(obj)) {\n    const value = (obj as Record<string | symbol, any>)[key];\n    (clone as Record<string | symbol, any>)[key] = deepCloneUnfreeze(value);\n  }\n\n  return clone;\n}\n"],
  "mappings": "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",
  "names": ["clone"]
}
