{
  "version": 3,
  "sources": ["../../lib/utils/index.ts", "../../lib/utils/getter-setter.ts", "../../lib/utils/has-changed.ts", "../../lib/utils/deep-freeze.ts"],
  "sourcesContent": ["export * from \"./getter-setter\";\nexport * from \"./has-changed\";\nexport * from \"./deep-freeze\";\n", "// Dot notation: get(obj, 'a.b.c' ) === obj.a.b.c\n// get(obj, 'a.0.c') === obj.a[0].c\nexport function get(obj: unknown, path: string, defaultValue?: unknown) {\n  if (!path || typeof path !== \"string\" || !obj || typeof obj !== \"object\") {\n    return defaultValue;\n  }\n\n  const result = path.split(\".\").reduce((acc: any, part) => acc && acc?.[part], obj);\n\n  if (typeof result === \"undefined\") {\n    return defaultValue || null;\n  }\n\n  return result;\n}\n\n// Dot notation: set(obj, 'a.b.c', value) === obj.a.b.c = value\n// set(obj, 'a.0.c', value) === obj.a[0].c = value\nexport function set(obj: any, path: string, value: any) {\n  if (!path || typeof path !== \"string\" || !obj || typeof obj !== \"object\") {\n    return;\n  }\n\n  const parts = path.split(\".\");\n  const last = parts.pop();\n\n  if (!last) {\n    return;\n  }\n\n  let target = obj;\n  for (const part of parts) {\n    if (!target[part]) {\n      target[part] = {};\n    }\n    target = target[part];\n  }\n\n  target[last] = value;\n}\n", "// Utility function to check if dependencies have changed recursively\n// eslint-disable-next-line sonarjs/cognitive-complexity\nexport function hasChanged(prev: any, current: any) {\n  if (Array.isArray(prev)) {\n    if (Array.isArray(current) === false) {\n      return true;\n    }\n\n    if (prev.length !== current.length) {\n      return true;\n    }\n\n    for (let i = 0; i < current.length; i++) {\n      if (hasChanged(prev[i], current[i])) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  if (typeof prev === \"object\" && prev !== null) {\n    if (typeof current !== \"object\" || current === null) {\n      return true;\n    }\n\n    for (const key in current) {\n      if (hasChanged(prev[key], current[key])) {\n        return true;\n      }\n    }\n\n    for (const key in prev) {\n      if (hasChanged(prev[key], current[key])) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  return Object.is(prev, current) === false;\n}\n", "export function deepFreeze(obj: any, freezeClassInstances: boolean = false): any {\n  if (typeof obj === \"object\" && obj !== null && !Object.isFrozen(obj)) {\n    if (Array.isArray(obj)) {\n      for (let i = 0, l = obj.length; i < l; i++) {\n        deepFreeze(obj[i]);\n      }\n    } else {\n      const props = Reflect.ownKeys(obj);\n      for (let i = 0, l = props.length; i < l; i++) {\n        deepFreeze(obj[props[i]]);\n      }\n\n      // If the object is an instance of a class (not a plain object or array) we need to freeze the prototype\n      if (freezeClassInstances) {\n        const proto = Object.getPrototypeOf(obj);\n        if (proto && proto !== Object.prototype) {\n          deepFreeze(proto);\n        }\n      }\n    }\n    Object.freeze(obj);\n  }\n\n  return obj;\n}\n\nexport function deepCloneUnfreeze<T>(obj: T, cloneClassInstances = false, seen = new WeakMap()): T {\n  if (typeof obj === \"undefined\" || obj === null || typeof obj !== \"object\") {\n    return obj;\n  }\n\n  if (seen.has(obj)) {\n    return seen.get(obj);\n  }\n\n  let clone: any;\n  let cloned = false;\n\n  switch (true) {\n    case Array.isArray(obj): {\n      clone = [];\n      for (let i = 0, l = obj.length; i < l; i++) {\n        clone[i] = deepCloneUnfreeze(obj[i], cloneClassInstances, seen);\n      }\n      cloned = true;\n      break;\n    }\n    case obj instanceof Date: {\n      clone = new Date(obj.getTime());\n      cloned = true;\n      break;\n    }\n    case obj instanceof RegExp: {\n      clone = new RegExp(obj.source, obj.flags);\n      cloned = true;\n      break;\n    }\n    case obj instanceof Map: {\n      clone = new Map();\n      for (const [key, value] of obj.entries()) {\n        clone.set(\n          deepCloneUnfreeze(key, cloneClassInstances, seen),\n          deepCloneUnfreeze(value, cloneClassInstances, seen)\n        );\n      }\n      cloned = true;\n      break;\n    }\n    case obj instanceof Set: {\n      clone = new Set();\n      for (const value of obj.values()) {\n        clone.add(deepCloneUnfreeze(value, cloneClassInstances, seen));\n      }\n      cloned = true;\n      break;\n    }\n    case obj instanceof ArrayBuffer: {\n      clone = obj.slice(0);\n      cloned = true;\n      break;\n    }\n    // TypedArrays and DataView\n    case ArrayBuffer.isView(obj): {\n      clone = new (obj as any).constructor(obj.buffer.slice(0));\n      cloned = true;\n      break;\n    }\n    // Node.js Buffer\n    case typeof Buffer !== \"undefined\" && obj instanceof Buffer: {\n      clone = Buffer.from(obj);\n      cloned = true;\n      break;\n    }\n    case obj instanceof Error: {\n      clone = new (obj as any).constructor(obj.message);\n      break;\n    }\n    // Non clonable objects\n    case obj instanceof Promise ||\n      obj instanceof WeakMap ||\n      obj instanceof WeakSet ||\n      typeof obj === \"function\" ||\n      typeof obj === \"symbol\": {\n      clone = obj;\n      cloned = true;\n      break;\n    }\n    // Instance of a class\n    case obj.constructor && obj.constructor !== Object: {\n      if (!cloneClassInstances) {\n        clone = obj;\n        cloned = true;\n        break;\n      }\n      clone = Object.create(Object.getPrototypeOf(obj));\n      break;\n    }\n\n    // Plain objects\n    default: {\n      clone = {};\n\n      for (const key in obj) {\n        clone[key] = deepCloneUnfreeze(obj[key], cloneClassInstances, seen);\n      }\n\n      cloned = true;\n      break;\n    }\n  }\n\n  seen.set(obj, clone);\n\n  if (!cloned) {\n    const descriptors = Object.getOwnPropertyDescriptors(obj);\n    for (const key of Reflect.ownKeys(descriptors)) {\n      const descriptor = descriptors[key as string];\n      if (\"value\" in descriptor) {\n        descriptor.value = deepCloneUnfreeze(descriptor.value, cloneClassInstances, seen);\n      }\n      Object.defineProperty(clone, key, descriptor);\n    }\n  }\n\n  return clone;\n}\n"],
  "mappings": "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",
  "names": []
}
