{"version":3,"file":"store.min.js","sources":["../lib/store.js"],"sourcesContent":["\n/**\n * This is the Store entity\n *\n * @constructor\n * @param {Object} data The initial options to create the store\n * @param {Object} [data.state] Optional initial state for the store\n * @param {Object} [data.mutations] Optional mutation methods to update the state\n * @param {Object} [data.actions] Optional actions to handle async methods and update the state\n * @param {Object} [data.getters] Optional getters to read from the state\n * @returns {Object} new store object\n */\nfunction Store(data = {}) {\n  let { state, getters } = data;\n\n  // Initialize the localState for this store\n  let localState = typeof state === 'function' ? state() : state;\n\n  /**\n   * We create a proxy for the state\n   * @type {Object}\n   * @name Store.state\n   */\n  this.state = new Proxy(localState || {}, {\n\n    /**\n     * Every time we try to access a property from the state we try to deep freeze the property\n     * to prevent direct modifications to the state\n     *\n     * @type {Object}\n     * @name Store.state.get\n     * @param {Object} state The state object\n     * @param {String} prop The property to read\n     * @returns {Any} The property value\n     */\n    get: (state, prop) => {\n      return this.deepFreeze(state[prop]);\n    },\n\n    /**\n     * If the user tries to set directly it will throw an error, only if we have unfrozen the state via commit\n     * this will proceed to set the value\n     *\n     * @type {Object}\n     * @name Store.state.set\n     * @param {Object} state The state object\n     * @param {String} prop The property to set\n     * @param {Any} value The property value\n     * @returns {Boolean} Always returns true\n     */\n    set: (state, prop, value) => {\n      this.isUnfrozen();\n      let old = state[prop];\n      state[prop] = value;\n      this.trigger('set', prop, value, old);\n      return true;\n    },\n\n    /**\n     * If the user tries to delete directly it will throw an error, only if we have unfrozen the state via commit\n     * this will proceed to delete the property\n     *\n     * @type {Object}\n     * @name Store.state.deleteProperty\n     * @param {Object} state The state object\n     * @param {String} prop The property to delete\n     * @returns {Boolean} Always returns true\n     */\n    deleteProperty: (state, prop) => {\n      this.isUnfrozen();\n      let old = state[prop];\n      delete state[prop];\n      this.trigger('delete', prop, old);\n      return true;\n    }\n  });\n\n  /**\n   * We will define a hidden property to store the init data\n   *\n   * @type {Object}\n   * @name Store.init\n   */\n  Object.defineProperty(this, 'init', {\n    value: {\n      /**\n       * This property will store the frozen state of the store\n       *\n       * @type {Boolean}\n       * @name Store.init.frozen\n       */\n      frozen: true,\n\n      /**\n       * This property will store the plugins\n       * @type {Array}\n       * @name Store.init.plugins\n       */\n      plugins: [],\n\n      /**\n       * This property will store the event listeners\n       * @type {Object}\n       * @name Store.init.listeners\n       * @property {Array} listeners.set This will store the set event listeners\n       * @property {Array} listeners.delete This will store the delete event listeners\n       * @property {Array} listeners.beforecommit This will store the beforecommit event listeners\n       * @property {Array} listeners.commit This will store the commit event listeners\n       * @property {Array} listeners.beforedispatch This will store the beforedispatch event listeners\n       * @property {Array} listeners.dispatch This will store the dispatch event listeners\n       * @property {Array} listeners.getter This will store the getter event listeners\n       * @property {Array} listeners.addlistener This will store the addlistener event listeners\n       * @property {Array} listeners.removelistener This will store the removelistener event listeners\n       * @property {Array} listeners.plugin This will store the plugin event listeners\n       * @property {Array} listeners.registerModule This will store the registerModule event listeners\n       * @property {Array} listeners.unregisterModule This will store the unregisterModule event listeners\n       */\n      listeners: {\n        set: [],\n        delete: [],\n        beforecommit: [],\n        commit: [],\n        beforedispatch: [],\n        dispatch: [],\n        getter: [],\n        addlistener: [],\n        removelistener: [],\n        plugin: []\n      },\n\n      /**\n       * Set passed getters for future reference\n       * @type {Object}\n       * @name Store.init.getters\n       */\n      getters: data.getters || {},\n\n      /**\n       * Set passed mutations for future reference\n       * @type {Object}\n       * @name Store.init.mutations\n       */\n      mutations: data.mutations || {},\n      /**\n       * Set passed actions for future reference\n       * @type {Object}\n       * @name Store.init.actions\n       */\n      actions: data.actions || {}\n    }\n  });\n\n  /**\n   * We create a proxy for the getters\n   * @type {Object}\n   * @name Store.getters\n   */\n  this.getters = new Proxy(getters || {}, {\n\n    /**\n     * When we try to get a property of the getter we will call the original\n     * getter method passing the state as first argument and the other getters as second\n     * if we try to get a non existent getter it will fail silently as if\n     * we were trying to get an undefined property\n     *\n     * @type {Function}\n     * @name Store.getters.get\n     * @param {Object} getters The getters object\n     * @param {String} getter The name of the getter to read\n     * @returns {Any} The value of the getter\n     */\n    get: (getters, getter) => {\n      try {\n        let store = this;\n\n        if (store instanceof Store && store.init.getters[getter]) {\n          let value = store.init.getters[getter](store.state, store.getters, this.state, this.getters);\n          this.trigger('getter', getter, value);\n          return value;\n        }\n      } catch (error) {\n        return;\n      }\n    }\n  });\n}\n\nStore.prototype = Store.fn = {\n  /**\n * This method checks if a key exists in the object provided\n * @throws {Error} Throws an error if the key does not exists\n * @param {String} objectname The name of the object for log reference\n * @param {Object} object The object in which we will search\n * @param {Object} key The key to search for\n * @returns {Void} //\n */\n  keyExists(objectname, object, key) {\n    if (!object[key]) {\n      throw new Error(`The ${objectname} \"${key}\" does not exists.`);\n    }\n  },\n\n  /**\n * This method checks the provided callback is a function\n * @throws {Error} Throws an error if the callback is not a function\n * @param {String} type The type to use for log reference\n * @param {Object} callback The callback to check\n * @returns {Void} //\n */\n  isFunction(type, callback) {\n    if (typeof callback !== 'function') {\n      throw new Error(`You need to provide a valid function as ${type}.`);\n    }\n  },\n\n  /**\n   * This method checks if the store is in a state able to mutate the state\n   * @throws {Error} Throws an error if the store is frozen\n   * @returns {Void} //\n   */\n  isUnfrozen() {\n    if (this.init.frozen) {\n      throw new Error('You need to commit a mutation to change the state');\n    }\n  },\n\n  /**\n   * This method is used to deep freeze an object\n   * @param {Object} obj The object to freeze\n   * @returns {Object} Object frozen\n   */\n  deepFreeze(obj) {\n    // deep freeze object only if it isn't already frozen\n    if (!Object.isFrozen(obj)) {\n      Object.getOwnPropertyNames(obj).forEach(\n        prop => typeof obj[prop] === 'object' && obj[prop] !== null && this.deepFreeze(obj[prop])\n      );\n      Object.freeze(obj);\n    }\n\n    return obj;\n  },\n\n  /**\n   * This method unfroze the state and process a mutation\n   * @throws This will trhow an error if the mutation does not exists\n   * @param {String} mutation The mutation name to process\n   * @param  {...any} [args] The arguments to pass to the mutation\n   * @returns {Void} Void\n   */\n  commit(mutation, ...args) {\n    let store = this;\n    this.keyExists('mutation', store.init.mutations, mutation);\n\n    store.init.frozen = false;\n    this.trigger('beforecommit', mutation, ...args);\n    store.init.mutations[mutation](store.state, ...args);\n    this.trigger('commit', mutation, ...args);\n    store.init.frozen = true;\n  },\n\n  /**\n   * This method process an action\n   * @throws This will throw an error if the action does not exists\n   * @param {String} action The action name to process\n   * @param  {...any} [args] The arguments to pass to the action\n   * @returns {Promise} The action call as a promise\n   */\n  dispatch(action, ...args) {\n    let store = this;\n    this.keyExists('action', store.init.actions, action);\n\n    store.init.frozen = false;\n    this.trigger('beforedispatch', action, ...args);\n    return Promise.resolve(store.init.actions[action](store, ...args)).then((result) => {\n      this.trigger('dispatch', action, ...args);\n      return result;\n    });\n  },\n\n  /**\n   * This method triggers an event\n   * @param {String} event The event name to trigger\n   * @param  {...any} [args] The arguments that will be passed to the listener\n   * @returns {Void} Void\n   */\n  trigger(event, ...args) {\n    this.init.listeners[event].forEach((callback) => callback(this, ...args));\n  },\n\n  /**\n   * This method adds an event listener to the store\n   * @throws This will throw an error if the listener is not a function\n   * @throws This will throw an error if the event does not exists\n   * @param {String} event The event to which to add the listener\n   * @param {Function} listener The listener to add\n   * @returns {Function} The function to unsubscribe\n   */\n  on(event, listener) {\n    this.isFunction('listener', listener);\n    this.keyExists('event', this.init.listeners, event);\n    if (this.init.listeners[event].indexOf(listener) === -1) {\n      this.init.listeners[event].push(listener);\n      this.trigger('addlistener', event, listener);\n    }\n\n    return () => this.off(event, listener);\n  },\n\n  /**\n   * This method removes an event listener from the store\n   * @throws This will throw an error if the listener is not a function\n   * @throws This will throw an error if the event does not exists\n   * @param {String} event The event to which to remove the listener\n   * @param {Function} listener The listener to remove\n   * @returns {Void} Void\n   */\n  off(event, listener) {\n    this.isFunction('listener', listener);\n    this.keyExists('event', this.init.listeners, event);\n    let index = this.init.listeners[event].indexOf(listener);\n    if (index > -1) {\n      this.init.listeners[event].splice(index, 1);\n      this.trigger('removelistener', event, listener);\n    }\n  },\n\n  /**\n   * This method adds a plugin to the Store\n   * @throws This will throw an error if the plugin is not a function\n   * @param {Function} plugin The plugin to add\n   * @param {...any} [options] The options passed to the plugin\n   * @returns {Void} Void\n   */\n  use(plugin, ...options) {\n    this.isFunction('plugin', plugin);\n    if (this.init.plugins.indexOf(plugin) === -1) {\n      plugin(this, ...options);\n      this.init.plugins.push(plugin);\n      this.trigger('plugin', plugin, ...options);\n    }\n  }\n};\n\nStore.fn = Store.prototype;\n\nif (typeof exports === 'object') {\n  module.exports = Store;\n} else {\n  (typeof window === 'undefined' ? global : window).Store = Store;\n}\n"],"names":[],"mappings":"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"}