//# sourceMappingURL=data:application/json;charset=utf-8;base64,{"version":3,"sources":["../lib/index.ts"],"names":["Vnode","tag","props","children","this","isComponent","component","isVnodeComponent","vnode","isNodeJs","Boolean","process","versions","node","createDomElement","isSVG","document","createElementNS","createElement","domToVnode","dom","v","tagName","toLowerCase","Array","from","childNodes","filter","child","nodeType","map","text","nodeValue","String","forEach","call","attributes","prop","nodeName","trust","htmlString","div","innerHTML","trim","item","ValyrianSymbol","Symbol","cleanupVnodes","valyrianApp","i","cleanup","length","update","current","app","oldVnode","mainVnode","patch","isMounted","unmount","emptyVnode","onremove","sharedUpdateProperty","value","reservedProps","directives","eventListenerNames","container","addEventListener","slice","eventListener","removeAttribute","setAttribute","updateProperty","name","updateProperties","newVnode","newTree","childVnode","result","view","splice","isArray","flatTree","oldTree","oldTreeLength","newTreeLength","oldKeyedList","reduce","acc","key","newKeyedList","oldChildVnode","shouldPatch","shouldupdate","onupdate","oncreate","appendChild","replaceChild","parentNode","removeChild","patchKeyedTree","newChildVnode","createTextNode","patchNormalTree","textContent","hideDirective","test","bool","newdom","builtInDirectives","set","style","display","classes","classList","toggle","html","model","property","event","handler","type","e","val","target","idx","indexOf","push","multiple","ctrlKey","value2","join","selected","valyrian","tagOrComponent","fragment","state","global","window","callback","directive2","fullName","vnodeComponent","appContainer","querySelectorAll","Error","defaultPrevented"],"mappings":"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","sourcesContent":["/*** Interfaces ***/\n\nexport interface DomElement extends Element {\n  [key: string]: any;\n}\n\nexport interface Props {\n  key?: string | number;\n  data?: string;\n  oncreate?: { (vnode: IVnode): never };\n  onupdate?: { (vnode: IVnode, oldVnode: IVnode): never };\n  onremove?: { (oldVnode: IVnode): never };\n  shouldupdate?: { (vnode: IVnode, oldVnode: IVnode): undefined | boolean };\n  \"v-cleanup\"?: Function;\n  [key: string | number | symbol]: any;\n}\n\nexport interface Children extends Array<IVnode | any> {}\n\nexport interface IVnode {\n  new (tag: string, props: Props, children: IVnode[]): IVnode;\n  tag: string;\n  props: Props;\n  children: Children;\n  dom?: DomElement;\n  isSVG?: boolean;\n  processed?: boolean;\n  component?: Component | POJOComponent;\n  nodeValue?: string;\n  [key: string | number | symbol]: any;\n}\n\nexport interface Component {\n  (props?: Record<string, any> | null, children?: Children): IVnode | Children;\n  [key: string | number | symbol]: any;\n}\n\nexport interface POJOComponent {\n  view: Component;\n  [key: string | number | symbol]: any;\n}\n\nexport type ValyrianComponent = Component | POJOComponent;\n\nexport interface VnodeComponent extends IVnode {\n  tag: \"__component__\";\n  component: ValyrianComponent;\n}\n\nexport interface VnodeWithDom extends IVnode {\n  dom: DomElement;\n}\n\nexport interface Directive {\n  (value: any, vnode: VnodeWithDom, oldVnode?: VnodeWithDom): void;\n}\n\nexport interface ValyrianApp {\n  isMounted: boolean;\n  eventListenerNames: Record<string, true>;\n  cleanup: Function[];\n\n  eventListener?: EventListener;\n  mainVnode?: VnodeWithDom;\n  component?: VnodeComponent;\n  container?: DomElement;\n\n  [key: string | number | symbol]: any;\n}\n\nexport interface MountedValyrianApp extends ValyrianApp {\n  eventListener: EventListener;\n  mainVnode: VnodeWithDom;\n  container: DomElement;\n  component: VnodeComponent;\n}\n\nexport interface Current {\n  app?: ValyrianApp;\n  component?: ValyrianComponent;\n  vnode?: VnodeWithDom;\n  oldVnode?: VnodeWithDom;\n}\n\nexport interface Directives {\n  [key: string]: Directive;\n}\n\nexport interface ReservedProps {\n  [key: string]: true;\n}\n\nexport interface Valyrian {\n  (tagOrComponent: string | ValyrianComponent, props: Props, ...children: Children): IVnode | VnodeComponent;\n  fragment: (props: Props, ...children: Children) => Children;\n  current: Current;\n  directives: Directives;\n  reservedProps: ReservedProps;\n}\n\n/*** Vnode ***/\n\nexport const Vnode = function Vnode(this: IVnode, tag: string, props: Props, children: Children) {\n  this.props = props;\n  this.children = children;\n  this.tag = tag;\n} as unknown as IVnode;\n\nexport function isVnode(component?: unknown): component is IVnode {\n  return component instanceof Vnode;\n}\n\nexport function isComponent(component?: unknown | ValyrianComponent): component is ValyrianComponent {\n  return typeof component === \"function\" || (typeof component === \"object\" && component !== null && \"view\" in component);\n}\n\nexport function isVnodeComponent(vnode?: unknown): vnode is VnodeComponent {\n  return vnode instanceof Vnode && vnode.tag === \"__component__\";\n}\n\n/*** Util ***/\n\nexport const isNodeJs = Boolean(typeof process !== \"undefined\" && process.versions && process.versions.node);\n\nfunction createDomElement(tag: string, isSVG: boolean = false) {\n  return isSVG ? document.createElementNS(\"http://www.w3.org/2000/svg\", tag) : document.createElement(tag);\n}\n\nfunction domToVnode(dom: DomElement): VnodeWithDom {\n  let vnode = v(\n    dom.tagName.toLowerCase(),\n    {},\n    ...Array.from(dom.childNodes)\n      .filter((child) => (child as DomElement).nodeType === 1 || (child as DomElement).nodeType === 3)\n      .map((child) => {\n        if ((child as DomElement).nodeType === 1) {\n          return domToVnode(child as DomElement);\n        }\n\n        let text = new Vnode(\"#text\", {}, []);\n        text.nodeValue = String((child as DomElement).nodeValue);\n        text.dom = child as DomElement;\n        return text;\n      })\n  );\n  [].forEach.call(dom.attributes, (prop: Attr) => (vnode.props[prop.nodeName] = prop.nodeValue));\n  vnode.dom = dom;\n  return vnode as VnodeWithDom;\n}\n\nexport const trust = (htmlString: string) => {\n  let div = createDomElement(\"div\");\n  div.innerHTML = htmlString.trim();\n\n  return [].map.call(div.childNodes, (item) => domToVnode(item)) as IVnode[];\n};\n\n/*** Mount ***/\n\nconst ValyrianSymbol = Symbol(\"Valyrian\");\n\nexport function cleanup(callback: Function) {\n  if (v.current.app?.cleanup.indexOf(callback) === -1) {\n    v.current.app?.cleanup.push(callback);\n  }\n}\n\n/*\n  * Mounts a component to the DOM\n  mount('#app', () => <div>Hello world</div>); // App is a Functional Component\n  mount('#app', { view: () => <div>Hello world</div> }); // App is a POJO component with a view method\n  mount('#app', classInstance); // App is a class instance with a view method\n  mount('#app', <App><div>Hello world</div></App>); // App is a Vnode component (Vnode with tag __component__)\n*/\n\nexport function mount(container: DomElement | string, component: ValyrianComponent | IVnode) {\n  let appContainer = null;\n\n  if (isNodeJs) {\n    appContainer = typeof container === \"string\" ? createDomElement(container === \"svg\" ? \"svg\" : \"div\", container === \"svg\") : container;\n  } else {\n    appContainer = typeof container === \"string\" ? document.querySelectorAll(container)[0] : container;\n  }\n\n  if (!appContainer) {\n    throw new Error(\"Container not found\");\n  }\n\n  let vnodeComponent: VnodeComponent | IVnode;\n\n  if (isVnodeComponent(component)) {\n    vnodeComponent = component;\n  } else if (isComponent(component)) {\n    vnodeComponent = v(component, {});\n  } else {\n    throw new Error(\"Component must be a Valyrian Component or a Vnode component\");\n  }\n\n  if (component[ValyrianSymbol]) {\n    unmount(component);\n  } else {\n    component[ValyrianSymbol] = {\n      isMounted: false,\n      eventListenerNames: {},\n      isNodeJs,\n      cleanup: []\n    };\n    function eventListener(e: Event) {\n      let dom = e.target as DomElement & Record<string, any>;\n      let name = `v-on${e.type}`;\n      while (dom) {\n        if (dom[name]) {\n          dom[name](e, dom);\n          if (!e.defaultPrevented) {\n            update(component);\n          }\n          return;\n        }\n        dom = dom.parentNode as DomElement;\n      }\n    }\n    component[ValyrianSymbol].eventListener = eventListener;\n  }\n\n  component[ValyrianSymbol].component = vnodeComponent;\n  component[ValyrianSymbol].container = appContainer;\n  component[ValyrianSymbol].mainVnode = domToVnode(appContainer);\n\n  // update\n  return update(component);\n}\n\nfunction cleanupVnodes(valyrianApp: ValyrianApp) {\n  for (let i = 0; i < valyrianApp.cleanup.length; i++) {\n    valyrianApp.cleanup[i]();\n  }\n  valyrianApp.cleanup = [];\n}\n\nexport function update(component?: ValyrianComponent | IVnode) {\n  if (component && component[ValyrianSymbol]) {\n    let valyrianApp = component[ValyrianSymbol];\n    v.current.app = valyrianApp;\n    cleanupVnodes(valyrianApp);\n    let oldVnode: VnodeWithDom | null = valyrianApp.mainVnode as VnodeWithDom;\n    valyrianApp.mainVnode = new Vnode(valyrianApp.mainVnode.tag, valyrianApp.mainVnode.props, [valyrianApp.component]) as VnodeWithDom;\n    valyrianApp.mainVnode.dom = oldVnode.dom;\n    valyrianApp.mainVnode.isSVG = oldVnode.isSVG;\n    patch(valyrianApp.mainVnode, oldVnode, valyrianApp);\n    oldVnode = null;\n    valyrianApp.isMounted = true;\n\n    if (isNodeJs) {\n      return valyrianApp.mainVnode.dom.innerHTML;\n    }\n  }\n}\n\nexport function unmount(component?: ValyrianComponent | IVnode) {\n  if (!component || !component[ValyrianSymbol]) {\n    return;\n  }\n\n  let valyrianApp = component[ValyrianSymbol] as MountedValyrianApp;\n\n  if (valyrianApp.isMounted) {\n    cleanupVnodes(valyrianApp);\n    let oldVnode: VnodeWithDom | null = valyrianApp.mainVnode as VnodeWithDom;\n    valyrianApp.mainVnode = new Vnode(valyrianApp.mainVnode.tag, valyrianApp.mainVnode.props, []) as VnodeWithDom;\n    valyrianApp.mainVnode.dom = oldVnode.dom;\n    valyrianApp.mainVnode.isSVG = oldVnode.isSVG;\n    patch(valyrianApp.mainVnode, oldVnode, valyrianApp);\n    oldVnode = null;\n    valyrianApp.isMounted = false;\n    if (isNodeJs) {\n      return valyrianApp.mainVnode.dom.innerHTML;\n    }\n  }\n}\n\nlet emptyVnode = new Vnode(\"__empty__\", {}, []);\n\nexport function onremove(vnode: IVnode) {\n  for (let i = 0; i < vnode.children.length; i++) {\n    vnode.children[i].tag !== \"#text\" && onremove(vnode.children[i]);\n  }\n\n  vnode.props.onremove && vnode.props.onremove(vnode);\n}\n\nfunction sharedUpdateProperty(prop: string, value: any, vnode: VnodeWithDom, oldVnode?: VnodeWithDom) {\n  // It is a reserved prop\n  if (v.reservedProps[prop]) {\n    // If it is a directive name call the directive\n    if (v.directives[prop]) {\n      v.directives[prop](vnode.props[prop], vnode, oldVnode);\n    }\n    return;\n  }\n\n  // It is not a reserved prop so we add it to the dom\n  if (typeof value === \"function\") {\n    let valyrianApp = v.current.app as MountedValyrianApp;\n    if (prop in valyrianApp.eventListenerNames === false) {\n      valyrianApp.eventListenerNames[prop] = true;\n      valyrianApp.container.addEventListener(prop.slice(2), valyrianApp.eventListener);\n    }\n    vnode.dom[`v-${prop}`] = value;\n    return;\n  }\n\n  if (prop in vnode.dom && vnode.isSVG === false) {\n    // eslint-disable-next-line eqeqeq\n    if (vnode.dom[prop] != value) {\n      vnode.dom[prop] = value;\n    }\n    return;\n  }\n\n  // Use set attribute\n  if (!oldVnode || oldVnode.props[prop] !== value) {\n    if (value === false) {\n      vnode.dom.removeAttribute(prop);\n    } else {\n      vnode.dom.setAttribute(prop, value);\n    }\n  }\n}\n\nexport function updateProperty(name: string, value: any, vnode: VnodeWithDom, oldVnode?: VnodeWithDom) {\n  if (name in vnode.props === false) {\n    vnode.props[name] = value;\n  }\n\n  sharedUpdateProperty(name, value, vnode, oldVnode);\n}\n\nfunction updateProperties(vnode: VnodeWithDom, oldVnode?: VnodeWithDom) {\n  for (let prop in vnode.props) {\n    // We asume that we clean the props in some directive\n    if (prop in vnode.props === false) {\n      return;\n    }\n\n    sharedUpdateProperty(prop, vnode.props[prop], vnode, oldVnode);\n  }\n\n  if (oldVnode) {\n    for (let prop in oldVnode.props) {\n      if (prop in vnode.props === false && typeof oldVnode.props[prop] !== \"function\" && prop in v.reservedProps === false) {\n        if (prop in oldVnode.dom && vnode.isSVG === false) {\n          oldVnode.dom[prop] = null;\n        } else {\n          oldVnode.dom.removeAttribute(prop);\n        }\n      }\n    }\n  }\n}\n\nfunction flatTree(newVnode: IVnode): void {\n  let newTree = newVnode.children;\n  for (let i = 0; i < newTree.length; i++) {\n    let childVnode = newTree[i];\n    if (childVnode instanceof Vnode) {\n      if (childVnode.tag !== \"#text\") {\n        if (childVnode.tag === \"__component__\") {\n          let component = childVnode.component as ValyrianComponent;\n          v.current.component = component;\n          let result = (\"view\" in component ? component.view : component).call(component, childVnode.props, ...childVnode.children);\n\n          newTree.splice(i--, 1, result);\n          continue;\n        }\n        childVnode.isSVG = newVnode.isSVG || childVnode.tag === \"svg\";\n      }\n    } else if (childVnode === null || childVnode === undefined) {\n      newTree.splice(i--, 1);\n    } else if (Array.isArray(childVnode)) {\n      newTree.splice(i--, 1, ...childVnode);\n    } else {\n      if (i > 0 && newTree[i - 1].tag === \"#text\") {\n        newTree[i - 1].nodeValue += childVnode;\n        newTree.splice(i--, 1);\n      } else {\n        newTree[i] = new Vnode(\"#text\", {}, []);\n        newTree[i].nodeValue = String(childVnode);\n      }\n    }\n  }\n}\n\nfunction patchKeyedTree(\n  newVnode: VnodeWithDom,\n  newTree: (VnodeWithDom & { props: Props & { key: string } })[],\n  oldTree: (VnodeWithDom & { props: Props & { key: string } })[],\n  newTreeLength: number,\n  oldTreeLength: number,\n  valyrianApp: MountedValyrianApp\n) {\n  let oldKeyedList = oldTree.reduce((acc, vnode, i) => {\n    acc[vnode.props.key] = i;\n    return acc;\n  }, {} as { [key: string]: number });\n  let newKeyedList = newTree.reduce((acc, vnode, i) => {\n    acc[vnode.props.key] = i;\n    return acc;\n  }, {} as { [key: string]: number });\n\n  for (let i = 0; i < newTreeLength; i++) {\n    let childVnode = newTree[i];\n    let oldChildVnode = oldTree[oldKeyedList[childVnode.props.key]];\n    let shouldPatch = true;\n\n    if (oldChildVnode) {\n      childVnode.dom = oldChildVnode.dom;\n      if (\"v-once\" in childVnode.props || (childVnode.props.shouldupdate && childVnode.props.shouldupdate(childVnode, oldChildVnode) === false)) {\n        // skip this patch\n        childVnode.children = oldChildVnode.children;\n        shouldPatch = false;\n      } else {\n        updateProperties(childVnode, oldChildVnode);\n        if (valyrianApp.isMounted) {\n          childVnode.props.onupdate && childVnode.props.onupdate(childVnode, oldChildVnode);\n        } else {\n          childVnode.props.oncreate && childVnode.props.oncreate(childVnode);\n        }\n      }\n    } else {\n      childVnode.dom = createDomElement(childVnode.tag, childVnode.isSVG);\n      updateProperties(childVnode);\n      childVnode.props.oncreate && childVnode.props.oncreate(childVnode);\n    }\n\n    if (newVnode.dom.childNodes[i] === undefined) {\n      newVnode.dom.appendChild(childVnode.dom);\n    } else if (newVnode.dom.childNodes[i] !== childVnode.dom) {\n      oldTree[i] && newKeyedList[oldTree[i].props.key] === undefined && onremove(oldTree[i]);\n      newVnode.dom.replaceChild(childVnode.dom, newVnode.dom.childNodes[i]);\n    }\n\n    shouldPatch && patch(childVnode, oldChildVnode, valyrianApp);\n  }\n\n  // For the rest of the children, we should remove them\n  for (let i = newTreeLength; i < oldTreeLength; i++) {\n    if (newKeyedList[oldTree[i].props.key] === undefined) {\n      let oldChildVnode = oldTree[i];\n      onremove(oldChildVnode);\n      oldChildVnode.dom.parentNode && oldChildVnode.dom.parentNode.removeChild(oldChildVnode.dom);\n    }\n  }\n}\n\n// eslint-disable-next-line complexity\nfunction patchNormalTree(\n  newVnode: VnodeWithDom,\n  newTree: (VnodeWithDom & { props: Props & { key: string } })[],\n  oldTree: (VnodeWithDom & { props: Props & { key: string } })[],\n  newTreeLength: number,\n  oldTreeLength: number,\n  valyrianApp: MountedValyrianApp\n) {\n  // If new tree and old tree have more than one child, we should update the dom\n  for (let i = 0; i < newTreeLength; i++) {\n    let oldChildVnode = oldTree[i];\n    let newChildVnode = newTree[i];\n\n    // Old child does not exists\n    if (!oldChildVnode) {\n      // New child is a text node\n      if (newChildVnode.tag === \"#text\") {\n        newChildVnode.dom = document.createTextNode(newChildVnode.nodeValue as string) as unknown as DomElement;\n        newVnode.dom.appendChild(newChildVnode.dom);\n        continue;\n      }\n\n      // New child is a normal node\n      newChildVnode.dom = createDomElement(newChildVnode.tag, newChildVnode.isSVG);\n      updateProperties(newChildVnode);\n      newVnode.dom.appendChild(newChildVnode.dom);\n      newChildVnode.props.oncreate && newChildVnode.props.oncreate(newChildVnode);\n      patch(newChildVnode, undefined, valyrianApp);\n      continue;\n    }\n\n    // Old child exists\n    // New child is a text node\n    if (newChildVnode.tag === \"#text\") {\n      // Old child is a text node\n      if (oldChildVnode.tag === \"#text\") {\n        newChildVnode.dom = oldChildVnode.dom;\n        // eslint-disable-next-line eqeqeq\n        if (newChildVnode.dom.nodeValue != newChildVnode.nodeValue) {\n          newChildVnode.dom.nodeValue = newChildVnode.nodeValue as string;\n        }\n        continue;\n      }\n\n      // Old child is a normal node\n      newChildVnode.dom = document.createTextNode(newChildVnode.nodeValue as string) as unknown as DomElement;\n      onremove(oldChildVnode);\n      newVnode.dom.replaceChild(newChildVnode.dom, oldChildVnode.dom);\n\n      continue;\n    }\n\n    // New child is a normal node\n    // Old child is the same type as new child\n    if (oldChildVnode.tag === newChildVnode.tag) {\n      newChildVnode.dom = oldChildVnode.dom;\n      // If we have a v-once directive or a shouldupdate method that returns false, we skip the update\n      if (newChildVnode.props[\"v-once\"] || (newChildVnode.props.shouldupdate && newChildVnode.props.shouldupdate(newChildVnode, oldChildVnode) === false)) {\n        newChildVnode.children = oldChildVnode.children;\n        continue;\n      }\n\n      // We update the dom element\n      updateProperties(newChildVnode, oldChildVnode);\n      if (valyrianApp && valyrianApp.isMounted) {\n        newChildVnode.props.onupdate && newChildVnode.props.onupdate(newChildVnode, oldChildVnode);\n      } else {\n        newChildVnode.props.oncreate && newChildVnode.props.oncreate(newChildVnode);\n      }\n      patch(newChildVnode, oldChildVnode, valyrianApp);\n\n      continue;\n    }\n\n    // Old child is of a different type than new child\n    newChildVnode.dom = createDomElement(newChildVnode.tag, newChildVnode.isSVG);\n    updateProperties(newChildVnode);\n    if (oldChildVnode.tag !== \"#text\") {\n      onremove(oldChildVnode);\n    }\n    newChildVnode.props.oncreate && newChildVnode.props.oncreate(newChildVnode);\n    newVnode.dom.replaceChild(newChildVnode.dom, oldChildVnode.dom);\n    patch(newChildVnode, undefined, valyrianApp);\n  }\n\n  // For the rest of the children, we should remove them\n  for (let i = newTreeLength; i < oldTreeLength; i++) {\n    let oldChildVnode = oldTree[i];\n    if (oldChildVnode.tag !== \"#text\") {\n      onremove(oldChildVnode);\n    }\n    oldChildVnode.dom.parentNode && oldChildVnode.dom.parentNode.removeChild(oldChildVnode.dom);\n  }\n}\n\n// eslint-disable-next-line complexity\nfunction patch(newVnode: VnodeWithDom, oldVnode: VnodeWithDom = emptyVnode as VnodeWithDom, valyrianApp: MountedValyrianApp) {\n  v.current.vnode = newVnode;\n  v.current.oldVnode = oldVnode;\n\n  flatTree(newVnode);\n\n  let newTree = newVnode.children;\n  let oldTree = oldVnode.children;\n  let oldTreeLength = oldTree.length;\n  let newTreeLength = newTree.length;\n\n  // If new tree is empty, remove all old nodes\n  if (newTreeLength === 0) {\n    for (let i = 0; i < oldTreeLength; i++) {\n      onremove(oldTree[i]);\n    }\n\n    newVnode.dom.textContent = \"\";\n    return;\n  }\n\n  // If the tree is keyed list and is not first render and old tree is keyed list too\n  if (oldTreeLength && \"key\" in newTree[0].props && \"key\" in oldTree[0].props) {\n    patchKeyedTree(newVnode, newTree, oldTree, newTreeLength, oldTreeLength, valyrianApp);\n    return;\n  }\n\n  patchNormalTree(newVnode, newTree, oldTree, newTreeLength, oldTreeLength, valyrianApp);\n}\n\n/*** Directives ***/\n\nexport function directive(name: string, directive: Directive) {\n  let fullName = `v-${name}`;\n  v.directives[fullName] = directive;\n  v.reservedProps[fullName] = true;\n}\n\nfunction hideDirective(test: boolean): Directive {\n  return (bool: boolean, vnode: IVnode, oldVnode?: IVnode) => {\n    let value = test ? bool : !bool;\n    if (value) {\n      let newdom = document.createTextNode(\"\");\n      if (oldVnode && oldVnode.dom && oldVnode.dom.parentNode) {\n        oldVnode.tag !== \"#text\" && onremove(oldVnode);\n        oldVnode.dom.parentNode.replaceChild(newdom, oldVnode.dom);\n      }\n      vnode.tag = \"#text\";\n      vnode.children = [];\n      vnode.props = {};\n      vnode.dom = newdom as unknown as DomElement;\n    }\n  };\n}\n\nconst builtInDirectives = {\n  \"v-if\": hideDirective(false),\n  \"v-unless\": hideDirective(true),\n  \"v-for\": (set: unknown[], vnode: VnodeWithDom) => {\n    vnode.children = set.map(vnode.children[0] as (value: unknown) => Function);\n  },\n  \"v-show\": (bool: boolean, vnode: VnodeWithDom) => {\n    (vnode.dom as unknown as { style: { display: string } }).style.display = bool ? \"\" : \"none\";\n  },\n  \"v-class\": (classes: { [x: string]: boolean }, vnode: VnodeWithDom) => {\n    for (let name in classes) {\n      (vnode.dom as DomElement).classList.toggle(name, classes[name]);\n    }\n  },\n  \"v-html\": (html: string, vnode: VnodeWithDom) => {\n    vnode.children = [trust(html)];\n  },\n  \"v-model\": ([model, property, event]: any[], vnode: VnodeWithDom, oldVnode?: VnodeWithDom) => {\n    let value;\n    let handler;\n    if (vnode.name === \"input\") {\n      event = event || \"oninput\";\n      switch (vnode.props.type) {\n        case \"checkbox\": {\n          if (Array.isArray(model[property])) {\n            handler = (e: Event) => {\n              let val = (e.target as DomElement & Record<string, any>).value;\n              let idx = model[property].indexOf(val);\n              if (idx === -1) {\n                model[property].push(val);\n              } else {\n                model[property].splice(idx, 1);\n              }\n            };\n            value = model[property].indexOf(vnode.dom.value) !== -1;\n          } else if (\"value\" in vnode.props) {\n            handler = () => {\n              if (model[property] === vnode.props.value) {\n                model[property] = null;\n              } else {\n                model[property] = vnode.props.value;\n              }\n            };\n            value = model[property] === vnode.props.value;\n          } else {\n            handler = () => (model[property] = !model[property]);\n            value = model[property];\n          }\n          updateProperty(\"checked\", value, vnode, oldVnode);\n          break;\n        }\n        case \"radio\": {\n          updateProperty(\"checked\", model[property] === vnode.dom.value, vnode, oldVnode);\n          break;\n        }\n        default: {\n          updateProperty(\"value\", model[property], vnode, oldVnode);\n        }\n      }\n    } else if (vnode.name === \"select\") {\n      event = event || \"onclick\";\n      if (vnode.props.multiple) {\n        handler = (e: Event & Record<string, any>) => {\n          let val = (e.target as DomElement & Record<string, any>).value;\n          if (e.ctrlKey) {\n            let idx = model[property].indexOf(val);\n            if (idx === -1) {\n              model[property].push(val);\n            } else {\n              model[property].splice(idx, 1);\n            }\n          } else {\n            model[property].splice(0, model[property].length);\n            model[property].push(val);\n          }\n        };\n        vnode.children.forEach((child) => {\n          if (child.name === \"option\") {\n            let value = \"value\" in child.props ? child.props.value : child.children.join(\"\").trim();\n            child.props.selected = model[property].indexOf(value) !== -1;\n          }\n        });\n      } else {\n        vnode.children.forEach((child) => {\n          if (child.name === \"option\") {\n            let value = \"value\" in child.props ? child.props.value : child.children.join(\"\").trim();\n            child.props.selected = value === model[property];\n          }\n        });\n      }\n    } else if (vnode.name === \"textarea\") {\n      event = event || \"oninput\";\n      vnode.children = [model[property]];\n    }\n\n    if (!vnode.props[event]) {\n      if (!handler) {\n        handler = (e: Event) => (model[property] = (e.target as DomElement & Record<string, any>).value);\n      }\n      updateProperty(event, handler, vnode, oldVnode);\n    }\n  }\n};\n\n/*** Hyperscript ***/\n\nexport const valyrian: Valyrian = function v(tagOrComponent: string | ValyrianComponent, props: Props, ...children: Children): IVnode | VnodeComponent {\n  if (typeof tagOrComponent === \"string\") {\n    return new Vnode(tagOrComponent, props || {}, children);\n  }\n\n  const vnode = new Vnode(\"__component__\", props || {}, children);\n  vnode.component = tagOrComponent;\n  return vnode as VnodeComponent;\n};\n\nvalyrian.fragment = (props: Props, ...children: Children): Children => {\n  return children;\n};\n\nvalyrian.current = {} as Current;\n\nvalyrian.directives = { ...builtInDirectives };\n\nvalyrian.reservedProps = {\n  key: true,\n  state: true,\n  oncreate: true,\n  onupdate: true,\n  onremove: true,\n  shouldupdate: true,\n  \"v-cleanup\": true,\n  \"v-once\": true,\n\n  // Built in directives\n  \"v-if\": true,\n  \"v-unless\": true,\n  \"v-for\": true,\n  \"v-show\": true,\n  \"v-class\": true,\n  \"v-html\": true\n};\n\n((isNodeJs ? global : window) as unknown as { v: Valyrian }).v = valyrian as Valyrian;\n"]}