//# sourceMappingURL=data:application/json;charset=utf-8;base64,{"version":3,"names":["isNodeJs","Boolean","process","versions","node","Vnode","constructor","tag","props","children","dom","isSVG","this","isPOJOComponent","component","isComponent","isVnode","object","isVnodeComponent","v","tagOrComponent","hidrateDomToVnode","nodeType","nodeValue","nodeName","toLowerCase","i","l","childNodes","length","childDom","push","childVnode","attributes","attr","vnode","trust","htmlString","div","document","createElement","innerHTML","trim","Array","from","map","fragment","_","mainComponent","mainVnode","isMounted","current","event","reservedProps","Set","onCleanupSet","onMountSet","onUpdateSet","onUnmountSet","onCleanup","callback","add","callSet","set","clear","directives","value","parentNode","replaceChild","createTextNode","bool","style","display","model","property","name","handler","e","target","type","isArray","val","idx","indexOf","splice","sharedSetAttribute","multiple","ctrlKey","forEach","child","join","selected","prevHandler","oldProps","cleanup","className","classList","toggle","setAttribute","class","id","domStyle","debouncedUpdateTimeout","eventListenerNames","eventListener","oldVnode","defaultPrevented","update","newVnode","newVnodeDom","removeAttribute","has","addEventListener","slice","updateAttributes","vnodeDom","vnodeProps","createElementNS","flatTree","originalChildren","console","warn","newChild","view","bind","createNewElement","oldChild","appendChild","textContent","patch","oldDomChildren","oldChildrenLength","childrenLength","shouldPatchKeyed","oldTree","oldKeyedList","key","currentChild","remove","patchKeyed","isText","nextOldChild","updateVnode","debouncedUpdateMethod","requestAnimationFrame","timeout","preventDefault","clearTimeout","setTimeout","directive","directiveName","container","querySelector","result","removeEventListener","Reflect","deleteProperty"],"sources":["../lib/index.ts"],"sourcesContent":["/* eslint-disable */\ndeclare global {\n  var document: Document;\n  namespace JSX {\n    interface IntrinsicElements extends DefaultRecord {}\n    type Element = ReturnType<\n      typeof v | ((...args: any) => string | number | null | undefined | boolean | Promise<any>)\n    >;\n    type ComponentReturnType = string | number | null | undefined | boolean | Element | Element[];\n  }\n}\n\ninterface DefaultRecord extends Record<string | number | symbol, any> {}\n\nexport interface Properties extends DefaultRecord {\n  key?: string | number;\n}\n\nexport interface DomElement extends Element, DefaultRecord {}\n\nexport interface Component extends DefaultRecord {\n  (props: Properties, children: any[]): Vnode | any;\n}\n\nexport interface POJOComponent extends DefaultRecord {\n  view: Component;\n}\n\nexport type ValyrianComponent = Component | POJOComponent;\n\nexport interface VnodeComponentInterface extends Vnode {\n  tag: ValyrianComponent;\n}\n\nexport interface Children extends Array<Vnode | VnodeComponentInterface | ValyrianComponent | any> {}\n\nexport interface Directive {\n  (value: any, vnode: VnodeWithDom, oldProps: Properties | null): false | void | any;\n}\n\nexport const isNodeJs = Boolean(typeof process !== \"undefined\" && process.versions && process.versions.node);\n\nexport class Vnode {\n  constructor(\n    public tag: string | Component | POJOComponent,\n    public props: null | Properties,\n    public children: Children,\n    public dom?: DomElement,\n    public isSVG?: boolean\n  ) {}\n}\n\nexport interface VnodeWithDom extends Vnode {\n  tag: string;\n  dom: DomElement;\n  props: Properties;\n}\n\nexport const isPOJOComponent = (component: unknown): component is POJOComponent =>\n  Boolean(component && typeof component === \"object\" && \"view\" in component);\n\nexport const isComponent = (component: unknown): component is Component =>\n  Boolean(typeof component === \"function\" || isPOJOComponent(component));\nexport const isVnode = (object?: unknown): object is Vnode => object instanceof Vnode;\n\nexport const isVnodeComponent = (object?: unknown): object is VnodeComponentInterface => {\n  return isVnode(object) && isComponent(object.tag);\n};\n\nexport function v(tagOrComponent: string | ValyrianComponent, props: Properties | null, ...children: Children) {\n  return new Vnode(tagOrComponent, props, children);\n}\n\nv.fragment = (_: Properties, ...children: Children) => children;\n\nexport function hidrateDomToVnode(dom: any): VnodeWithDom | void {\n  if (dom.nodeType === 3) {\n    return dom.nodeValue;\n  }\n\n  if (dom.nodeType === 1) {\n    const tag = dom.nodeName.toLowerCase();\n    const props = {} as Properties;\n    const children = [] as Children;\n\n    for (let i = 0, l = dom.childNodes.length; i < l; i++) {\n      const childDom = dom.childNodes[i];\n      if (childDom.nodeType === 3) {\n        children.push(childDom.nodeValue);\n      } else if (childDom.nodeType === 1) {\n        const childVnode = hidrateDomToVnode(childDom);\n        children.push(childVnode);\n      }\n    }\n\n    const attributes = dom.attributes;\n    for (let i = 0, l = attributes.length; i < l; i++) {\n      const attr = attributes[i];\n      props[attr.nodeName] = attr.nodeValue;\n    }\n\n    const vnode = new Vnode(tag, props, children);\n    vnode.dom = dom;\n    dom.vnode = vnode;\n    vnode.isSVG = tag === \"svg\";\n    return vnode as VnodeWithDom;\n  }\n}\n\nexport function trust(htmlString: string) {\n  const div = document.createElement(\"div\");\n  div.innerHTML = htmlString.trim();\n  return Array.from(div.childNodes).map(hidrateDomToVnode);\n}\n\nlet mainComponent: VnodeComponentInterface | null = null;\nlet mainVnode: VnodeWithDom | null = null;\nlet isMounted = false;\n\nexport const current = {\n  vnode: null as Vnode | null,\n  component: null as ValyrianComponent | null,\n  event: null as Event | null\n};\n\nexport const reservedProps = new Set<string>([\n  \"key\",\n  \"state\",\n  \"v-keep\",\n  \"v-text\",\n  \"v-if\",\n  \"v-for\",\n  \"v-show\",\n  \"v-class\",\n  \"v-html\",\n  \"v-model\",\n  \"v-create\",\n  \"v-update\",\n  \"v-cleanup\"\n]);\n\nconst onCleanupSet = new Set<Function>();\nconst onMountSet = new Set<Function>();\nconst onUpdateSet = new Set<Function>();\nconst onUnmountSet = new Set<Function>();\nexport const onMount = (callback: Function) => !isMounted && onMountSet.add(callback);\nexport const onUpdate = (callback: Function) => onUpdateSet.add(callback);\nexport const onCleanup = (callback: Function) => onCleanupSet.add(callback);\nexport const onUnmount = (callback: Function) => !isMounted && onUnmountSet.add(callback);\nconst callSet = (set: Set<Function>) => {\n  for (const callback of set) {\n    callback();\n  }\n  set.clear();\n};\n\nexport const directives: Record<string, Directive> = {\n  \"v-if\": (value, vnode) => {\n    if (!Boolean(value)) {\n      const parentNode = vnode.dom?.parentNode;\n      if (parentNode) {\n        parentNode.replaceChild(document.createTextNode(\"\"), vnode.dom);\n      }\n\n      return false;\n    }\n  },\n\n  \"v-show\": (value, vnode) => {\n    const bool = Boolean(value);\n    (\n      vnode.dom as unknown as {\n        style: { display: string };\n      }\n    ).style.display = bool ? \"\" : \"none\";\n  },\n\n  \"v-html\": (value, vnode) => {\n    vnode.children = trust(value as string);\n  },\n\n  // The \"v-model\" directive binds the value of an input element to a model property\n  \"v-model\": (model, vnode) => {\n    // eslint-disable-next-line prefer-const\n    if (\"name\" in vnode.props === false) {\n      return;\n    }\n\n    let value;\n    const property = vnode.props.name;\n    let event = \"oninput\";\n\n    // This function updates the model property when the input element's value changes\n    let handler = (e: Event) => (model[property] = (e.target as DomElement & Record<string, any>).value);\n    if (vnode.tag === \"input\") {\n      // Depending on the type of input element, use a different handler function\n      switch (vnode.props.type) {\n        case \"checkbox\": {\n          if (Array.isArray(model[property])) {\n            // If the model property is an array, add or remove the value from the array when the checkbox is checked or unchecked\n            handler = (e: Event) => {\n              const val = (e.target as DomElement & Record<string, any>).value;\n              const idx = model[property].indexOf(val);\n              if (idx === -1) {\n                model[property].push(val);\n              } else {\n                model[property].splice(idx, 1);\n              }\n            };\n            // If the value is in the array, set the checkbox to be checked\n            value = model[property].indexOf(vnode.dom.value) !== -1;\n          } else if (\"value\" in vnode.props) {\n            // If the input element has a \"value\" attribute, use it to determine the checked state\n            handler = () => {\n              if (model[property] === vnode.props.value) {\n                model[property] = null;\n              } else {\n                model[property] = vnode.props.value;\n              }\n            };\n            value = model[property] === vnode.props.value;\n          } else {\n            // If there is no \"value\" attribute, use a boolean value for the model property\n            handler = () => (model[property] = !model[property]);\n            value = model[property];\n          }\n          // Set the \"checked\" attribute on the input element\n          // eslint-disable-next-line no-use-before-define\n          sharedSetAttribute(\"checked\", value, vnode);\n          break;\n        }\n        case \"radio\": {\n          // If the element is a radio button, set the \"checked\" attribute based on the value of the model property\n          // eslint-disable-next-line no-use-before-define\n          sharedSetAttribute(\"checked\", model[property] === vnode.dom.value, vnode);\n          break;\n        }\n        default: {\n          // For all other input types, set the \"value\" attribute based on the value of the model property\n          // eslint-disable-next-line no-use-before-define\n          sharedSetAttribute(\"value\", model[property], vnode);\n        }\n      }\n    } else if (vnode.tag === \"select\") {\n      // If the element is a select element, use the \"click\" event by default\n      event = \"onclick\";\n      if (vnode.props.multiple) {\n        // If the select element allows multiple selections, update the model property with an array of selected values\n        handler = (e: Event & Record<string, any>) => {\n          const val = (e.target as DomElement & Record<string, any>).value;\n          if (e.ctrlKey) {\n            // If the Ctrl key is pressed, add or remove the value from the array\n            const idx = model[property].indexOf(val);\n            if (idx === -1) {\n              model[property].push(val);\n            } else {\n              model[property].splice(idx, 1);\n            }\n          } else {\n            // If the Ctrl key is not pressed, set the model property to an array with the selected value\n            model[property].splice(0, model[property].length);\n            model[property].push(val);\n          }\n        };\n        // Set the \"selected\" attribute on the options based on whether they are in the model property array\n        vnode.children.forEach((child: VnodeWithDom) => {\n          if (child.tag === \"option\") {\n            const value = \"value\" in child.props ? child.props.value : child.children.join(\"\").trim();\n            child.props.selected = model[property].indexOf(value) !== -1;\n          }\n        });\n      } else {\n        // If the select element does not allow multiple selections, set the \"selected\" attribute on the options based on the value of the model property\n        vnode.children.forEach((child: VnodeWithDom) => {\n          if (child.tag === \"option\") {\n            const value = \"value\" in child.props ? child.props.value : child.children.join(\"\").trim();\n            child.props.selected = value === model[property];\n          }\n        });\n      }\n    } else if (vnode.tag === \"textarea\") {\n      // Set the textarea's content to the value of the model property\n      vnode.children = [model[property]];\n    }\n\n    // We assume that the prev handler if any will not be changed by the user across patchs\n    const prevHandler = vnode.props[event];\n\n    // Set the event handler on the element\n    // eslint-disable-next-line no-use-before-define\n    sharedSetAttribute(\n      event,\n      (e: Event) => {\n        handler(e);\n\n        // If the previous handler is defined, call it after the model has been updated\n        if (prevHandler) {\n          prevHandler(e);\n        }\n      },\n      vnode\n    );\n  },\n\n  \"v-create\": (callback, vnode, oldProps) => {\n    if (!oldProps) {\n      const cleanup = callback(vnode);\n\n      if (typeof cleanup === \"function\") {\n        onCleanup(cleanup);\n      }\n    }\n  },\n\n  \"v-update\": (callback, vnode, oldProps) => {\n    if (oldProps) {\n      const cleanup = callback(vnode, oldProps);\n\n      if (typeof cleanup === \"function\") {\n        onCleanup(cleanup);\n      }\n    }\n  },\n\n  \"v-cleanup\": (callback, vnode) => {\n    onCleanup(() => callback(vnode));\n  },\n\n  \"v-class\": (value, vnode) => {\n    if (typeof value === \"string\") {\n      vnode.dom.className = value;\n    } else if (Array.isArray(value)) {\n      vnode.dom.className = value.join(\" \");\n    } else if (typeof value === \"object\") {\n      const classList = vnode.dom.classList;\n      for (const name in value) {\n        const val = typeof value[name] === \"function\" ? (value[name] as Function)() : value[name];\n        classList.toggle(name, val);\n      }\n    }\n  },\n\n  // Frequent used properties\n  class(value, vnode) {\n    if (vnode.dom.className !== value) {\n      if (vnode.isSVG) {\n        vnode.dom.setAttribute(\"class\", value);\n        return;\n      }\n      vnode.dom.className = value;\n    }\n  },\n\n  className(value, vnode) {\n    directives.class(value, vnode, null);\n  },\n\n  id: (value, vnode) => {\n    if (vnode.dom.id !== value) {\n      if (vnode.isSVG) {\n        vnode.dom.setAttribute(\"id\", value);\n        return;\n      }\n      vnode.dom.id = value;\n    }\n  },\n\n  style: (value, vnode) => {\n    if (typeof value === \"string\") {\n      if (vnode.isSVG) {\n        vnode.dom.setAttribute(\"style\", value);\n        return;\n      }\n      vnode.dom.style = value;\n    } else if (typeof value === \"object\") {\n      if (vnode.isSVG) {\n        vnode.dom.setAttribute(\"style\", \"\");\n      } else {\n        vnode.dom.style = \"\";\n      }\n      const domStyle = vnode.dom.style;\n      for (const name in value) {\n        domStyle[name] = value[name];\n      }\n    }\n  }\n};\n\nexport function directive(name: string, directive: Directive) {\n  const directiveName = `v-${name}`;\n  directives[directiveName] = directive;\n  reservedProps.add(directiveName);\n}\n\nexport function setPropNameReserved(name: string) {\n  reservedProps.add(name);\n}\n\nconst eventListenerNames = new Set<string>();\n\nfunction eventListener(e: Event) {\n  current.event = e;\n  let dom = e.target as DomElement;\n  const name = `on${e.type}`;\n\n  while (dom) {\n    const oldVnode = dom.vnode as VnodeWithDom;\n    if (oldVnode && oldVnode.props[name]) {\n      oldVnode.props[name](e, oldVnode);\n\n      if (!e.defaultPrevented) {\n        // eslint-disable-next-line no-use-before-define\n        update();\n      }\n      return;\n    }\n    dom = dom.parentNode as DomElement;\n  }\n\n  current.event = null;\n}\n\nfunction sharedSetAttribute(name: string, value: any, newVnode: VnodeWithDom): void | boolean {\n  const newVnodeDom = newVnode.dom;\n  if (typeof value === \"function\") {\n    if (!eventListenerNames.has(name)) {\n      // We attach the delegated event listener to the main vnode dom element, which is the root of the component\n      (mainVnode as VnodeWithDom).dom.addEventListener(name.slice(2), eventListener);\n      eventListenerNames.add(name);\n    }\n    return;\n  }\n\n  if (!newVnode.isSVG && name in newVnodeDom) {\n    newVnodeDom[name] = value;\n    return;\n  }\n\n  if (value === false) {\n    newVnodeDom.removeAttribute(name);\n  } else {\n    newVnodeDom.setAttribute(name, value);\n  }\n}\n\nexport function setAttribute(name: string, value: any, newVnode: VnodeWithDom): void {\n  if (!reservedProps.has(name)) {\n    newVnode.props[name] = value;\n    sharedSetAttribute(name, value, newVnode);\n  }\n}\n\nexport function updateAttributes(newVnode: VnodeWithDom, oldProps: Properties | null): void {\n  const vnodeDom = newVnode.dom;\n  const vnodeProps = newVnode.props;\n  vnodeDom.vnode = newVnode;\n\n  if (oldProps) {\n    for (const name in oldProps) {\n      if (name in vnodeProps === false && !eventListenerNames.has(name) && !reservedProps.has(name)) {\n        if (!newVnode.isSVG && name in vnodeDom) {\n          vnodeDom[name] = null;\n        } else {\n          vnodeDom.removeAttribute(name);\n        }\n      }\n    }\n  }\n\n  for (const name in vnodeProps) {\n    if (directives[name]) {\n      if (directives[name](vnodeProps[name], newVnode, oldProps) === false) {\n        break;\n      }\n      continue;\n    }\n\n    if (!reservedProps.has(name)) {\n      sharedSetAttribute(name, vnodeProps[name], newVnode);\n    }\n  }\n}\n\nexport function createElement(tag: string, isSVG: boolean): DomElement {\n  return isSVG\n    ? document.createElementNS(\"http://www.w3.org/2000/svg\", tag)\n    : (document.createElement(tag) as DomElement);\n}\n\nfunction flatTree(newVnode: VnodeWithDom) {\n  current.vnode = newVnode;\n\n  let i = 0;\n  const originalChildren = newVnode.children;\n  let children = originalChildren;\n\n  if (\"v-for\" in newVnode.props) {\n    children = [];\n    const set = newVnode.props[\"v-for\"];\n    const l = set.length;\n    const callback = newVnode.children[0];\n\n    if (typeof callback !== \"function\") {\n      console.warn(\"v-for directive must have a callback function as children\");\n      return children;\n    }\n\n    for (let i = 0; i < l; i++) {\n      children[i] = callback(set[i], i);\n    }\n  }\n\n  while (i < children.length) {\n    const newChild = children[i];\n\n    if (newChild == null) {\n      if (children === originalChildren) {\n        children = [...originalChildren];\n      }\n      children.splice(i, 1);\n      continue;\n    }\n\n    if (Array.isArray(newChild)) {\n      if (children === originalChildren) {\n        children = [...originalChildren];\n      }\n      children.splice(i, 1, ...newChild);\n      continue;\n    }\n\n    if (newChild instanceof Vnode) {\n      newChild.props = newChild.props || {};\n      newChild.isSVG = newVnode.isSVG || newChild.tag === \"svg\";\n\n      if (typeof newChild.tag !== \"string\") {\n        if (children === originalChildren) {\n          children = [...originalChildren];\n        }\n\n        const component = (current.component = newChild.tag);\n\n        children[i] = (isPOJOComponent(component) ? component.view : component).bind(component)(\n          newChild.props,\n          newChild.children\n        );\n\n        continue;\n      }\n    }\n\n    i++;\n  }\n\n  return children;\n}\n\nfunction createNewElement(newChild: VnodeWithDom, newVnode: VnodeWithDom, oldChild: DomElement | null) {\n  const dom = createElement(newChild.tag, newChild.isSVG as boolean);\n  if (oldChild) {\n    newVnode.dom.replaceChild(dom, oldChild);\n  } else {\n    newVnode.dom.appendChild(dom);\n  }\n  newChild.dom = dom;\n  updateAttributes(newChild, null);\n  if (\"v-text\" in newChild.props) {\n    newChild.dom.textContent = newChild.props[\"v-text\"];\n    return;\n  }\n\n  const children = flatTree(newChild);\n  if (children.length === 0) {\n    newChild.dom.textContent = \"\";\n    return;\n  }\n\n  for (let i = 0, l = children.length; i < l; i++) {\n    if (children[i] instanceof Vnode === false) {\n      newChild.dom.appendChild(document.createTextNode(children[i]));\n      continue;\n    }\n    createNewElement(children[i], newChild, null);\n  }\n}\n\nfunction patchKeyed(newVnode: VnodeWithDom, children: Children) {\n  const oldTree = [...Array.from(newVnode.dom.childNodes)] as unknown as DomElement[];\n  const childNodes = newVnode.dom.childNodes;\n  const oldKeyedList: Record<string, number> = {};\n\n  for (let i = 0, l = oldTree.length; i < l; i++) {\n    const oldVnode = oldTree[i].vnode as VnodeWithDom;\n    if (!oldVnode || \"key\" in oldVnode.props === false) {\n      continue;\n    }\n    oldKeyedList[oldVnode.props.key as string] = i;\n  }\n\n  for (let i = 0, l = children.length; i < l; i++) {\n    const newChild = children[i];\n    const oldChild = oldTree[oldKeyedList[newChild.props.key as string]];\n\n    if (!oldChild) {\n      createNewElement(newChild, newVnode, childNodes[i] as DomElement | null);\n      continue;\n    }\n\n    newChild.dom = oldChild;\n    const currentChild = childNodes[i];\n    if (!currentChild) {\n      newVnode.dom.appendChild(oldChild);\n    } else if (currentChild !== oldChild) {\n      newVnode.dom.replaceChild(oldChild, currentChild);\n    }\n\n    if (\n      \"v-keep\" in newChild.props === false ||\n      !oldChild.vnode ||\n      oldChild.props[\"v-keep\"] !== newChild.props[\"v-keep\"]\n    ) {\n      updateAttributes(newChild as VnodeWithDom, oldChild.vnode.props);\n\n      if (\"v-text\" in newChild.props) {\n        // eslint-disable-next-line eqeqeq\n        if (oldChild.textContent != newChild.props[\"v-text\"]) {\n          oldChild.textContent = newChild.props[\"v-text\"];\n        }\n        continue;\n      }\n      // eslint-disable-next-line no-use-before-define\n      patch(newChild as VnodeWithDom);\n    }\n  }\n\n  for (let i = children.length, l = childNodes.length; i < l; i++) {\n    childNodes[childNodes.length - 1]?.remove();\n  }\n}\n\n// eslint-disable-next-line complexity\nfunction patch(newVnode: VnodeWithDom): void {\n  const children = flatTree(newVnode);\n\n  const dom = newVnode.dom;\n\n  if (children.length === 0) {\n    if (dom.childNodes.length) {\n      dom.textContent = \"\";\n    }\n    return;\n  }\n\n  const oldDomChildren = dom.childNodes as unknown as DomElement[];\n  const oldChildrenLength = oldDomChildren.length;\n  const childrenLength = children.length;\n  if (oldChildrenLength === 0) {\n    for (let i = 0; i < childrenLength; i++) {\n      if (children[i] instanceof Vnode === false) {\n        dom.appendChild(document.createTextNode(children[i]));\n        continue;\n      }\n      createNewElement(children[i], newVnode, null);\n    }\n    return;\n  }\n\n  let shouldPatchKeyed = true;\n  for (let i = 0; i < childrenLength; i++) {\n    if (children[i] instanceof Vnode === false || !(\"key\" in children[i].props)) {\n      shouldPatchKeyed = false;\n      break;\n    }\n  }\n  if (shouldPatchKeyed) {\n    patchKeyed(newVnode, children);\n    return;\n  }\n\n  for (let i = 0; i < childrenLength; i++) {\n    const newChild = children[i] as VnodeWithDom;\n    const isText = newChild instanceof Vnode === false;\n    const oldChild = oldDomChildren[i];\n\n    if (!oldChild) {\n      if (isText) {\n        newVnode.dom.appendChild(document.createTextNode(newChild as unknown as string));\n        continue;\n      }\n\n      createNewElement(newChild as VnodeWithDom, newVnode, null);\n      continue;\n    }\n\n    if (isText) {\n      if (oldChild.nodeType !== 3) {\n        newVnode.dom.replaceChild(document.createTextNode(newChild as unknown as string), oldChild);\n        continue;\n      }\n\n      // eslint-disable-next-line eqeqeq\n      if (oldChild.nodeValue != (newChild as unknown as string)) {\n        oldChild.nodeValue = newChild as unknown as string;\n      }\n      continue;\n    }\n\n    if (\"v-keep\" in newChild.props) {\n      if (oldChild.vnode && oldChild.vnode.props[\"v-keep\"] === newChild.props[\"v-keep\"]) {\n        continue;\n      }\n\n      const nextOldChild = oldDomChildren[i + 1];\n      if (nextOldChild && nextOldChild.vnode && nextOldChild.vnode.props[\"v-keep\"] === newChild.props[\"v-keep\"]) {\n        oldChild.remove();\n        continue;\n      }\n    }\n\n    if (newChild.tag !== oldChild.nodeName.toLowerCase()) {\n      createNewElement(newChild, newVnode, oldChild);\n      continue;\n    }\n\n    newChild.dom = oldChild;\n    updateAttributes(newChild, oldChild.vnode ? oldChild.vnode.props : null);\n    if (\"v-text\" in newChild.props) {\n      // eslint-disable-next-line eqeqeq\n      if (newChild.dom.textContent != newChild.props[\"v-text\"]) {\n        newChild.dom.textContent = newChild.props[\"v-text\"];\n      }\n      continue;\n    }\n    patch(newChild);\n  }\n\n  for (let i = childrenLength, l = oldDomChildren.length; i < l; i++) {\n    oldDomChildren[i]?.remove();\n  }\n}\n\nexport function updateVnode(vnode: VnodeWithDom): string | void {\n  callSet(onCleanupSet);\n  vnode.props = vnode.props || {};\n  patch(vnode);\n  callSet(isMounted ? onUpdateSet : onMountSet);\n  isMounted = true;\n  current.vnode = null;\n  current.component = null;\n}\n\nexport function update(): string {\n  if (mainVnode) {\n    mainVnode.children = [mainComponent];\n    updateVnode(mainVnode as VnodeWithDom);\n    if (isNodeJs) {\n      return mainVnode.dom.innerHTML;\n    }\n  }\n  return \"\";\n}\n\nlet debouncedUpdateTimeout: any;\nconst debouncedUpdateMethod = isNodeJs ? update : () => requestAnimationFrame(update);\n\nexport function debouncedUpdate(timeout = 42) {\n  if (current.event) {\n    current.event.preventDefault();\n  }\n  clearTimeout(debouncedUpdateTimeout);\n  debouncedUpdateTimeout = setTimeout(debouncedUpdateMethod, timeout);\n}\n\nexport function unmount() {\n  if (mainVnode) {\n    mainComponent = v(() => null, {}) as VnodeComponentInterface;\n    const result = update();\n    callSet(onUnmountSet);\n    for (const name in eventListenerNames) {\n      mainVnode.dom.removeEventListener(name.slice(2).toLowerCase(), eventListener);\n      Reflect.deleteProperty(eventListenerNames, name);\n    }\n\n    mainComponent = null;\n    mainVnode = null;\n    isMounted = false;\n    current.vnode = null;\n    current.component = null;\n    current.event = null;\n    return result;\n  }\n\n  return \"\";\n}\n\nexport function mount(dom: string | DomElement, component: ValyrianComponent | VnodeComponentInterface | any) {\n  const container =\n    typeof dom === \"string\" ? (isNodeJs ? createElement(dom, dom === \"svg\") : document.querySelector(dom)) : dom;\n\n  if (isComponent(component)) {\n    mainComponent = v(component, {}, []) as VnodeComponentInterface;\n  } else if (isVnodeComponent(component)) {\n    mainComponent = component;\n  } else {\n    mainComponent = v(() => component, {}, []) as VnodeComponentInterface;\n  }\n\n  mainVnode = hidrateDomToVnode(container) as VnodeWithDom;\n  return update();\n}\n"],"mappings":"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"}