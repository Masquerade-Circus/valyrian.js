//# sourceMappingURL=data:application/json;charset=utf-8;base64,{"version":3,"names":["isNodeJs","Boolean","process","versions","node","Vnode","constructor","tag","props","children","dom","isSVG","hasKeys","this","isPOJOComponent","component","isComponent","isVnode","object","isVnodeComponent","v","tagOrComponent","hidrateDomToVnode","nodeType","nodeValue","nodeName","toLowerCase","i","l","childNodes","length","childDom","push","childVnode","attributes","attr","vnode","trust","htmlString","div","document","createElement","innerHTML","trim","Array","from","map","fragment","_","mainComponent","mainVnode","isMounted","current","event","reservedProps","Set","onCleanupSet","onMountSet","onUpdateSet","onUnmountSet","onCleanup","callback","add","callSet","set","clear","directives","value","parentNode","replaceChild","createTextNode","bool","style","display","model","property","name","handler","e","target","type","isArray","val","idx","indexOf","splice","setAttribute","multiple","ctrlKey","forEach","child","join","selected","prevHandler","oldProps","cleanup","className","classList","toggle","class","id","domStyle","debouncedUpdateTimeout","eventListenerNames","eventListener","oldVnode","defaultPrevented","update","sharedSetAttribute","newVnode","newVnodeDom","removeAttribute","has","addEventListener","slice","updateAttributes","vnodeDom","vnodeProps","createElementNS","flatTree","console","warn","newChild","view","bind","processNewChild","parentVnode","oldDom","appendChild","textContent","patch","oldChildrenLength","childrenLength","oldTree","oldKeyedList","key","oldChild","currentChild","remove","updateVnode","debouncedUpdateMethod","requestAnimationFrame","timeout","preventDefault","clearTimeout","setTimeout","directive","directiveName","container","querySelector","result","removeEventListener","Reflect","deleteProperty"],"sources":["../lib/index.ts"],"sourcesContent":["/* eslint-disable */\ndeclare global {\n  var document: Document;\n  namespace JSX {\n    interface IntrinsicElements extends DefaultRecord {}\n    type Element = ReturnType<\n      typeof v | ((...args: any) => string | number | null | undefined | boolean | Promise<any>)\n    >;\n    type ComponentReturnType = string | number | null | undefined | boolean | Element | Element[];\n  }\n}\n\ninterface DefaultRecord extends Record<string | number | symbol, any> {}\n\nexport interface Properties extends DefaultRecord {\n  key?: string | number;\n}\n\nexport interface DomElement extends Element, DefaultRecord {}\n\nexport interface Component extends DefaultRecord {\n  (props: Properties, children: any[]): Vnode | any;\n}\n\nexport interface POJOComponent extends DefaultRecord {\n  view: Component;\n}\n\nexport type ValyrianComponent = Component | POJOComponent;\n\nexport interface VnodeComponentInterface extends Vnode {\n  tag: ValyrianComponent;\n}\n\nexport interface Children extends Array<Vnode | VnodeComponentInterface | ValyrianComponent | any> {}\n\nexport interface Directive {\n  (value: any, vnode: VnodeWithDom, oldProps?: Properties): false | void | any;\n}\n\nexport const isNodeJs = Boolean(typeof process !== \"undefined\" && process.versions && process.versions.node);\n\nexport class Vnode {\n  constructor(\n    public tag: string | Component | POJOComponent,\n    public props: null | Properties,\n    public children: Children,\n    public dom?: DomElement,\n    public isSVG?: boolean,\n    public hasKeys?: boolean\n  ) {}\n}\n\nexport interface VnodeWithDom extends Vnode {\n  tag: string;\n  dom: DomElement;\n  props: Properties;\n}\n\nexport const isPOJOComponent = (component: unknown): component is POJOComponent =>\n  Boolean(component && typeof component === \"object\" && \"view\" in component);\n\nexport const isComponent = (component: unknown): component is Component =>\n  Boolean(typeof component === \"function\" || isPOJOComponent(component));\nexport const isVnode = (object?: unknown): object is Vnode => object instanceof Vnode;\n\nexport const isVnodeComponent = (object?: unknown): object is VnodeComponentInterface => {\n  return isVnode(object) && isComponent(object.tag);\n};\n\nexport function v(tagOrComponent: string | ValyrianComponent, props: Properties | null, ...children: Children) {\n  return new Vnode(tagOrComponent, props, children);\n}\n\nv.fragment = (_: Properties, ...children: Children) => children;\n\nexport function hidrateDomToVnode(dom: any): VnodeWithDom | void {\n  if (dom.nodeType === 3) {\n    return dom.nodeValue;\n  }\n\n  if (dom.nodeType === 1) {\n    const tag = dom.nodeName.toLowerCase();\n    const props = {} as Properties;\n    const children = [] as Children;\n\n    for (let i = 0, l = dom.childNodes.length; i < l; i++) {\n      const childDom = dom.childNodes[i];\n      if (childDom.nodeType === 3) {\n        children.push(childDom.nodeValue);\n      } else if (childDom.nodeType === 1) {\n        const childVnode = hidrateDomToVnode(childDom);\n        children.push(childVnode);\n      }\n    }\n\n    const attributes = dom.attributes;\n    for (let i = 0, l = attributes.length; i < l; i++) {\n      const attr = attributes[i];\n      props[attr.nodeName] = attr.nodeValue;\n    }\n\n    const vnode = new Vnode(tag, props, children);\n    vnode.dom = dom;\n    dom.vnode = vnode;\n    vnode.isSVG = tag === \"svg\";\n    return vnode as VnodeWithDom;\n  }\n}\n\nexport function trust(htmlString: string) {\n  const div = document.createElement(\"div\");\n  div.innerHTML = htmlString.trim();\n  return Array.from(div.childNodes).map(hidrateDomToVnode);\n}\n\nlet mainComponent: VnodeComponentInterface | null = null;\nlet mainVnode: VnodeWithDom | null = null;\nlet isMounted = false;\n\nexport const current = {\n  vnode: null as Vnode | null,\n  component: null as ValyrianComponent | null,\n  event: null as Event | null\n};\n\nexport const reservedProps = new Set<string>([\n  \"key\",\n  \"state\",\n  \"v-keep\",\n  \"v-text\",\n  \"v-if\",\n  \"v-for\",\n  \"v-show\",\n  \"v-class\",\n  \"v-html\",\n  \"v-model\",\n  \"v-create\",\n  \"v-update\",\n  \"v-cleanup\"\n]);\n\nconst onCleanupSet = new Set<Function>();\nconst onMountSet = new Set<Function>();\nconst onUpdateSet = new Set<Function>();\nconst onUnmountSet = new Set<Function>();\nexport const onMount = (callback: Function) => !isMounted && onMountSet.add(callback);\nexport const onUpdate = (callback: Function) => onUpdateSet.add(callback);\nexport const onCleanup = (callback: Function) => onCleanupSet.add(callback);\nexport const onUnmount = (callback: Function) => !isMounted && onUnmountSet.add(callback);\nconst callSet = (set: Set<Function>) => {\n  for (const callback of set) {\n    callback();\n  }\n  set.clear();\n};\n\nexport const directives: Record<string, Directive> = {\n  \"v-if\": (value, vnode) => {\n    if (!Boolean(value)) {\n      const parentNode = vnode.dom?.parentNode;\n      if (parentNode) {\n        parentNode.replaceChild(document.createTextNode(\"\"), vnode.dom);\n      }\n\n      return false;\n    }\n  },\n\n  \"v-show\": (value, vnode) => {\n    const bool = Boolean(value);\n    (\n      vnode.dom as unknown as {\n        style: { display: string };\n      }\n    ).style.display = bool ? \"\" : \"none\";\n  },\n\n  \"v-html\": (value, vnode) => {\n    vnode.children = trust(value as string);\n  },\n\n  // The \"v-model\" directive binds the value of an input element to a model property\n  \"v-model\": (model, vnode) => {\n    // eslint-disable-next-line prefer-const\n    if (\"name\" in vnode.props === false) {\n      return;\n    }\n\n    let value;\n    const property = vnode.props.name;\n    let event = \"oninput\";\n\n    // This function updates the model property when the input element's value changes\n    let handler = (e: Event) => (model[property] = (e.target as DomElement & Record<string, any>).value);\n    if (vnode.tag === \"input\") {\n      // Depending on the type of input element, use a different handler function\n      switch (vnode.props.type) {\n        case \"checkbox\": {\n          if (Array.isArray(model[property])) {\n            // If the model property is an array, add or remove the value from the array when the checkbox is checked or unchecked\n            handler = (e: Event) => {\n              const val = (e.target as DomElement & Record<string, any>).value;\n              const idx = model[property].indexOf(val);\n              if (idx === -1) {\n                model[property].push(val);\n              } else {\n                model[property].splice(idx, 1);\n              }\n            };\n            // If the value is in the array, set the checkbox to be checked\n            value = model[property].indexOf(vnode.dom.value) !== -1;\n          } else if (\"value\" in vnode.props) {\n            // If the input element has a \"value\" attribute, use it to determine the checked state\n            handler = () => {\n              if (model[property] === vnode.props.value) {\n                model[property] = null;\n              } else {\n                model[property] = vnode.props.value;\n              }\n            };\n            value = model[property] === vnode.props.value;\n          } else {\n            // If there is no \"value\" attribute, use a boolean value for the model property\n            handler = () => (model[property] = !model[property]);\n            value = model[property];\n          }\n          // Set the \"checked\" attribute on the input element\n          // eslint-disable-next-line no-use-before-define\n          setAttribute(\"checked\", value, vnode);\n          break;\n        }\n        case \"radio\": {\n          // If the element is a radio button, set the \"checked\" attribute based on the value of the model property\n          // eslint-disable-next-line no-use-before-define\n          setAttribute(\"checked\", model[property] === vnode.dom.value, vnode);\n          break;\n        }\n        default: {\n          // For all other input types, set the \"value\" attribute based on the value of the model property\n          // eslint-disable-next-line no-use-before-define\n          setAttribute(\"value\", model[property], vnode);\n        }\n      }\n    } else if (vnode.tag === \"select\") {\n      // If the element is a select element, use the \"click\" event by default\n      event = \"onclick\";\n      if (vnode.props.multiple) {\n        // If the select element allows multiple selections, update the model property with an array of selected values\n        handler = (e: Event & Record<string, any>) => {\n          const val = (e.target as DomElement & Record<string, any>).value;\n          if (e.ctrlKey) {\n            // If the Ctrl key is pressed, add or remove the value from the array\n            const idx = model[property].indexOf(val);\n            if (idx === -1) {\n              model[property].push(val);\n            } else {\n              model[property].splice(idx, 1);\n            }\n          } else {\n            // If the Ctrl key is not pressed, set the model property to an array with the selected value\n            model[property].splice(0, model[property].length);\n            model[property].push(val);\n          }\n        };\n        // Set the \"selected\" attribute on the options based on whether they are in the model property array\n        vnode.children.forEach((child: VnodeWithDom) => {\n          if (child.tag === \"option\") {\n            const value = \"value\" in child.props ? child.props.value : child.children.join(\"\").trim();\n            child.props.selected = model[property].indexOf(value) !== -1;\n          }\n        });\n      } else {\n        // If the select element does not allow multiple selections, set the \"selected\" attribute on the options based on the value of the model property\n        vnode.children.forEach((child: VnodeWithDom) => {\n          if (child.tag === \"option\") {\n            const value = \"value\" in child.props ? child.props.value : child.children.join(\"\").trim();\n            child.props.selected = value === model[property];\n          }\n        });\n      }\n    } else if (vnode.tag === \"textarea\") {\n      // Set the textarea's content to the value of the model property\n      vnode.children = [model[property]];\n    }\n\n    // We assume that the prev handler if any will not be changed by the user across patchs\n    const prevHandler = vnode.props[event];\n\n    // Set the event handler on the element\n    // eslint-disable-next-line no-use-before-define\n    setAttribute(\n      event,\n      (e: Event) => {\n        handler(e);\n\n        // If the previous handler is defined, call it after the model has been updated\n        if (prevHandler) {\n          prevHandler(e);\n        }\n      },\n      vnode\n    );\n  },\n\n  \"v-create\": (callback, vnode, oldProps) => {\n    if (!oldProps) {\n      const cleanup = callback(vnode);\n\n      if (typeof cleanup === \"function\") {\n        onCleanup(cleanup);\n      }\n    }\n  },\n\n  \"v-update\": (callback, vnode, oldProps) => {\n    if (oldProps) {\n      const cleanup = callback(vnode, oldProps);\n\n      if (typeof cleanup === \"function\") {\n        onCleanup(cleanup);\n      }\n    }\n  },\n\n  \"v-cleanup\": (callback, vnode) => {\n    onCleanup(() => callback(vnode));\n  },\n\n  \"v-class\": (value, vnode) => {\n    if (typeof value === \"string\") {\n      vnode.dom.className = value;\n    } else if (Array.isArray(value)) {\n      vnode.dom.className = value.join(\" \");\n    } else if (typeof value === \"object\") {\n      const classList = vnode.dom.classList;\n      for (const name in value) {\n        const val = typeof value[name] === \"function\" ? (value[name] as Function)() : value[name];\n        classList.toggle(name, val);\n      }\n    }\n  },\n\n  // Frequent used properties\n  class(value, vnode) {\n    if (vnode.dom.className !== value) {\n      if (vnode.isSVG) {\n        vnode.dom.setAttribute(\"class\", value);\n        return;\n      }\n      vnode.dom.className = value;\n    }\n  },\n\n  className(value, vnode) {\n    directives.class(value, vnode);\n  },\n\n  id: (value, vnode) => {\n    if (vnode.dom.id !== value) {\n      if (vnode.isSVG) {\n        vnode.dom.setAttribute(\"id\", value);\n        return;\n      }\n      vnode.dom.id = value;\n    }\n  },\n\n  style: (value, vnode) => {\n    if (typeof value === \"string\") {\n      if (vnode.isSVG) {\n        vnode.dom.setAttribute(\"style\", value);\n        return;\n      }\n      vnode.dom.style = value;\n    } else if (typeof value === \"object\") {\n      if (vnode.isSVG) {\n        vnode.dom.setAttribute(\"style\", \"\");\n      } else {\n        vnode.dom.style = \"\";\n      }\n      const domStyle = vnode.dom.style;\n      for (const name in value) {\n        domStyle[name] = value[name];\n      }\n    }\n  }\n};\n\nexport function directive(name: string, directive: Directive) {\n  const directiveName = `v-${name}`;\n  directives[directiveName] = directive;\n  reservedProps.add(directiveName);\n}\n\nexport function setPropNameReserved(name: string) {\n  reservedProps.add(name);\n}\n\nconst eventListenerNames = new Set<string>();\n\nfunction eventListener(e: Event) {\n  current.event = e;\n  let dom = e.target as DomElement;\n  const name = `on${e.type}`;\n\n  while (dom) {\n    const oldVnode = dom.vnode as VnodeWithDom;\n    if (oldVnode && oldVnode.props[name]) {\n      oldVnode.props[name](e, oldVnode);\n\n      if (!e.defaultPrevented) {\n        // eslint-disable-next-line no-use-before-define\n        update();\n      }\n      return;\n    }\n    dom = dom.parentNode as DomElement;\n  }\n\n  current.event = null;\n}\n\nfunction sharedSetAttribute(name: string, value: any, newVnode: VnodeWithDom): void | boolean {\n  const newVnodeDom = newVnode.dom;\n  if (typeof value === \"function\") {\n    if (!eventListenerNames.has(name)) {\n      // We attach the delegated event listener to the main vnode dom element, which is the root of the component\n      (mainVnode as VnodeWithDom).dom.addEventListener(name.slice(2), eventListener);\n      eventListenerNames.add(name);\n    }\n    return;\n  }\n\n  if (!newVnode.isSVG && name in newVnodeDom) {\n    newVnodeDom[name] = value;\n    return;\n  }\n\n  if (value === false) {\n    newVnodeDom.removeAttribute(name);\n  } else {\n    newVnodeDom.setAttribute(name, value);\n  }\n}\n\nexport function setAttribute(name: string, value: any, newVnode: VnodeWithDom): void {\n  if (!reservedProps.has(name)) {\n    newVnode.props[name] = value;\n    sharedSetAttribute(name, value, newVnode);\n  }\n}\n\nexport function updateAttributes(newVnode: VnodeWithDom, oldVnode?: VnodeWithDom): void {\n  const vnodeDom = newVnode.dom;\n  const vnodeProps = newVnode.props;\n  vnodeDom.vnode = newVnode;\n\n  if (oldVnode) {\n    for (const name in oldVnode.props) {\n      if (name in vnodeProps === false && !eventListenerNames.has(name) && !reservedProps.has(name)) {\n        if (!newVnode.isSVG && name in vnodeDom) {\n          vnodeDom[name] = null;\n        } else {\n          vnodeDom.removeAttribute(name);\n        }\n      }\n    }\n  }\n\n  for (const name in vnodeProps) {\n    if (directives[name]) {\n      if (directives[name](vnodeProps[name], newVnode, oldVnode?.props) === false) {\n        break;\n      }\n      continue;\n    }\n\n    if (!reservedProps.has(name)) {\n      sharedSetAttribute(name, vnodeProps[name], newVnode);\n    }\n  }\n}\n\nexport function createElement(tag: string, isSVG: boolean): DomElement {\n  return isSVG\n    ? document.createElementNS(\"http://www.w3.org/2000/svg\", tag)\n    : (document.createElement(tag) as DomElement);\n}\n\nfunction flatTree(newVnode: VnodeWithDom) {\n  current.vnode = newVnode;\n\n  let i = 0;\n  let children: Children;\n\n  if (\"v-for\" in newVnode.props === false) {\n    children = [...newVnode.children];\n  } else {\n    children = [];\n    const set = newVnode.props[\"v-for\"];\n    const l = set.length;\n    const callback = newVnode.children[0];\n\n    if (typeof callback !== \"function\") {\n      console.warn(\"v-for directive must have a callback function as children\");\n      return children;\n    }\n\n    for (let i = 0; i < l; i++) {\n      children[i] = callback(set[i], i);\n    }\n  }\n\n  while (i < children.length) {\n    const newChild = children[i];\n\n    if (newChild == null) {\n      children.splice(i, 1);\n      continue;\n    }\n\n    if (Array.isArray(newChild)) {\n      children.splice(i, 1, ...newChild);\n      continue;\n    }\n\n    if (newChild instanceof Vnode) {\n      newChild.props = newChild.props || {};\n      newChild.isSVG = newVnode.isSVG || newChild.tag === \"svg\";\n\n      if (typeof newChild.tag !== \"string\") {\n        const component = (current.component = newChild.tag);\n\n        children[i] = (isPOJOComponent(component) ? component.view : component).bind(component)(\n          newChild.props,\n          newChild.children\n        );\n\n        continue;\n      }\n\n      newVnode.hasKeys = newVnode.hasKeys || \"key\" in newChild.props;\n    }\n\n    i++;\n  }\n\n  return children;\n}\n\nfunction processNewChild(newChild: VnodeWithDom, parentVnode: VnodeWithDom, oldDom?: DomElement) {\n  if (oldDom) {\n    newChild.dom = createElement(newChild.tag, newChild.isSVG as boolean);\n    parentVnode.dom.replaceChild(newChild.dom, oldDom);\n  } else {\n    newChild.dom = parentVnode.dom.appendChild(createElement(newChild.tag, newChild.isSVG as boolean));\n  }\n  updateAttributes(newChild);\n  if (\"v-text\" in newChild.props) {\n    newChild.dom.textContent = newChild.props[\"v-text\"];\n    return;\n  }\n\n  const children = flatTree(newChild);\n  if (children.length === 0) {\n    newChild.dom.textContent = \"\";\n    return;\n  }\n\n  for (let i = 0, l = children.length; i < l; i++) {\n    if (children[i] instanceof Vnode === false) {\n      newChild.dom.appendChild(document.createTextNode(children[i]));\n      continue;\n    }\n    processNewChild(children[i] as VnodeWithDom, newChild);\n  }\n}\n\n// eslint-disable-next-line complexity\nfunction patch(newVnode: VnodeWithDom): void {\n  const children = flatTree(newVnode);\n  const dom = newVnode.dom;\n\n  if (children.length === 0) {\n    if (dom.childNodes.length) {\n      dom.textContent = \"\";\n    }\n    return;\n  }\n\n  const childNodes = dom.childNodes as unknown as DomElement[];\n  const oldChildrenLength = childNodes.length;\n  const childrenLength = children.length;\n  if (oldChildrenLength === 0) {\n    for (let i = 0; i < childrenLength; i++) {\n      const newChild = children[i] as VnodeWithDom;\n      if (newChild instanceof Vnode === false) {\n        dom.appendChild(document.createTextNode(newChild));\n        continue;\n      }\n      processNewChild(newChild, newVnode);\n    }\n    return;\n  }\n\n  const oldTree = [...Array.from(childNodes)] as unknown as DomElement[];\n  const oldKeyedList: Record<string, number> = {};\n\n  if (newVnode.hasKeys) {\n    for (let i = 0, l = oldTree.length; i < l; i++) {\n      const oldVnode = oldTree[i].vnode as VnodeWithDom;\n      oldKeyedList[!oldVnode || \"key\" in oldVnode.props === false ? i : (oldVnode.props.key as string)] = i;\n    }\n  }\n\n  for (let i = 0, l = children.length; i < l; i++) {\n    const newChild = children[i] as VnodeWithDom;\n\n    if (newChild instanceof Vnode === false) {\n      const oldChild = oldTree[i];\n      if (!oldChild) {\n        dom.appendChild(document.createTextNode(newChild));\n        continue;\n      }\n\n      if (oldChild.nodeType !== 3) {\n        dom.replaceChild(document.createTextNode(newChild), oldChild);\n        continue;\n      }\n\n      // eslint-disable-next-line eqeqeq\n      if (oldChild.nodeValue != newChild) {\n        oldChild.nodeValue = newChild;\n      }\n      continue;\n    }\n\n    const oldChild = oldTree[newVnode.hasKeys ? oldKeyedList[(newChild.props.key as any) || i] : i] as DomElement;\n\n    if (!oldChild || newChild.tag !== oldChild.nodeName.toLowerCase()) {\n      processNewChild(newChild, newVnode, childNodes[i] as DomElement);\n      continue;\n    }\n\n    newChild.dom = oldChild;\n    const currentChild = childNodes[i];\n    if (!currentChild) {\n      dom.appendChild(oldChild);\n    } else if (currentChild !== oldChild) {\n      dom.replaceChild(oldChild, currentChild);\n    }\n\n    if (\"v-keep\" in newChild.props && oldChild.vnode) {\n      if (oldChild.vnode.props[\"v-keep\"] === newChild.props[\"v-keep\"]) {\n        continue;\n      }\n\n      const oldProps = childNodes[i + 1]?.vnode?.props;\n      if (oldProps && \"key\" in oldProps === false && oldProps[\"v-keep\"] === newChild.props[\"v-keep\"]) {\n        oldChild.remove();\n        oldTree.splice(i, 1);\n        continue;\n      }\n    }\n\n    updateAttributes(newChild as VnodeWithDom, oldChild.vnode);\n\n    if (\"v-text\" in newChild.props) {\n      // eslint-disable-next-line eqeqeq\n      if (oldChild.textContent != newChild.props[\"v-text\"]) {\n        oldChild.textContent = newChild.props[\"v-text\"];\n      }\n      continue;\n    }\n    // eslint-disable-next-line no-use-before-define\n    patch(newChild as VnodeWithDom);\n  }\n\n  for (let i = childNodes.length, l = children.length; i > l; i--) {\n    childNodes[i - 1].remove();\n  }\n}\n\nexport function updateVnode(vnode: VnodeWithDom): string | void {\n  callSet(onCleanupSet);\n  vnode.props = vnode.props || {};\n  patch(vnode);\n  callSet(isMounted ? onUpdateSet : onMountSet);\n  isMounted = true;\n  current.vnode = null;\n  current.component = null;\n}\n\nexport function update(): string {\n  if (mainVnode) {\n    mainVnode.children = [mainComponent];\n    updateVnode(mainVnode as VnodeWithDom);\n    if (isNodeJs) {\n      return mainVnode.dom.innerHTML;\n    }\n  }\n  return \"\";\n}\n\nlet debouncedUpdateTimeout: any;\nconst debouncedUpdateMethod = isNodeJs ? update : () => requestAnimationFrame(update);\n\nexport function debouncedUpdate(timeout = 42) {\n  if (current.event) {\n    current.event.preventDefault();\n  }\n  clearTimeout(debouncedUpdateTimeout);\n  debouncedUpdateTimeout = setTimeout(debouncedUpdateMethod, timeout);\n}\n\nexport function unmount() {\n  if (mainVnode) {\n    mainComponent = v(() => null, {}) as VnodeComponentInterface;\n    const result = update();\n    callSet(onUnmountSet);\n    for (const name in eventListenerNames) {\n      mainVnode.dom.removeEventListener(name.slice(2).toLowerCase(), eventListener);\n      Reflect.deleteProperty(eventListenerNames, name);\n    }\n\n    mainComponent = null;\n    mainVnode = null;\n    isMounted = false;\n    current.vnode = null;\n    current.component = null;\n    current.event = null;\n    return result;\n  }\n\n  return \"\";\n}\n\nexport function mount(dom: string | DomElement, component: ValyrianComponent | VnodeComponentInterface | any) {\n  const container =\n    typeof dom === \"string\" ? (isNodeJs ? createElement(dom, dom === \"svg\") : document.querySelector(dom)) : dom;\n\n  if (isComponent(component)) {\n    mainComponent = v(component, {}, []) as VnodeComponentInterface;\n  } else if (isVnodeComponent(component)) {\n    mainComponent = component;\n  } else {\n    mainComponent = v(() => component, {}, []) as VnodeComponentInterface;\n  }\n\n  mainVnode = hidrateDomToVnode(container) as VnodeWithDom;\n  return update();\n}\n"],"mappings":"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"}