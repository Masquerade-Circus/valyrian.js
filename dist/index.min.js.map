//# sourceMappingURL=data:application/json;charset=utf-8;base64,{"version":3,"names":["current","onCleanupList","onMountList","onUpdateList","onUnmountList","emptyComponent","eventListenerNames","eventListener","e","dom","target","name","type","defaultPrevented","v","update","parentNode","reservedProps","key","state","oncreate","onupdate","onremove","shouldupdate","createDomElement","tag","isSVG","document","createElementNS","createElement","Vnode","props","children","this","VnodeText","nodeValue","VnodeComponent","component","domToVnode","i","childNodes","length","childDom","nodeType","push","vnode","attributes","attr","nodeName","tagName","toLowerCase","tagOrComponent","callCallbackList","list","sharedSetAttribute","prop","newVnode","oldVnode","directives","value","mainVnode","addEventListener","slice","removeAttribute","setAttribute","setAttributes","fragment","vnodes","trust","htmlString","div","innerHTML","trim","map","call","item","isVnode","object","isVnodeComponent","isValyrianComponent","Boolean","isComponent","onCleanup","callback","indexOf","onUnmount","onMount","onUpdate","callRemove","l","patch","newParentVnode","oldParentVnode","oldTree","newTree","oldTreeLength","newTreeLength","oldKeyedList","newKeyedList","childVnode","oldChildVnode","shouldPatch","isMounted","replaceChild","appendChild","removeChild","splice","Array","isArray","view","bind","String","createTextNode","textContent","oldMainVnode","newMainVnode","isNodeJs","unmount","result","mount","container","mainContainer","querySelectorAll","plugins","Map","use","plugin","options","has","get","set","hideDirective","test","bool","oldnode","newdom","style","display","classes","classList","toggle","html","model","property","event","handler","val","idx","multiple","ctrlKey","forEach","child","join","selected","directive","fullName","process","versions","node"],"sources":["../lib/index.ts"],"sourcesContent":["/* eslint-disable sonarjs/cognitive-complexity */\n/* eslint-disable complexity */\n\n/// <reference path=\"interfaces.ts\" />\n\nimport {\n  Children,\n  Component,\n  Current,\n  Directive,\n  Directives,\n  DomElement,\n  Plugin,\n  Props,\n  Valyrian,\n  ValyrianComponent,\n  VnodeComponentInterface,\n  VnodeInterface,\n  VnodeTextInterface,\n  VnodeWithDom\n} from \"Valyrian\";\n\nconst current: Current = {};\nconst onCleanupList: Function[] = [];\nconst onMountList: Function[] = [];\nconst onUpdateList: Function[] = [];\nconst onUnmountList: Function[] = [];\nconst emptyComponent: Component = () => \"\";\n\nconst eventListenerNames: Record<string, true> = {};\nfunction eventListener(e: Event) {\n  let dom = e.target as DomElement;\n  let name = `v-on${e.type}`;\n  while (dom) {\n    if (dom[name]) {\n      dom[name](e, dom);\n      if (!e.defaultPrevented) {\n        // eslint-disable-next-line no-use-before-define\n        v.update();\n      }\n      return;\n    }\n    dom = dom.parentNode as DomElement;\n  }\n}\n\nconst reservedProps: Record<string, true> = {\n  key: true,\n  state: true,\n  oncreate: true,\n  onupdate: true,\n  onremove: true,\n  shouldupdate: true,\n  \"v-once\": true,\n\n  // Built in directives\n  \"v-if\": true,\n  \"v-unless\": true,\n  \"v-for\": true,\n  \"v-show\": true,\n  \"v-class\": true,\n  \"v-html\": true,\n  \"v-model\": true\n};\n\nfunction createDomElement(tag: string, isSVG: boolean = false): DomElement {\n  return isSVG ? document.createElementNS(\"http://www.w3.org/2000/svg\", tag) : document.createElement(tag);\n}\n\nexport const Vnode = function Vnode(this: VnodeInterface, tag: string, props: Props, children: Children) {\n  this.tag = tag;\n  this.props = props;\n  this.children = children;\n} as unknown as VnodeInterface;\n\nexport const VnodeText = function VnodeText(this: VnodeTextInterface, nodeValue: string) {\n  this.nodeValue = nodeValue;\n} as unknown as VnodeTextInterface;\n\nexport const VnodeComponent = function VnodeComponent(\n  this: VnodeComponentInterface,\n  component: Component | ValyrianComponent,\n  props: Props,\n  children: Children\n) {\n  this.component = component;\n  this.props = props;\n  this.children = children;\n} as unknown as VnodeComponentInterface;\n\n// Transforms a DOM node to a VNode\nfunction domToVnode(dom: any): VnodeWithDom {\n  let children = [];\n  for (let i = 0; i < dom.childNodes.length; i++) {\n    let childDom = dom.childNodes[i];\n    if (childDom.nodeType === 3) {\n      let vnode = new VnodeText(childDom.nodeValue);\n      vnode.dom = childDom;\n      children.push(vnode);\n      continue;\n    }\n\n    if (childDom.nodeType === 1) {\n      children.push(domToVnode(childDom));\n    }\n  }\n\n  let props: Props = {};\n  for (let i = 0; i < dom.attributes.length; i++) {\n    let attr = dom.attributes[i];\n    props[attr.nodeName] = attr.nodeValue;\n  }\n\n  let vnode = new Vnode(dom.tagName.toLowerCase(), props, children);\n  vnode.dom = dom;\n  return vnode as VnodeWithDom;\n}\n\nexport const v: Valyrian = (tagOrComponent, props, ...children) => {\n  if (typeof tagOrComponent === \"string\") {\n    return new Vnode(tagOrComponent, props || {}, children);\n  }\n\n  return new VnodeComponent(tagOrComponent, props || {}, children);\n};\n\nv.fragment = (props: Props, ...vnodes: Children) => {\n  return vnodes;\n};\n\nv.trust = (htmlString: string) => {\n  let div = createDomElement(\"div\");\n  div.innerHTML = htmlString.trim();\n\n  return [].map.call(div.childNodes, (item) => domToVnode(item)) as VnodeWithDom[];\n};\n\nv.isVnode = (object?: unknown | VnodeInterface): object is VnodeInterface => {\n  return object instanceof Vnode;\n};\n\nv.isVnodeComponent = (object?: unknown | VnodeComponentInterface): object is VnodeComponentInterface => {\n  return object instanceof VnodeComponent;\n};\n\nv.isValyrianComponent = (component?: unknown | ValyrianComponent): component is ValyrianComponent => {\n  return Boolean(component && typeof component === \"object\" && \"view\" in component);\n};\n\nv.isComponent = (component?: unknown | ValyrianComponent): component is ValyrianComponent => {\n  return Boolean((component && typeof component === \"function\") || v.isValyrianComponent(component) || v.isVnodeComponent(component));\n};\n\nv.onCleanup = (callback: Function): void => {\n  if (onCleanupList.indexOf(callback) === -1) {\n    onCleanupList.push(callback);\n  }\n};\nv.onUnmount = (callback: Function): void => {\n  if (onUnmountList.indexOf(callback) === -1) {\n    onUnmountList.push(callback);\n  }\n};\nv.onMount = (callback: Function): void => {\n  if (onMountList.indexOf(callback) === -1) {\n    onMountList.push(callback);\n  }\n};\nv.onUpdate = (callback: Function): void => {\n  if (onUpdateList.indexOf(callback) === -1) {\n    onUpdateList.push(callback);\n  }\n};\n\nfunction callCallbackList(list: Function[]): void {\n  for (let i = 0; i < list.length; i++) {\n    list[i]();\n  }\n  list.length = 0;\n}\n\nfunction sharedSetAttribute(prop: string, newVnode: VnodeWithDom, oldVnode?: VnodeWithDom): void | boolean {\n  if (reservedProps[prop]) {\n    // eslint-disable-next-line no-use-before-define\n    if (directives[prop]) {\n      // eslint-disable-next-line no-use-before-define\n      return directives[prop](newVnode.props[prop], newVnode, oldVnode);\n    }\n    return;\n  }\n\n  let value = newVnode.props[prop];\n  let dom = newVnode.dom;\n\n  if (typeof value === \"function\") {\n    if (!eventListenerNames[prop]) {\n      (v.mainVnode as VnodeWithDom).dom.addEventListener(prop.slice(2), eventListener);\n      eventListenerNames[prop] = true;\n    }\n    dom[`v-${prop}`] = value;\n    return;\n  }\n\n  if (prop in dom && !newVnode.isSVG) {\n    // eslint-disable-next-line eqeqeq\n    if (dom[prop] != value) {\n      dom[prop] = value;\n    }\n\n    return;\n  }\n\n  if (!oldVnode || value !== oldVnode.props[prop]) {\n    if (value === false) {\n      dom.removeAttribute(prop);\n    } else {\n      dom.setAttribute(prop, value);\n    }\n  }\n}\n\nfunction setAttribute(name: string, value: any, vnode: VnodeWithDom, oldVnode?: VnodeWithDom): void {\n  vnode.props[name] = value;\n  sharedSetAttribute(name, vnode as VnodeWithDom, oldVnode);\n}\n\nfunction setAttributes(newVnode: VnodeWithDom, oldVnode?: VnodeWithDom): void {\n  for (let prop in newVnode.props) {\n    if (sharedSetAttribute(prop, newVnode, oldVnode) === false) {\n      return;\n    }\n  }\n\n  if (oldVnode) {\n    for (let name in oldVnode.props) {\n      if (name in newVnode.props === false && typeof oldVnode.props[name] !== \"function\" && !reservedProps[name]) {\n        if (name in newVnode.dom && newVnode.isSVG === false) {\n          newVnode.dom[name] = null;\n        } else {\n          newVnode.dom.removeAttribute(name);\n        }\n      }\n    }\n  }\n}\n\nconst callRemove = (vnode: VnodeInterface) => {\n  for (let i = 0, l = vnode.children.length; i < l; i++) {\n    vnode.children[i] instanceof Vnode && callRemove(vnode.children[i]);\n  }\n\n  vnode.props.onremove && vnode.props.onremove(vnode);\n};\n\n// Patch a DOM node with a new VNode tree\nv.patch = (newParentVnode: VnodeWithDom, oldParentVnode?: VnodeWithDom): void => {\n  let oldTree = oldParentVnode?.children || [];\n  let newTree = newParentVnode.children;\n  let oldTreeLength = oldTree.length;\n\n  current.vnode = newParentVnode;\n  current.oldVnode = oldParentVnode;\n\n  if (newTree[0] instanceof Vnode && oldTree[0] instanceof Vnode && \"key\" in newTree[0].props && \"key\" in oldTree[0].props) {\n    let newTreeLength = newTree.length;\n    let oldKeyedList: { [key: string]: number } = {};\n    for (let i = 0; i < oldTreeLength; i++) {\n      oldKeyedList[oldTree[i].props.key] = i;\n    }\n\n    let newKeyedList: { [key: string]: number } = {};\n    for (let i = 0; i < newTreeLength; i++) {\n      newKeyedList[newTree[i].props.key] = i;\n    }\n\n    for (let i = 0; i < newTreeLength; i++) {\n      let childVnode = newTree[i];\n      let oldChildVnode = oldTree[oldKeyedList[childVnode.props.key]];\n      let shouldPatch = true;\n\n      if (oldChildVnode) {\n        childVnode.dom = oldChildVnode.dom;\n        if (childVnode.props[\"v-once\"] || (childVnode.props.shouldupdate && childVnode.props.shouldupdate(childVnode, oldChildVnode) === false)) {\n          childVnode.children = oldChildVnode.children;\n          shouldPatch = false;\n        } else {\n          setAttributes(childVnode, oldChildVnode);\n          if (v.isMounted) {\n            childVnode.props.onupdate && childVnode.props.onupdate(childVnode, oldChildVnode);\n          } else {\n            childVnode.props.oncreate && childVnode.props.oncreate(childVnode);\n          }\n        }\n      } else {\n        childVnode.dom = createDomElement(childVnode.tag, childVnode.isSVG);\n        setAttributes(childVnode);\n        childVnode.props.oncreate && childVnode.props.oncreate(childVnode);\n      }\n\n      if (!newParentVnode.dom.childNodes[i]) {\n        newParentVnode.dom.appendChild(childVnode.dom);\n      } else if (newParentVnode.dom.childNodes[i] !== childVnode.dom) {\n        oldTree[i] && !newKeyedList[oldTree[i].props.key] && callRemove(oldTree[i]);\n        newParentVnode.dom.replaceChild(childVnode.dom, newParentVnode.dom.childNodes[i]);\n      }\n\n      shouldPatch && v.patch(childVnode, oldChildVnode);\n    }\n\n    // For the rest of the children, we should remove them\n    for (let i = newTreeLength; i < oldTreeLength; i++) {\n      if (!newKeyedList[oldTree[i].props.key]) {\n        let oldChildVnode = oldTree[i];\n        callRemove(oldChildVnode);\n        oldChildVnode.dom.parentNode && oldChildVnode.dom.parentNode.removeChild(oldChildVnode.dom);\n      }\n    }\n    return;\n  }\n\n  // Flat newTree\n  for (let i = 0; i < newTree.length; i++) {\n    let childVnode = newTree[i];\n\n    if (childVnode instanceof Vnode) {\n      let oldChildVnode = oldTree[i];\n      childVnode.isSVG = newParentVnode.isSVG || childVnode.tag === \"svg\";\n\n      if (!oldChildVnode) {\n        childVnode.dom = createDomElement(childVnode.tag, childVnode.isSVG);\n        setAttributes(childVnode as VnodeWithDom);\n        childVnode.props.oncreate && childVnode.props.oncreate(childVnode);\n        v.patch(childVnode as VnodeWithDom);\n        newParentVnode.dom.appendChild(childVnode.dom);\n        continue;\n      }\n\n      if (childVnode.tag === oldChildVnode.tag) {\n        childVnode.dom = oldChildVnode.dom;\n\n        if (childVnode.props[\"v-once\"] || (childVnode.props.shouldupdate && childVnode.props.shouldupdate(childVnode, oldChildVnode) === false)) {\n          childVnode.children = oldChildVnode.children;\n          continue;\n        }\n\n        setAttributes(childVnode as VnodeWithDom, oldChildVnode);\n        if (v.isMounted) {\n          childVnode.props.onupdate && childVnode.props.onupdate(childVnode, oldChildVnode);\n        } else {\n          childVnode.props.oncreate && childVnode.props.oncreate(childVnode);\n        }\n        v.patch(childVnode as VnodeWithDom, oldChildVnode);\n        continue;\n      }\n\n      childVnode.dom = createDomElement(childVnode.tag, childVnode.isSVG);\n      setAttributes(childVnode as VnodeWithDom);\n      childVnode.props.oncreate && childVnode.props.oncreate(childVnode);\n      oldChildVnode instanceof Vnode && callRemove(oldChildVnode);\n      newParentVnode.dom.replaceChild(childVnode.dom, oldChildVnode.dom);\n      v.patch(childVnode as VnodeWithDom);\n      continue;\n    }\n\n    if (childVnode === null || childVnode === undefined) {\n      newTree.splice(i--, 1);\n      continue;\n    }\n\n    if (Array.isArray(childVnode)) {\n      newTree.splice(i--, 1, ...childVnode);\n      continue;\n    }\n\n    if (childVnode instanceof VnodeComponent) {\n      current.component = childVnode.component;\n      newTree.splice(\n        i--,\n        1,\n        (childVnode.component.view ? childVnode.component.view.bind(childVnode.component) : childVnode.component.bind(childVnode.component))(\n          childVnode.props,\n          ...childVnode.children\n        )\n      );\n      continue;\n    }\n\n    if (childVnode instanceof VnodeText === false) {\n      newTree[i] = childVnode = new VnodeText(String(childVnode));\n    }\n\n    if (newTree[i - 1] instanceof VnodeText) {\n      newTree[i - 1].dom.nodeValue += childVnode.nodeValue;\n      newTree[i - 1].nodeValue += childVnode.nodeValue;\n      newTree.splice(i--, 1);\n      continue;\n    }\n\n    let oldChildVnode = oldTree[i];\n\n    if (!oldChildVnode) {\n      childVnode.dom = document.createTextNode(childVnode.nodeValue);\n      newParentVnode.dom.appendChild(childVnode.dom);\n      continue;\n    }\n\n    if (oldChildVnode instanceof VnodeText) {\n      childVnode.dom = oldChildVnode.dom;\n      // eslint-disable-next-line eqeqeq\n      if (childVnode.nodeValue != childVnode.dom.nodeValue) {\n        childVnode.dom.nodeValue = childVnode.nodeValue;\n      }\n      continue;\n    }\n\n    childVnode.dom = document.createTextNode(childVnode.nodeValue);\n    callRemove(oldChildVnode);\n    newParentVnode.dom.replaceChild(childVnode.dom, oldChildVnode.dom);\n  }\n\n  let newTreeLength = newTree.length;\n\n  // If new tree is empty, fast remove all old nodes\n  if (newTreeLength === 0) {\n    for (let i = oldTreeLength; i--; ) {\n      oldTree[i] instanceof Vnode && callRemove(oldTree[i]);\n    }\n    newParentVnode.dom.textContent = \"\";\n    return;\n  }\n\n  // For the rest of the children, we should remove them\n  for (let i = oldTreeLength - 1; i >= newTreeLength; --i) {\n    oldTree[i] instanceof Vnode && callRemove(oldTree[i]);\n    oldTree[i].dom.parentNode && oldTree[i].dom.parentNode.removeChild(oldTree[i].dom);\n  }\n};\n\nv.update = () => {\n  if (v.mainVnode) {\n    onCleanupList.length && callCallbackList(onCleanupList);\n    let oldMainVnode = v.mainVnode;\n    let newMainVnode = new Vnode(oldMainVnode.tag, oldMainVnode.props, [\n      v.component instanceof VnodeComponent ? v.component : v(v.component as Component, null)\n    ]) as VnodeWithDom;\n    newMainVnode.dom = oldMainVnode.dom;\n    newMainVnode.isSVG = oldMainVnode.isSVG;\n    v.mainVnode = newMainVnode;\n    v.patch(newMainVnode, oldMainVnode);\n    if (v.isMounted === false) {\n      onMountList.length && callCallbackList(onMountList);\n      v.isMounted = true;\n    } else {\n      onUpdateList.length && callCallbackList(onUpdateList);\n    }\n    if (v.isNodeJs) {\n      return (newMainVnode.dom as HTMLElement).innerHTML;\n    }\n  }\n};\n\nv.unmount = () => {\n  if (v.mainVnode) {\n    onCleanupList.length && callCallbackList(onCleanupList);\n    onUnmountList.length && callCallbackList(onUnmountList);\n    v.component = emptyComponent;\n    let result = v.update();\n    v.mainVnode = null;\n    v.component = null;\n    v.isMounted = false;\n    return result;\n  }\n};\n\nv.mount = (container, component) => {\n  if (v.isMounted) {\n    v.unmount();\n  }\n\n  let mainContainer;\n  if (v.isNodeJs) {\n    mainContainer = typeof container === \"string\" ? createDomElement(container, container === \"svg\") : container;\n  } else {\n    mainContainer = typeof container === \"string\" ? (document.querySelectorAll(container)[0] as DomElement) : container;\n  }\n\n  v.mainVnode = domToVnode(mainContainer);\n  v.mainVnode.isSVG = v.mainVnode.tag === \"svg\";\n  v.component = component;\n\n  return v.update();\n};\n\nconst plugins = new Map<Plugin, any>();\n\nv.use = (plugin: Plugin, options?: Record<string | number | symbol, any>): void | any => {\n  if (plugins.has(plugin)) {\n    return plugins.get(plugin);\n  }\n\n  let result = plugin(v, options);\n  plugins.set(plugin, result);\n  return result;\n};\n\nlet hideDirective = (test: boolean) => (bool: boolean, vnode: VnodeInterface, oldnode?: VnodeInterface | VnodeTextInterface) => {\n  let value = test ? bool : !bool;\n  if (value) {\n    let newdom = document.createTextNode(\"\");\n    if (oldnode && oldnode.dom && oldnode.dom.parentNode) {\n      oldnode instanceof Vnode && callRemove(oldnode);\n      oldnode.dom.parentNode.replaceChild(newdom, oldnode.dom);\n    }\n    vnode.tag = \"#text\";\n    vnode.children = [];\n    vnode.props = {};\n    vnode.dom = newdom as unknown as DomElement;\n    return false;\n  }\n};\n\nconst directives: Directives = {\n  \"v-if\": hideDirective(false),\n  \"v-unless\": hideDirective(true),\n  \"v-for\": (set: unknown[], vnode: VnodeWithDom) => {\n    vnode.children = set.map(vnode.children[0]);\n  },\n  \"v-show\": (bool: boolean, vnode: VnodeWithDom) => {\n    (\n      vnode.dom as unknown as {\n        style: { display: string };\n      }\n    ).style.display = bool ? \"\" : \"none\";\n  },\n  \"v-class\": (classes: { [x: string]: boolean }, vnode: VnodeWithDom) => {\n    for (let name in classes) {\n      (vnode.dom as DomElement).classList.toggle(name, classes[name]);\n    }\n  },\n  \"v-html\": (html: string, vnode: VnodeWithDom) => {\n    vnode.children = [v.trust(html)];\n  },\n  \"v-model\": ([model, property, event]: any[], vnode: VnodeWithDom, oldVnode?: VnodeWithDom) => {\n    let value;\n    let handler;\n    if (vnode.tag === \"input\") {\n      event = event || \"oninput\";\n      switch (vnode.props.type) {\n        case \"checkbox\": {\n          if (Array.isArray(model[property])) {\n            handler = (e: Event) => {\n              let val = (e.target as DomElement & Record<string, any>).value;\n              let idx = model[property].indexOf(val);\n              if (idx === -1) {\n                model[property].push(val);\n              } else {\n                model[property].splice(idx, 1);\n              }\n            };\n            value = model[property].indexOf(vnode.dom.value) !== -1;\n          } else if (\"value\" in vnode.props) {\n            handler = () => {\n              if (model[property] === vnode.props.value) {\n                model[property] = null;\n              } else {\n                model[property] = vnode.props.value;\n              }\n            };\n            value = model[property] === vnode.props.value;\n          } else {\n            handler = () => (model[property] = !model[property]);\n            value = model[property];\n          }\n          setAttribute(\"checked\", value, vnode, oldVnode);\n          break;\n        }\n        case \"radio\": {\n          setAttribute(\"checked\", model[property] === vnode.dom.value, vnode, oldVnode);\n          break;\n        }\n        default: {\n          setAttribute(\"value\", model[property], vnode, oldVnode);\n        }\n      }\n    } else if (vnode.tag === \"select\") {\n      event = event || \"onclick\";\n      if (vnode.props.multiple) {\n        handler = (e: Event & Record<string, any>) => {\n          let val = (e.target as DomElement & Record<string, any>).value;\n          if (e.ctrlKey) {\n            let idx = model[property].indexOf(val);\n            if (idx === -1) {\n              model[property].push(val);\n            } else {\n              model[property].splice(idx, 1);\n            }\n          } else {\n            model[property].splice(0, model[property].length);\n            model[property].push(val);\n          }\n        };\n        vnode.children.forEach((child: VnodeInterface) => {\n          if (child.tag === \"option\") {\n            let value = \"value\" in child.props ? child.props.value : child.children.join(\"\").trim();\n            child.props.selected = model[property].indexOf(value) !== -1;\n          }\n        });\n      } else {\n        vnode.children.forEach((child: VnodeInterface) => {\n          if (child.tag === \"option\") {\n            let value = \"value\" in child.props ? child.props.value : child.children.join(\"\").trim();\n            child.props.selected = value === model[property];\n          }\n        });\n      }\n    } else if (vnode.tag === \"textarea\") {\n      event = event || \"oninput\";\n      vnode.children = [model[property]];\n    }\n\n    if (!vnode.props[event]) {\n      if (!handler) {\n        handler = (e: Event) => (model[property] = (e.target as DomElement & Record<string, any>).value);\n      }\n      setAttribute(event, handler, vnode, oldVnode);\n    }\n  }\n};\n\nv.directive = (name: string, directive: Directive) => {\n  let fullName = `v-${name}`;\n  directives[fullName] = directive;\n  reservedProps[fullName] = true;\n};\n\nv.isNodeJs = Boolean(typeof process !== \"undefined\" && process.versions && process.versions.node);\nv.isMounted = false;\n\nv.component = null;\nv.mainVnode = null;\n\nv.directives = directives;\nv.reservedProps = reservedProps;\nv.current = current;\n\nv.setAttribute = setAttribute;\n"],"mappings":"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"}