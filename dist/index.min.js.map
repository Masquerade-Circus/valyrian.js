//# sourceMappingURL=data:application/json;charset=utf-8;base64,{"version":3,"sources":["../lib/index.ts"],"names":["Vnode","tag","props","children","this","isComponent","component","isVnodeComponent","vnode","isNodeJs","Boolean","process","versions","node","createDomElement","isSVG","document","createElementNS","createElement","domToVnode","dom","v","tagName","toLowerCase","Array","from","childNodes","filter","child","nodeType","map","text","nodeValue","String","forEach","call","attributes","prop","nodeName","trust","htmlString","div","innerHTML","trim","item","ValyrianSymbol","Symbol","callCleanup","valyrianApp","i","onCleanup","length","update","current","app","oldVnode","mainVnode","patch","isMounted","onMount","callMount","onUpdate","callUpdate","unmount","onUnmount","callUnmount","Reflect","deleteProperty","emptyVnode","onremove","sharedUpdateProperty","value","reservedProps","directives","eventListenerNames","container","addEventListener","slice","eventListener","removeAttribute","setAttribute","setProperty","name","updateProperties","newVnode","newTree","childVnode","result","view","splice","isArray","flatTree","oldTree","oldTreeLength","newTreeLength","oldKeyedList","reduce","acc","key","newKeyedList","oldChildVnode","shouldPatch","shouldupdate","onupdate","oncreate","appendChild","replaceChild","parentNode","removeChild","patchKeyedTree","newChildVnode","createTextNode","patchNormalTree","textContent","hideDirective","test","bool","newdom","builtInDirectives","set","style","display","classes","classList","toggle","html","model","property","event","handler","type","e","val","target","idx","indexOf","push","multiple","ctrlKey","value2","join","selected","tagOrComponent","fragment","state","global","window","directive2","fullName","vnodeComponent","appContainer","querySelectorAll","Error","defaultPrevented","callback"],"mappings":"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","sourcesContent":["/*** Vnode ***/\n\nimport {\n  Children,\n  Current,\n  Directive,\n  DomElement,\n  IVnode,\n  MountedValyrianApp,\n  Props,\n  Valyrian,\n  ValyrianApp,\n  ValyrianComponent,\n  VnodeComponent,\n  VnodeWithDom\n} from \"./interfaces\";\n\nexport const Vnode = function Vnode(this: IVnode, tag: string, props: Props, children: Children) {\n  this.props = props;\n  this.children = children;\n  this.tag = tag;\n} as unknown as IVnode;\n\nexport function isVnode(component?: unknown): component is IVnode {\n  return component instanceof Vnode;\n}\n\nexport function isComponent(component?: unknown | ValyrianComponent): component is ValyrianComponent {\n  return typeof component === \"function\" || (typeof component === \"object\" && component !== null && \"view\" in component);\n}\n\nexport function isVnodeComponent(vnode?: unknown): vnode is VnodeComponent {\n  return vnode instanceof Vnode && vnode.tag === \"__component__\";\n}\n\n/*** Util ***/\n\nexport const isNodeJs = Boolean(typeof process !== \"undefined\" && process.versions && process.versions.node);\n\nfunction createDomElement(tag: string, isSVG: boolean = false) {\n  return isSVG ? document.createElementNS(\"http://www.w3.org/2000/svg\", tag) : document.createElement(tag);\n}\n\nfunction domToVnode(dom: DomElement): VnodeWithDom {\n  let vnode = v(\n    dom.tagName.toLowerCase(),\n    {},\n    ...Array.from(dom.childNodes)\n      .filter((child) => (child as DomElement).nodeType === 1 || (child as DomElement).nodeType === 3)\n      .map((child) => {\n        if ((child as DomElement).nodeType === 1) {\n          return domToVnode(child as DomElement);\n        }\n\n        let text = new Vnode(\"#text\", {}, []);\n        text.nodeValue = String((child as DomElement).nodeValue);\n        text.dom = child as DomElement;\n        return text;\n      })\n  );\n  [].forEach.call(dom.attributes, (prop: Attr) => (vnode.props[prop.nodeName] = prop.nodeValue));\n  vnode.dom = dom;\n  return vnode as VnodeWithDom;\n}\n\nexport const trust = (htmlString: string) => {\n  let div = createDomElement(\"div\");\n  div.innerHTML = htmlString.trim();\n\n  return [].map.call(div.childNodes, (item) => domToVnode(item)) as IVnode[];\n};\n\n/*** Mount ***/\n\nconst ValyrianSymbol = Symbol(\"Valyrian\");\n\nexport function onCleanup(callback: Function) {\n  if (v.current.app?.onCleanup.indexOf(callback) === -1) {\n    v.current.app?.onCleanup.push(callback);\n  }\n}\n\nexport function onUnmount(callback: Function) {\n  if (v.current.app?.onUnmount.indexOf(callback) === -1) {\n    v.current.app?.onUnmount.push(callback);\n  }\n}\n\nexport function onMount(callback: Function) {\n  if (v.current.app?.onMount.indexOf(callback) === -1) {\n    v.current.app?.onMount.push(callback);\n  }\n}\n\nexport function onUpdate(callback: Function) {\n  if (v.current.app?.onUpdate.indexOf(callback) === -1) {\n    v.current.app?.onUpdate.push(callback);\n  }\n}\n\n/*\n  * Mounts a component to the DOM\n  mount('#app', () => <div>Hello world</div>); // App is a Functional Component\n  mount('#app', { view: () => <div>Hello world</div> }); // App is a POJO component with a view method\n  mount('#app', classInstance); // App is a class instance with a view method\n  mount('#app', <App><div>Hello world</div></App>); // App is a Vnode component (Vnode with tag __component__)\n*/\n\nexport function mount(container: DomElement | string, component: ValyrianComponent | IVnode) {\n  let appContainer = null;\n\n  if (isNodeJs) {\n    appContainer = typeof container === \"string\" ? createDomElement(container === \"svg\" ? \"svg\" : \"div\", container === \"svg\") : container;\n  } else {\n    appContainer = typeof container === \"string\" ? document.querySelectorAll(container)[0] : container;\n  }\n\n  if (!appContainer) {\n    throw new Error(\"Container not found\");\n  }\n\n  let vnodeComponent: VnodeComponent | IVnode;\n\n  if (isVnodeComponent(component)) {\n    vnodeComponent = component;\n  } else if (isComponent(component)) {\n    vnodeComponent = v(component, {});\n  } else {\n    throw new Error(\"Component must be a Valyrian Component or a Vnode component\");\n  }\n\n  if (component[ValyrianSymbol]) {\n    unmount(component);\n  } else {\n    component[ValyrianSymbol] = {\n      isMounted: false,\n      eventListenerNames: {},\n      onCleanup: [],\n      onMount: [],\n      onUpdate: [],\n      onUnmount: []\n    };\n    function eventListener(e: Event) {\n      let dom = e.target as DomElement & Record<string, any>;\n      let name = `v-on${e.type}`;\n      while (dom) {\n        if (dom[name]) {\n          dom[name](e, dom);\n          if (!e.defaultPrevented) {\n            update(component);\n          }\n          return;\n        }\n        dom = dom.parentNode as DomElement;\n      }\n    }\n    component[ValyrianSymbol].eventListener = eventListener;\n  }\n\n  component[ValyrianSymbol].component = vnodeComponent;\n  component[ValyrianSymbol].container = appContainer;\n  component[ValyrianSymbol].mainVnode = domToVnode(appContainer);\n  component[ValyrianSymbol].mainVnode.isSVG = component[ValyrianSymbol].tag === \"svg\";\n\n  // update\n  return update(component);\n}\n\nfunction callCleanup(valyrianApp: ValyrianApp) {\n  for (let i = 0; i < valyrianApp.onCleanup.length; i++) {\n    valyrianApp.onCleanup[i]();\n  }\n  valyrianApp.onCleanup = [];\n}\n\nfunction callUnmount(valyrianApp: ValyrianApp) {\n  for (let i = 0; i < valyrianApp.onUnmount.length; i++) {\n    valyrianApp.onUnmount[i]();\n  }\n  valyrianApp.onUnmount = [];\n}\n\nfunction callMount(valyrianApp: ValyrianApp) {\n  for (let i = 0; i < valyrianApp.onMount.length; i++) {\n    valyrianApp.onMount[i]();\n  }\n  valyrianApp.onMount = [];\n}\n\nfunction callUpdate(valyrianApp: ValyrianApp) {\n  for (let i = 0; i < valyrianApp.onUpdate.length; i++) {\n    valyrianApp.onUpdate[i]();\n  }\n  valyrianApp.onUpdate = [];\n}\n\nexport function update(component?: ValyrianComponent | IVnode) {\n  if (component && component[ValyrianSymbol]) {\n    let valyrianApp = component[ValyrianSymbol];\n    v.current.app = valyrianApp;\n    valyrianApp.onCleanup.length && callCleanup(valyrianApp);\n    let oldVnode: VnodeWithDom | null = valyrianApp.mainVnode as VnodeWithDom;\n    valyrianApp.mainVnode = new Vnode(valyrianApp.mainVnode.tag, valyrianApp.mainVnode.props, [valyrianApp.component]) as VnodeWithDom;\n    valyrianApp.mainVnode.dom = oldVnode.dom;\n    valyrianApp.mainVnode.isSVG = oldVnode.isSVG;\n    patch(valyrianApp.mainVnode, oldVnode, valyrianApp);\n    oldVnode = null;\n    if (valyrianApp.isMounted === false) {\n      valyrianApp.onMount.length && callMount(valyrianApp);\n      valyrianApp.isMounted = true;\n    } else {\n      valyrianApp.onUpdate.length && callUpdate(valyrianApp);\n    }\n\n    if (isNodeJs) {\n      return valyrianApp.mainVnode.dom.innerHTML;\n    }\n  }\n}\n\nexport function unmount(component?: ValyrianComponent | IVnode) {\n  if (!component || !component[ValyrianSymbol]) {\n    return;\n  }\n\n  let valyrianApp = component[ValyrianSymbol] as MountedValyrianApp;\n\n  if (valyrianApp.isMounted) {\n    valyrianApp.onCleanup.length && callCleanup(valyrianApp);\n    valyrianApp.onUnmount.length && callUnmount(valyrianApp);\n    let oldVnode: VnodeWithDom | null = valyrianApp.mainVnode as VnodeWithDom;\n    valyrianApp.mainVnode = new Vnode(valyrianApp.mainVnode.tag, valyrianApp.mainVnode.props, []) as VnodeWithDom;\n    valyrianApp.mainVnode.dom = oldVnode.dom;\n    valyrianApp.mainVnode.isSVG = oldVnode.isSVG;\n    patch(valyrianApp.mainVnode, oldVnode, valyrianApp);\n    oldVnode = null;\n\n    if (isNodeJs) {\n      return valyrianApp.mainVnode.dom.innerHTML;\n    }\n\n    (valyrianApp as any) = null;\n    Reflect.deleteProperty(component, ValyrianSymbol);\n  }\n}\n\nlet emptyVnode = new Vnode(\"__empty__\", {}, []);\n\nfunction onremove(vnode: IVnode) {\n  for (let i = 0; i < vnode.children.length; i++) {\n    vnode.children[i].tag !== \"#text\" && onremove(vnode.children[i]);\n  }\n\n  vnode.props.onremove && vnode.props.onremove(vnode);\n}\n\nfunction sharedUpdateProperty(prop: string, value: any, vnode: VnodeWithDom, oldVnode?: VnodeWithDom) {\n  // It is a reserved prop\n  if (v.reservedProps[prop]) {\n    // If it is a directive name call the directive\n    if (v.directives[prop]) {\n      v.directives[prop](vnode.props[prop], vnode, oldVnode);\n    }\n    return;\n  }\n\n  // It is not a reserved prop so we add it to the dom\n  if (typeof value === \"function\") {\n    let valyrianApp = v.current.app as MountedValyrianApp;\n    if (prop in valyrianApp.eventListenerNames === false) {\n      valyrianApp.eventListenerNames[prop] = true;\n      valyrianApp.container.addEventListener(prop.slice(2), valyrianApp.eventListener);\n    }\n    vnode.dom[`v-${prop}`] = value;\n    return;\n  }\n\n  if (prop in vnode.dom && vnode.isSVG === false) {\n    // eslint-disable-next-line eqeqeq\n    if (vnode.dom[prop] != value) {\n      vnode.dom[prop] = value;\n    }\n    return;\n  }\n\n  // Use set attribute\n  if (!oldVnode || oldVnode.props[prop] !== value) {\n    if (value === false) {\n      vnode.dom.removeAttribute(prop);\n    } else {\n      vnode.dom.setAttribute(prop, value);\n    }\n  }\n}\n\nexport function setProperty(name: string, value: any, vnode: VnodeWithDom, oldVnode?: VnodeWithDom) {\n  if (name in vnode.props === false) {\n    vnode.props[name] = value;\n  }\n\n  sharedUpdateProperty(name, value, vnode, oldVnode);\n}\n\nfunction updateProperties(vnode: VnodeWithDom, oldVnode?: VnodeWithDom) {\n  for (let prop in vnode.props) {\n    // We asume that we clean the props in some directive\n    if (prop in vnode.props === false) {\n      return;\n    }\n\n    sharedUpdateProperty(prop, vnode.props[prop], vnode, oldVnode);\n  }\n\n  if (oldVnode) {\n    for (let prop in oldVnode.props) {\n      if (prop in vnode.props === false && typeof oldVnode.props[prop] !== \"function\" && prop in v.reservedProps === false) {\n        if (prop in oldVnode.dom && vnode.isSVG === false) {\n          oldVnode.dom[prop] = null;\n        } else {\n          oldVnode.dom.removeAttribute(prop);\n        }\n      }\n    }\n  }\n}\n\nfunction flatTree(newVnode: IVnode): void {\n  let newTree = newVnode.children;\n  for (let i = 0; i < newTree.length; i++) {\n    let childVnode = newTree[i];\n    if (childVnode instanceof Vnode) {\n      if (childVnode.tag !== \"#text\") {\n        if (childVnode.tag === \"__component__\") {\n          let component = childVnode.component as ValyrianComponent;\n          v.current.component = component;\n          let result = (\"view\" in component ? component.view : component).call(component, childVnode.props, ...childVnode.children);\n\n          newTree.splice(i--, 1, result);\n          continue;\n        }\n        childVnode.isSVG = newVnode.isSVG || childVnode.tag === \"svg\";\n      }\n    } else if (childVnode === null || childVnode === undefined) {\n      newTree.splice(i--, 1);\n    } else if (Array.isArray(childVnode)) {\n      newTree.splice(i--, 1, ...childVnode);\n    } else {\n      if (i > 0 && newTree[i - 1].tag === \"#text\") {\n        newTree[i - 1].nodeValue += childVnode;\n        newTree.splice(i--, 1);\n      } else {\n        newTree[i] = new Vnode(\"#text\", {}, []);\n        newTree[i].nodeValue = String(childVnode);\n      }\n    }\n  }\n}\n\nfunction patchKeyedTree(\n  newVnode: VnodeWithDom,\n  newTree: (VnodeWithDom & { props: Props & { key: string } })[],\n  oldTree: (VnodeWithDom & { props: Props & { key: string } })[],\n  newTreeLength: number,\n  oldTreeLength: number,\n  valyrianApp: MountedValyrianApp\n) {\n  let oldKeyedList = oldTree.reduce((acc, vnode, i) => {\n    acc[vnode.props.key] = i;\n    return acc;\n  }, {} as { [key: string]: number });\n  let newKeyedList = newTree.reduce((acc, vnode, i) => {\n    acc[vnode.props.key] = i;\n    return acc;\n  }, {} as { [key: string]: number });\n\n  for (let i = 0; i < newTreeLength; i++) {\n    let childVnode = newTree[i];\n    let oldChildVnode = oldTree[oldKeyedList[childVnode.props.key]];\n    let shouldPatch = true;\n\n    if (oldChildVnode) {\n      childVnode.dom = oldChildVnode.dom;\n      if (\"v-once\" in childVnode.props || (childVnode.props.shouldupdate && childVnode.props.shouldupdate(childVnode, oldChildVnode) === false)) {\n        // skip this patch\n        childVnode.children = oldChildVnode.children;\n        shouldPatch = false;\n      } else {\n        updateProperties(childVnode, oldChildVnode);\n        if (valyrianApp.isMounted) {\n          childVnode.props.onupdate && childVnode.props.onupdate(childVnode, oldChildVnode);\n        } else {\n          childVnode.props.oncreate && childVnode.props.oncreate(childVnode);\n        }\n      }\n    } else {\n      childVnode.dom = createDomElement(childVnode.tag, childVnode.isSVG);\n      updateProperties(childVnode);\n      childVnode.props.oncreate && childVnode.props.oncreate(childVnode);\n    }\n\n    if (newVnode.dom.childNodes[i] === undefined) {\n      newVnode.dom.appendChild(childVnode.dom);\n    } else if (newVnode.dom.childNodes[i] !== childVnode.dom) {\n      oldTree[i] && newKeyedList[oldTree[i].props.key] === undefined && onremove(oldTree[i]);\n      newVnode.dom.replaceChild(childVnode.dom, newVnode.dom.childNodes[i]);\n    }\n\n    shouldPatch && patch(childVnode, oldChildVnode, valyrianApp);\n  }\n\n  // For the rest of the children, we should remove them\n  for (let i = newTreeLength; i < oldTreeLength; i++) {\n    if (newKeyedList[oldTree[i].props.key] === undefined) {\n      let oldChildVnode = oldTree[i];\n      onremove(oldChildVnode);\n      oldChildVnode.dom.parentNode && oldChildVnode.dom.parentNode.removeChild(oldChildVnode.dom);\n    }\n  }\n}\n\n// eslint-disable-next-line complexity\nfunction patchNormalTree(\n  newVnode: VnodeWithDom,\n  newTree: (VnodeWithDom & { props: Props & { key: string } })[],\n  oldTree: (VnodeWithDom & { props: Props & { key: string } })[],\n  newTreeLength: number,\n  oldTreeLength: number,\n  valyrianApp: MountedValyrianApp\n) {\n  // If new tree and old tree have more than one child, we should update the dom\n  for (let i = 0; i < newTreeLength; i++) {\n    let oldChildVnode = oldTree[i];\n    let newChildVnode = newTree[i];\n\n    // Old child does not exists\n    if (!oldChildVnode) {\n      // New child is a text node\n      if (newChildVnode.tag === \"#text\") {\n        newChildVnode.dom = document.createTextNode(newChildVnode.nodeValue as string) as unknown as DomElement;\n        newVnode.dom.appendChild(newChildVnode.dom);\n        continue;\n      }\n\n      // New child is a normal node\n      newChildVnode.dom = createDomElement(newChildVnode.tag, newChildVnode.isSVG);\n      updateProperties(newChildVnode);\n      newVnode.dom.appendChild(newChildVnode.dom);\n      newChildVnode.props.oncreate && newChildVnode.props.oncreate(newChildVnode);\n      patch(newChildVnode, undefined, valyrianApp);\n      continue;\n    }\n\n    // Old child exists\n    // New child is a text node\n    if (newChildVnode.tag === \"#text\") {\n      // Old child is a text node\n      if (oldChildVnode.tag === \"#text\") {\n        newChildVnode.dom = oldChildVnode.dom;\n        // eslint-disable-next-line eqeqeq\n        if (newChildVnode.dom.nodeValue != newChildVnode.nodeValue) {\n          newChildVnode.dom.nodeValue = newChildVnode.nodeValue as string;\n        }\n        continue;\n      }\n\n      // Old child is a normal node\n      newChildVnode.dom = document.createTextNode(newChildVnode.nodeValue as string) as unknown as DomElement;\n      onremove(oldChildVnode);\n      newVnode.dom.replaceChild(newChildVnode.dom, oldChildVnode.dom);\n\n      continue;\n    }\n\n    // New child is a normal node\n    // Old child is the same type as new child\n    if (oldChildVnode.tag === newChildVnode.tag) {\n      newChildVnode.dom = oldChildVnode.dom;\n      // If we have a v-once directive or a shouldupdate method that returns false, we skip the update\n      if (newChildVnode.props[\"v-once\"] || (newChildVnode.props.shouldupdate && newChildVnode.props.shouldupdate(newChildVnode, oldChildVnode) === false)) {\n        newChildVnode.children = oldChildVnode.children;\n        continue;\n      }\n\n      // We update the dom element\n      updateProperties(newChildVnode, oldChildVnode);\n      if (valyrianApp && valyrianApp.isMounted) {\n        newChildVnode.props.onupdate && newChildVnode.props.onupdate(newChildVnode, oldChildVnode);\n      } else {\n        newChildVnode.props.oncreate && newChildVnode.props.oncreate(newChildVnode);\n      }\n      patch(newChildVnode, oldChildVnode, valyrianApp);\n\n      continue;\n    }\n\n    // Old child is of a different type than new child\n    newChildVnode.dom = createDomElement(newChildVnode.tag, newChildVnode.isSVG);\n    updateProperties(newChildVnode);\n    if (oldChildVnode.tag !== \"#text\") {\n      onremove(oldChildVnode);\n    }\n    newChildVnode.props.oncreate && newChildVnode.props.oncreate(newChildVnode);\n    newVnode.dom.replaceChild(newChildVnode.dom, oldChildVnode.dom);\n    patch(newChildVnode, undefined, valyrianApp);\n  }\n\n  // For the rest of the children, we should remove them\n  for (let i = newTreeLength; i < oldTreeLength; i++) {\n    let oldChildVnode = oldTree[i];\n    if (oldChildVnode.tag !== \"#text\") {\n      onremove(oldChildVnode);\n    }\n    oldChildVnode.dom.parentNode && oldChildVnode.dom.parentNode.removeChild(oldChildVnode.dom);\n  }\n}\n\n// eslint-disable-next-line complexity\nfunction patch(newVnode: VnodeWithDom, oldVnode: VnodeWithDom = emptyVnode as VnodeWithDom, valyrianApp: MountedValyrianApp) {\n  v.current.vnode = newVnode;\n  v.current.oldVnode = oldVnode;\n\n  flatTree(newVnode);\n\n  let newTree = newVnode.children;\n  let oldTree = oldVnode.children;\n  let oldTreeLength = oldTree.length;\n  let newTreeLength = newTree.length;\n\n  // If new tree is empty, remove all old nodes\n  if (newTreeLength === 0) {\n    for (let i = 0; i < oldTreeLength; i++) {\n      onremove(oldTree[i]);\n    }\n\n    newVnode.dom.textContent = \"\";\n    return;\n  }\n\n  // If the tree is keyed list and is not first render and old tree is keyed list too\n  if (oldTreeLength && \"key\" in newTree[0].props && \"key\" in oldTree[0].props) {\n    patchKeyedTree(newVnode, newTree, oldTree, newTreeLength, oldTreeLength, valyrianApp);\n    return;\n  }\n\n  patchNormalTree(newVnode, newTree, oldTree, newTreeLength, oldTreeLength, valyrianApp);\n}\n\n/*** Directives ***/\n\nexport function directive(name: string, directive: Directive) {\n  let fullName = `v-${name}`;\n  v.directives[fullName] = directive;\n  v.reservedProps[fullName] = true;\n}\n\nfunction hideDirective(test: boolean): Directive {\n  return (bool: boolean, vnode: IVnode, oldVnode?: IVnode) => {\n    let value = test ? bool : !bool;\n    if (value) {\n      let newdom = document.createTextNode(\"\");\n      if (oldVnode && oldVnode.dom && oldVnode.dom.parentNode) {\n        oldVnode.tag !== \"#text\" && onremove(oldVnode);\n        oldVnode.dom.parentNode.replaceChild(newdom, oldVnode.dom);\n      }\n      vnode.tag = \"#text\";\n      vnode.children = [];\n      vnode.props = {};\n      vnode.dom = newdom as unknown as DomElement;\n    }\n  };\n}\n\nconst builtInDirectives = {\n  \"v-if\": hideDirective(false),\n  \"v-unless\": hideDirective(true),\n  \"v-for\": (set: unknown[], vnode: VnodeWithDom) => {\n    vnode.children = set.map(vnode.children[0] as (value: unknown) => Function);\n  },\n  \"v-show\": (bool: boolean, vnode: VnodeWithDom) => {\n    (vnode.dom as unknown as { style: { display: string } }).style.display = bool ? \"\" : \"none\";\n  },\n  \"v-class\": (classes: { [x: string]: boolean }, vnode: VnodeWithDom) => {\n    for (let name in classes) {\n      (vnode.dom as DomElement).classList.toggle(name, classes[name]);\n    }\n  },\n  \"v-html\": (html: string, vnode: VnodeWithDom) => {\n    vnode.children = [trust(html)];\n  },\n  \"v-model\": ([model, property, event]: any[], vnode: VnodeWithDom, oldVnode?: VnodeWithDom) => {\n    let value;\n    let handler;\n    if (vnode.name === \"input\") {\n      event = event || \"oninput\";\n      switch (vnode.props.type) {\n        case \"checkbox\": {\n          if (Array.isArray(model[property])) {\n            handler = (e: Event) => {\n              let val = (e.target as DomElement & Record<string, any>).value;\n              let idx = model[property].indexOf(val);\n              if (idx === -1) {\n                model[property].push(val);\n              } else {\n                model[property].splice(idx, 1);\n              }\n            };\n            value = model[property].indexOf(vnode.dom.value) !== -1;\n          } else if (\"value\" in vnode.props) {\n            handler = () => {\n              if (model[property] === vnode.props.value) {\n                model[property] = null;\n              } else {\n                model[property] = vnode.props.value;\n              }\n            };\n            value = model[property] === vnode.props.value;\n          } else {\n            handler = () => (model[property] = !model[property]);\n            value = model[property];\n          }\n          setProperty(\"checked\", value, vnode, oldVnode);\n          break;\n        }\n        case \"radio\": {\n          setProperty(\"checked\", model[property] === vnode.dom.value, vnode, oldVnode);\n          break;\n        }\n        default: {\n          setProperty(\"value\", model[property], vnode, oldVnode);\n        }\n      }\n    } else if (vnode.name === \"select\") {\n      event = event || \"onclick\";\n      if (vnode.props.multiple) {\n        handler = (e: Event & Record<string, any>) => {\n          let val = (e.target as DomElement & Record<string, any>).value;\n          if (e.ctrlKey) {\n            let idx = model[property].indexOf(val);\n            if (idx === -1) {\n              model[property].push(val);\n            } else {\n              model[property].splice(idx, 1);\n            }\n          } else {\n            model[property].splice(0, model[property].length);\n            model[property].push(val);\n          }\n        };\n        vnode.children.forEach((child) => {\n          if (child.name === \"option\") {\n            let value = \"value\" in child.props ? child.props.value : child.children.join(\"\").trim();\n            child.props.selected = model[property].indexOf(value) !== -1;\n          }\n        });\n      } else {\n        vnode.children.forEach((child) => {\n          if (child.name === \"option\") {\n            let value = \"value\" in child.props ? child.props.value : child.children.join(\"\").trim();\n            child.props.selected = value === model[property];\n          }\n        });\n      }\n    } else if (vnode.name === \"textarea\") {\n      event = event || \"oninput\";\n      vnode.children = [model[property]];\n    }\n\n    if (!vnode.props[event]) {\n      if (!handler) {\n        handler = (e: Event) => (model[property] = (e.target as DomElement & Record<string, any>).value);\n      }\n      setProperty(event, handler, vnode, oldVnode);\n    }\n  }\n};\n\n/*** Hyperscript ***/\n\nexport const v: Valyrian = function v(tagOrComponent: string | ValyrianComponent, props: Props, ...children: Children): IVnode | VnodeComponent {\n  if (typeof tagOrComponent === \"string\") {\n    return new Vnode(tagOrComponent, props || {}, children);\n  }\n\n  const vnode = new Vnode(\"__component__\", props || {}, children);\n  vnode.component = tagOrComponent;\n  return vnode as VnodeComponent;\n};\n\nv.fragment = (props: Props, ...children: Children): Children => {\n  return children;\n};\n\nv.current = {} as Current;\n\nv.directives = { ...builtInDirectives };\n\nv.reservedProps = {\n  key: true,\n  state: true,\n  oncreate: true,\n  onupdate: true,\n  onremove: true,\n  shouldupdate: true,\n  \"v-cleanup\": true,\n  \"v-once\": true,\n\n  // Built in directives\n  \"v-if\": true,\n  \"v-unless\": true,\n  \"v-for\": true,\n  \"v-show\": true,\n  \"v-class\": true,\n  \"v-html\": true\n};\n\n((isNodeJs ? global : window) as unknown as { v: Valyrian }).v = v as Valyrian;\n"]}