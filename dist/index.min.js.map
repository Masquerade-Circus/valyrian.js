//# sourceMappingURL=data:application/json;charset=utf-8;base64,{"version":3,"names":["isNodeJs","Boolean","process","versions","node","Vnode","constructor","tag","props","children","dom","isSVG","directComponents","hasKeys","oncreate","oncleanup","onupdate","onremove","this","isPOJOComponent","component","isComponent","isVnode","object","isVnodeComponent","v","tagOrComponent","hidrateDomToVnode","nodeType","nodeValue","nodeName","toLowerCase","i","l","childNodes","length","childDom","push","childVnode","attributes","attr","vnode","trust","htmlString","div","document","createElement","innerHTML","trim","Array","from","map","fragment","_","mainComponent","mainVnode","isMounted","current","oldVnode","event","reservedProps","Set","addCallbackToSet","callback","setType","add","cleanup","validateIsCalledInsideComponent","Error","callSet","set","clear","directives","oldProps","parentVnode","currentChildVnode","parentNode","parentElement","value","replaceChild","createTextNode","bool","style","display","model","property","name","handler","e","target","type","isArray","val","idx","indexOf","splice","setAttribute","multiple","ctrlKey","forEach","child","join","selected","prevHandler","className","classList","toggle","class","id","domStyle","debouncedUpdateTimeout","eventListenerNames","eventListener","defaultPrevented","update","sharedSetAttribute","newVnode","newVnodeDom","removeAttribute","has","addEventListener","slice","updateAttributes","vnodeDom","vnodeProps","createElementNS","flatTree","console","warn","newChild","view","bind","processNewChild","oldDom","appendChild","textContent","patch","oldChildrenLength","childrenLength","oldTree","oldKeyedList","newOldTree","key","oldChild","currentChild","oldChildVnode","remove","updateVnode","shouldCleanup","oldOnRemoveSet","debouncedUpdateMethod","requestAnimationFrame","timeout","preventDefault","clearTimeout","setTimeout","directive","directiveName","container","querySelector","removed","result","removeEventListener","Reflect","deleteProperty"],"sources":["../lib/index.ts"],"sourcesContent":["/* eslint-disable */\ndeclare global {\n  var document: Document;\n  namespace JSX {\n    interface IntrinsicElements extends DefaultRecord {}\n    type Element = ReturnType<\n      typeof v | ((...args: any) => string | number | null | undefined | boolean | Promise<any>)\n    >;\n    type ComponentReturnType = string | number | null | undefined | boolean | Element | Element[];\n  }\n}\n\ninterface DefaultRecord extends Record<string | number | symbol, any> {}\n\nexport interface Properties extends DefaultRecord {\n  key?: string | number;\n}\n\nexport interface DomElement extends Element, DefaultRecord {}\n\nexport interface Component extends DefaultRecord {\n  (props: Properties, children: any[]): Vnode | any;\n}\n\nexport interface POJOComponent extends DefaultRecord {\n  view: Component;\n}\n\nexport type ValyrianComponent = Component | POJOComponent;\n\nexport interface VnodeComponentInterface extends Vnode {\n  tag: ValyrianComponent;\n}\n\nexport interface Children extends Array<Vnode | VnodeComponentInterface | ValyrianComponent | any> {}\n\nexport interface Directive {\n  (value: any, vnode: VnodeWithDom, oldProps?: Properties): false | void | any;\n}\n\nexport const isNodeJs = Boolean(typeof process !== \"undefined\" && process.versions && process.versions.node);\n\nexport class Vnode {\n  constructor(\n    public tag: string | Component | POJOComponent,\n    public props: null | Properties,\n    public children: Children,\n    public dom?: DomElement,\n    public isSVG?: boolean,\n    public directComponents?: Set<ValyrianComponent>,\n    public hasKeys?: boolean,\n    public oncreate?: Set<Function>,\n    public oncleanup?: Set<Function>,\n    public onupdate?: Set<Function>,\n    public onremove?: Set<Function>\n  ) {}\n}\n\nexport interface VnodeWithDom extends Vnode {\n  tag: string;\n  dom: DomElement;\n  props: Properties;\n}\n\nexport const isPOJOComponent = (component: unknown): component is POJOComponent =>\n  Boolean(component && typeof component === \"object\" && \"view\" in component);\n\nexport const isComponent = (component: unknown): component is Component =>\n  Boolean(typeof component === \"function\" || isPOJOComponent(component));\nexport const isVnode = (object?: unknown): object is Vnode => object instanceof Vnode;\n\nexport const isVnodeComponent = (object?: unknown): object is VnodeComponentInterface => {\n  return isVnode(object) && isComponent(object.tag);\n};\n\nexport function v(tagOrComponent: string | ValyrianComponent, props: Properties | null, ...children: Children) {\n  return new Vnode(tagOrComponent, props, children);\n}\n\nv.fragment = (_: Properties, ...children: Children) => children;\n\nexport function hidrateDomToVnode(dom: any): VnodeWithDom | void {\n  if (dom.nodeType === 3) {\n    return dom.nodeValue;\n  }\n\n  if (dom.nodeType === 1) {\n    const tag = dom.nodeName.toLowerCase();\n    const props = {} as Properties;\n    const children = [] as Children;\n\n    for (let i = 0, l = dom.childNodes.length; i < l; i++) {\n      const childDom = dom.childNodes[i];\n      if (childDom.nodeType === 3) {\n        children.push(childDom.nodeValue);\n      } else if (childDom.nodeType === 1) {\n        const childVnode = hidrateDomToVnode(childDom);\n        children.push(childVnode);\n      }\n    }\n\n    const attributes = dom.attributes;\n    for (let i = 0, l = attributes.length; i < l; i++) {\n      const attr = attributes[i];\n      props[attr.nodeName] = attr.nodeValue;\n    }\n\n    const vnode = new Vnode(tag, props, children);\n    vnode.dom = dom;\n    dom.vnode = vnode;\n    vnode.isSVG = tag === \"svg\";\n    return vnode as VnodeWithDom;\n  }\n}\n\nexport function trust(htmlString: string) {\n  const div = document.createElement(\"div\");\n  div.innerHTML = htmlString.trim();\n  return Array.from(div.childNodes).map(hidrateDomToVnode);\n}\n\nlet mainComponent: VnodeComponentInterface | null = null;\nlet mainVnode: VnodeWithDom | null = null;\nlet isMounted = false;\n\nexport const current = {\n  oldVnode: null as Vnode | null,\n  vnode: null as Vnode | null,\n  component: null as ValyrianComponent | null,\n  event: null as Event | null\n};\n\nexport const reservedProps = new Set<string>([\n  \"key\",\n  \"state\",\n  \"v-keep\",\n  \"v-text\",\n  \"v-if\",\n  \"v-for\",\n  \"v-show\",\n  \"v-class\",\n  \"v-html\",\n  \"v-model\",\n  \"v-create\",\n  \"v-update\",\n  \"v-cleanup\"\n]);\n\nenum SetType {\n  onCreate = \"oncreate\",\n  onUpdate = \"onupdate\",\n  onCleanup = \"oncleanup\",\n  onRemove = \"onremove\"\n}\n\nfunction addCallbackToSet(callback: Function, setType: SetType, vnode: VnodeWithDom) {\n  vnode[setType] = vnode[setType] || new Set();\n  vnode[setType].add(() => {\n    const cleanup = callback();\n    if (typeof cleanup === \"function\") {\n      vnode[SetType.onCleanup] = vnode[SetType.onCleanup] || new Set();\n      vnode[SetType.onCleanup].add(cleanup);\n    }\n  });\n}\n\nfunction validateIsCalledInsideComponent() {\n  if (!current.vnode) {\n    throw new Error(\"This function must be called inside a component\");\n  }\n}\n\nexport const onCreate = (callback: Function) => {\n  validateIsCalledInsideComponent();\n  if (!current.oldVnode) {\n    addCallbackToSet(callback, SetType.onCreate, current.vnode as VnodeWithDom);\n  }\n};\nexport const onUpdate = (callback: Function) => {\n  validateIsCalledInsideComponent();\n  if (current.oldVnode) {\n    addCallbackToSet(callback, SetType.onUpdate, current.vnode as VnodeWithDom);\n  }\n};\nexport const onCleanup = (callback: Function) => {\n  validateIsCalledInsideComponent();\n  addCallbackToSet(callback, SetType.onCleanup, current.vnode as VnodeWithDom);\n};\nexport const onRemove = (callback: Function) => {\n  validateIsCalledInsideComponent();\n\n  const parentVnode = current.vnode as VnodeWithDom;\n  const component = current.component as ValyrianComponent;\n  let removed = false;\n\n  function removeCallback() {\n    const hasComponentAsChild = parentVnode.directComponents && parentVnode.directComponents.has(component);\n\n    if (hasComponentAsChild || removed) {\n      return;\n    }\n\n    removed = true;\n    callback();\n  }\n\n  addCallbackToSet(removeCallback, SetType.onRemove, current.vnode as VnodeWithDom);\n};\nconst callSet = (set?: Set<Function> | null) => {\n  if (!set) {\n    return;\n  }\n  for (const callback of set) {\n    callback();\n  }\n  set.clear();\n};\n\nexport const directives: Record<string, Directive> = {\n  \"v-create\": (callback, childVnode, oldProps) => {\n    if (!oldProps) {\n      addCallbackToSet(() => callback(childVnode), SetType.onCreate, current.vnode as VnodeWithDom);\n    }\n  },\n\n  \"v-update\": (callback, childVnode, oldProps) => {\n    if (oldProps) {\n      addCallbackToSet(() => callback(childVnode, oldProps), SetType.onUpdate, current.vnode as VnodeWithDom);\n    }\n  },\n\n  \"v-remove\": (callback, childVnode) => {\n    let parentVnode = current.vnode as VnodeWithDom;\n    let currentChildVnode = childVnode as VnodeWithDom;\n    while (parentVnode) {\n      parentVnode.onremove = parentVnode.onremove || new Set();\n      addCallbackToSet(\n        () => {\n          if (!childVnode.dom.vnode || currentChildVnode.dom.parentNode) {\n            return;\n          }\n          callback(childVnode);\n          childVnode.dom.vnode = null;\n        },\n        SetType.onRemove,\n        parentVnode\n      );\n\n      if (!parentVnode.dom.parentElement) {\n        break;\n      }\n      currentChildVnode = parentVnode;\n      parentVnode = (parentVnode.dom.parentElement as DomElement).vnode as VnodeWithDom;\n    }\n  },\n\n  \"v-cleanup\": (callback, vnode) => {\n    addCallbackToSet(() => callback(vnode), SetType.onCleanup, current.vnode as VnodeWithDom);\n  },\n\n  \"v-if\": (value, vnode) => {\n    if (!Boolean(value)) {\n      const parentNode = vnode.dom?.parentNode;\n      if (parentNode) {\n        parentNode.replaceChild(document.createTextNode(\"\"), vnode.dom);\n      }\n\n      return false;\n    }\n  },\n\n  \"v-show\": (value, vnode) => {\n    const bool = Boolean(value);\n    (\n      vnode.dom as unknown as {\n        style: { display: string };\n      }\n    ).style.display = bool ? \"\" : \"none\";\n  },\n\n  \"v-html\": (value, vnode) => {\n    vnode.children = trust(value as string);\n  },\n\n  // The \"v-model\" directive binds the value of an input element to a model property\n  \"v-model\": (model, vnode) => {\n    // eslint-disable-next-line prefer-const\n    if (\"name\" in vnode.props === false) {\n      return;\n    }\n\n    let value;\n    const property = vnode.props.name;\n    let event = \"oninput\";\n\n    // This function updates the model property when the input element's value changes\n    let handler = (e: Event) => (model[property] = (e.target as DomElement & Record<string, any>).value);\n    if (vnode.tag === \"input\") {\n      // Depending on the type of input element, use a different handler function\n      switch (vnode.props.type) {\n        case \"checkbox\": {\n          if (Array.isArray(model[property])) {\n            // If the model property is an array, add or remove the value from the array when the checkbox is checked or unchecked\n            handler = (e: Event) => {\n              const val = (e.target as DomElement & Record<string, any>).value;\n              const idx = model[property].indexOf(val);\n              if (idx === -1) {\n                model[property].push(val);\n              } else {\n                model[property].splice(idx, 1);\n              }\n            };\n            // If the value is in the array, set the checkbox to be checked\n            value = model[property].indexOf(vnode.dom.value) !== -1;\n          } else if (\"value\" in vnode.props) {\n            // If the input element has a \"value\" attribute, use it to determine the checked state\n            handler = () => {\n              if (model[property] === vnode.props.value) {\n                model[property] = null;\n              } else {\n                model[property] = vnode.props.value;\n              }\n            };\n            value = model[property] === vnode.props.value;\n          } else {\n            // If there is no \"value\" attribute, use a boolean value for the model property\n            handler = () => (model[property] = !model[property]);\n            value = model[property];\n          }\n          // Set the \"checked\" attribute on the input element\n          // eslint-disable-next-line no-use-before-define\n          setAttribute(\"checked\", value, vnode);\n          break;\n        }\n        case \"radio\": {\n          // If the element is a radio button, set the \"checked\" attribute based on the value of the model property\n          // eslint-disable-next-line no-use-before-define\n          setAttribute(\"checked\", model[property] === vnode.dom.value, vnode);\n          break;\n        }\n        default: {\n          // For all other input types, set the \"value\" attribute based on the value of the model property\n          // eslint-disable-next-line no-use-before-define\n          setAttribute(\"value\", model[property], vnode);\n        }\n      }\n    } else if (vnode.tag === \"select\") {\n      // If the element is a select element, use the \"click\" event by default\n      event = \"onclick\";\n      if (vnode.props.multiple) {\n        // If the select element allows multiple selections, update the model property with an array of selected values\n        handler = (e: Event & Record<string, any>) => {\n          const val = (e.target as DomElement & Record<string, any>).value;\n          if (e.ctrlKey) {\n            // If the Ctrl key is pressed, add or remove the value from the array\n            const idx = model[property].indexOf(val);\n            if (idx === -1) {\n              model[property].push(val);\n            } else {\n              model[property].splice(idx, 1);\n            }\n          } else {\n            // If the Ctrl key is not pressed, set the model property to an array with the selected value\n            model[property].splice(0, model[property].length);\n            model[property].push(val);\n          }\n        };\n        // Set the \"selected\" attribute on the options based on whether they are in the model property array\n        vnode.children.forEach((child: VnodeWithDom) => {\n          if (child.tag === \"option\") {\n            const value = \"value\" in child.props ? child.props.value : child.children.join(\"\").trim();\n            child.props.selected = model[property].indexOf(value) !== -1;\n          }\n        });\n      } else {\n        // If the select element does not allow multiple selections, set the \"selected\" attribute on the options based on the value of the model property\n        vnode.children.forEach((child: VnodeWithDom) => {\n          if (child.tag === \"option\") {\n            const value = \"value\" in child.props ? child.props.value : child.children.join(\"\").trim();\n            child.props.selected = value === model[property];\n          }\n        });\n      }\n    } else if (vnode.tag === \"textarea\") {\n      // Set the textarea's content to the value of the model property\n      vnode.children = [model[property]];\n    }\n\n    // We assume that the prev handler if any will not be changed by the user across patchs\n    const prevHandler = vnode.props[event];\n\n    // Set the event handler on the element\n    // eslint-disable-next-line no-use-before-define\n    setAttribute(\n      event,\n      (e: Event) => {\n        handler(e);\n\n        // If the previous handler is defined, call it after the model has been updated\n        if (prevHandler) {\n          prevHandler(e);\n        }\n      },\n      vnode\n    );\n  },\n\n  \"v-class\": (value, vnode) => {\n    if (typeof value === \"string\") {\n      vnode.dom.className = value;\n    } else if (Array.isArray(value)) {\n      vnode.dom.className = value.join(\" \");\n    } else if (typeof value === \"object\") {\n      const classList = vnode.dom.classList;\n      for (const name in value) {\n        const val = typeof value[name] === \"function\" ? (value[name] as Function)() : value[name];\n        classList.toggle(name, val);\n      }\n    }\n  },\n\n  // Frequent used properties\n  class(value, vnode) {\n    if (vnode.dom.className !== value) {\n      if (vnode.isSVG) {\n        vnode.dom.setAttribute(\"class\", value);\n        return;\n      }\n      vnode.dom.className = value;\n    }\n  },\n\n  className(value, vnode) {\n    directives.class(value, vnode);\n  },\n\n  id: (value, vnode) => {\n    if (vnode.dom.id !== value) {\n      if (vnode.isSVG) {\n        vnode.dom.setAttribute(\"id\", value);\n        return;\n      }\n      vnode.dom.id = value;\n    }\n  },\n\n  style: (value, vnode) => {\n    if (typeof value === \"string\") {\n      if (vnode.isSVG) {\n        vnode.dom.setAttribute(\"style\", value);\n        return;\n      }\n      vnode.dom.style = value;\n    } else if (typeof value === \"object\") {\n      if (vnode.isSVG) {\n        vnode.dom.setAttribute(\"style\", \"\");\n      } else {\n        vnode.dom.style = \"\";\n      }\n      const domStyle = vnode.dom.style;\n      for (const name in value) {\n        domStyle[name] = value[name];\n      }\n    }\n  }\n};\n\nexport function directive(name: string, directive: Directive) {\n  const directiveName = `v-${name}`;\n  directives[directiveName] = directive;\n  reservedProps.add(directiveName);\n}\n\nexport function setPropNameReserved(name: string) {\n  reservedProps.add(name);\n}\n\nconst eventListenerNames = new Set<string>();\n\nfunction eventListener(e: Event) {\n  current.event = e;\n  let dom = e.target as DomElement;\n  const name = `on${e.type}`;\n\n  while (dom) {\n    const oldVnode = dom.vnode as VnodeWithDom;\n    if (oldVnode && oldVnode.props[name]) {\n      oldVnode.props[name](e, oldVnode);\n\n      if (!e.defaultPrevented) {\n        // eslint-disable-next-line no-use-before-define\n        update();\n      }\n      return;\n    }\n    dom = dom.parentNode as DomElement;\n  }\n\n  current.event = null;\n}\n\nfunction sharedSetAttribute(name: string, value: any, newVnode: VnodeWithDom): void | boolean {\n  const newVnodeDom = newVnode.dom;\n  if (typeof value === \"function\") {\n    if (!eventListenerNames.has(name)) {\n      // We attach the delegated event listener to the main vnode dom element, which is the root of the component\n      (mainVnode as VnodeWithDom).dom.addEventListener(name.slice(2), eventListener);\n      eventListenerNames.add(name);\n    }\n    return;\n  }\n\n  if (!newVnode.isSVG && name in newVnodeDom) {\n    newVnodeDom[name] = value;\n    return;\n  }\n\n  if (value === false) {\n    newVnodeDom.removeAttribute(name);\n  } else {\n    newVnodeDom.setAttribute(name, value);\n  }\n}\n\nexport function setAttribute(name: string, value: any, newVnode: VnodeWithDom): void {\n  if (!reservedProps.has(name)) {\n    newVnode.props[name] = value;\n    sharedSetAttribute(name, value, newVnode);\n  }\n}\n\nexport function updateAttributes(newVnode: VnodeWithDom, oldVnode?: VnodeWithDom): void {\n  const vnodeDom = newVnode.dom;\n  const vnodeProps = newVnode.props;\n  vnodeDom.vnode = newVnode;\n\n  if (oldVnode) {\n    for (const name in oldVnode.props) {\n      if (name in vnodeProps === false && !eventListenerNames.has(name) && !reservedProps.has(name)) {\n        if (!newVnode.isSVG && name in vnodeDom) {\n          vnodeDom[name] = null;\n        } else {\n          vnodeDom.removeAttribute(name);\n        }\n      }\n    }\n  }\n\n  for (const name in vnodeProps) {\n    if (directives[name]) {\n      if (directives[name](vnodeProps[name], newVnode, oldVnode?.props) === false) {\n        break;\n      }\n      continue;\n    }\n\n    if (!reservedProps.has(name)) {\n      sharedSetAttribute(name, vnodeProps[name], newVnode);\n    }\n  }\n}\n\nexport function createElement(tag: string, isSVG: boolean): DomElement {\n  return isSVG\n    ? document.createElementNS(\"http://www.w3.org/2000/svg\", tag)\n    : (document.createElement(tag) as DomElement);\n}\n\nfunction flatTree(newVnode: VnodeWithDom) {\n  let i = 0;\n  let children: Children;\n\n  if (\"v-for\" in newVnode.props === false) {\n    children = [...newVnode.children];\n  } else {\n    children = [];\n    const set = newVnode.props[\"v-for\"];\n    const l = set.length;\n    const callback = newVnode.children[0];\n\n    if (typeof callback !== \"function\") {\n      console.warn(\"v-for directive must have a callback function as children\");\n      return children;\n    }\n\n    for (let i = 0; i < l; i++) {\n      children[i] = callback(set[i], i);\n    }\n  }\n\n  if (newVnode.directComponents) {\n    newVnode.directComponents.clear();\n  }\n\n  while (i < children.length) {\n    const newChild = children[i];\n\n    if (newChild == null) {\n      children.splice(i, 1);\n      continue;\n    }\n\n    if (Array.isArray(newChild)) {\n      children.splice(i, 1, ...newChild);\n      continue;\n    }\n\n    if (newChild instanceof Vnode) {\n      newChild.props = newChild.props || {};\n      newChild.isSVG = newVnode.isSVG || newChild.tag === \"svg\";\n\n      if (typeof newChild.tag !== \"string\") {\n        const component = (current.component = newChild.tag);\n        newVnode.directComponents = newVnode.directComponents || new Set();\n        newVnode.directComponents.add(component);\n\n        children[i] = (isPOJOComponent(component) ? component.view : component).bind(component)(\n          newChild.props,\n          newChild.children\n        );\n\n        continue;\n      }\n\n      newVnode.hasKeys = newVnode.hasKeys || \"key\" in newChild.props;\n    }\n\n    i++;\n  }\n\n  return children;\n}\n\nfunction processNewChild(newChild: VnodeWithDom, parentVnode: VnodeWithDom, oldDom?: DomElement) {\n  if (oldDom) {\n    newChild.dom = createElement(newChild.tag, newChild.isSVG as boolean);\n    parentVnode.dom.replaceChild(newChild.dom, oldDom);\n  } else {\n    newChild.dom = parentVnode.dom.appendChild(createElement(newChild.tag, newChild.isSVG as boolean));\n  }\n  updateAttributes(newChild);\n  if (\"v-text\" in newChild.props) {\n    newChild.dom.textContent = newChild.props[\"v-text\"];\n    return;\n  }\n\n  current.oldVnode = null;\n  current.vnode = newChild;\n\n  const children = flatTree(newChild);\n  if (children.length === 0) {\n    newChild.dom.textContent = \"\";\n    return;\n  }\n\n  for (let i = 0, l = children.length; i < l; i++) {\n    if (children[i] instanceof Vnode === false) {\n      newChild.dom.appendChild(document.createTextNode(children[i]));\n      continue;\n    }\n    processNewChild(children[i] as VnodeWithDom, newChild);\n  }\n}\n\n// eslint-disable-next-line complexity\nfunction patch(newVnode: VnodeWithDom, oldVnode: VnodeWithDom | null): void {\n  current.oldVnode = oldVnode;\n  current.vnode = newVnode;\n  const children = flatTree(newVnode);\n  const dom = newVnode.dom;\n\n  if (children.length === 0) {\n    if (dom.childNodes.length) {\n      dom.textContent = \"\";\n    }\n    // There are no children so we don't need to call the oncreate and onupdate callbacks\n    return;\n  }\n\n  const childNodes = dom.childNodes as unknown as DomElement[];\n  const oldChildrenLength = childNodes.length;\n  const childrenLength = children.length;\n  if (oldChildrenLength === 0) {\n    for (let i = 0; i < childrenLength; i++) {\n      const newChild = children[i] as VnodeWithDom;\n      if (newChild instanceof Vnode === false) {\n        dom.appendChild(document.createTextNode(newChild));\n        continue;\n      }\n      processNewChild(newChild, newVnode);\n    }\n    // The oncreate callback must be called after the children are created\n    newVnode.oncreate && callSet(newVnode.oncreate);\n    return;\n  }\n\n  let oldTree = childNodes as unknown as DomElement[];\n  const oldKeyedList: Record<string, number> = {};\n\n  if (newVnode.hasKeys) {\n    const newOldTree = [];\n    for (let i = 0, l = oldTree.length; i < l; i++) {\n      newOldTree[i] = oldTree[i];\n      const oldVnode = oldTree[i].vnode as VnodeWithDom;\n      oldKeyedList[!oldVnode || \"key\" in oldVnode.props === false ? i : (oldVnode.props.key as string)] = i;\n    }\n    oldTree = newOldTree;\n  }\n\n  for (let i = 0, l = children.length; i < l; i++) {\n    const newChild = children[i] as VnodeWithDom;\n\n    if (newChild instanceof Vnode === false) {\n      const oldChild = oldTree[i];\n      if (!oldChild) {\n        dom.appendChild(document.createTextNode(newChild));\n        continue;\n      }\n\n      if (oldChild.nodeType !== 3) {\n        dom.replaceChild(document.createTextNode(newChild), oldChild);\n        continue;\n      }\n\n      // eslint-disable-next-line eqeqeq\n      if (oldChild.nodeValue != newChild) {\n        oldChild.nodeValue = newChild;\n      }\n      continue;\n    }\n\n    const oldChild = oldTree[newVnode.hasKeys ? oldKeyedList[(newChild.props.key as any) || i] : i] as DomElement;\n\n    if (!oldChild || newChild.tag !== oldChild.nodeName.toLowerCase()) {\n      processNewChild(newChild, newVnode, childNodes[i] as DomElement);\n      continue;\n    }\n\n    newChild.dom = oldChild;\n    const currentChild = childNodes[i];\n    const oldChildVnode = oldChild.vnode as VnodeWithDom;\n    if (!currentChild) {\n      dom.appendChild(oldChild);\n    } else if (currentChild !== oldChild) {\n      dom.replaceChild(oldChild, currentChild);\n    }\n\n    if (\"v-keep\" in newChild.props && oldChildVnode) {\n      if (oldChildVnode.props[\"v-keep\"] === newChild.props[\"v-keep\"]) {\n        continue;\n      }\n\n      const oldProps = childNodes[i + 1]?.vnode?.props;\n      if (oldProps && \"key\" in oldProps === false && oldProps[\"v-keep\"] === newChild.props[\"v-keep\"]) {\n        oldChild.remove();\n        oldTree.splice(i, 1);\n        continue;\n      }\n    }\n\n    updateAttributes(newChild as VnodeWithDom, oldChildVnode);\n\n    if (\"v-text\" in newChild.props) {\n      // eslint-disable-next-line eqeqeq\n      if (oldChild.textContent != newChild.props[\"v-text\"]) {\n        oldChild.textContent = newChild.props[\"v-text\"];\n      }\n      continue;\n    }\n\n    // Call the cleanup for the old child vnode before the patch\n    callSet(oldChildVnode?.oncleanup);\n    // eslint-disable-next-line no-use-before-define\n    patch(newChild as VnodeWithDom, oldChildVnode || null);\n    // Call the remove for the old child vnode after the patch\n    callSet(oldChildVnode?.onremove);\n  }\n\n  for (let i = childNodes.length, l = children.length; i > l; i--) {\n    childNodes[i - 1].remove();\n  }\n\n  // In here we could have new children or/and patched children\n  // So we need to call the oncreate and onupdate callbacks\n  callSet(newVnode.oncreate);\n  callSet(newVnode.onupdate);\n}\n\nexport function updateVnode(vnode: VnodeWithDom, shouldCleanup = true): string | void {\n  vnode.props = vnode.props || {};\n  if (shouldCleanup) {\n    // The clean up must be from the old vnode\n    // and in here the vnode is the old one\n    // so, we need to call the cleanup before the patch\n    // inside  the patch the clean up will be called only for the old children\n    callSet(vnode.oncleanup);\n  }\n  // Clone the old on remove set to call it after the patch\n  const oldOnRemoveSet = vnode.onremove ? new Set(vnode.onremove) : null;\n  current.vnode = vnode;\n  patch(vnode, shouldCleanup ? vnode : null);\n  // Call the old on remove set\n  callSet(oldOnRemoveSet);\n  isMounted = true;\n  current.oldVnode = null;\n  current.vnode = null;\n  current.component = null;\n}\n\nexport function update(): string {\n  if (mainVnode) {\n    mainVnode.children = [mainComponent];\n    // If the updateVnode method is called from outside the main lib (e.g. from a directive)\n    // it always be considered as mounted, so the cleanup will be called before the patch\n    // But in here, we need to pass the shouldCleanup as false if the app is not mounted\n    updateVnode(mainVnode as VnodeWithDom, isMounted);\n    if (isNodeJs) {\n      return mainVnode.dom.innerHTML;\n    }\n  }\n  return \"\";\n}\n\nlet debouncedUpdateTimeout: any;\nconst debouncedUpdateMethod = isNodeJs ? update : () => requestAnimationFrame(update);\n\nexport function debouncedUpdate(timeout = 42) {\n  if (current.event) {\n    current.event.preventDefault();\n  }\n  clearTimeout(debouncedUpdateTimeout);\n  debouncedUpdateTimeout = setTimeout(debouncedUpdateMethod, timeout);\n}\n\nexport function unmount() {\n  if (mainVnode) {\n    mainComponent = v(() => null, {}) as VnodeComponentInterface;\n    const result = update();\n    for (const name in eventListenerNames) {\n      mainVnode.dom.removeEventListener(name.slice(2).toLowerCase(), eventListener);\n      Reflect.deleteProperty(eventListenerNames, name);\n    }\n\n    callSet(mainVnode.onremove);\n\n    mainComponent = null;\n    mainVnode = null;\n    isMounted = false;\n    current.vnode = null;\n    current.component = null;\n    current.event = null;\n    return result;\n  }\n\n  return \"\";\n}\n\nexport function mount(dom: string | DomElement, component: ValyrianComponent | VnodeComponentInterface | any) {\n  const container =\n    typeof dom === \"string\" ? (isNodeJs ? createElement(dom, dom === \"svg\") : document.querySelector(dom)) : dom;\n\n  if (isComponent(component)) {\n    mainComponent = v(component, {}, []) as VnodeComponentInterface;\n  } else if (isVnodeComponent(component)) {\n    mainComponent = component;\n  } else {\n    mainComponent = v(() => component, {}, []) as VnodeComponentInterface;\n  }\n\n  mainVnode = hidrateDomToVnode(container) as VnodeWithDom;\n  return update();\n}\n"],"mappings":"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"}