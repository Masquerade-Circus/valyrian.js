//# sourceMappingURL=data:application/json;charset=utf-8;base64,{"version":3,"names":["isNodeJs","Boolean","process","versions","node","Vnode","constructor","tag","props","children","dom","isSVG","this","isComponent","component","isVnode","object","isVnodeComponent","v","tagOrComponent","domToVnode","nodeType","nodeValue","nodeName","toLowerCase","i","l","childNodes","length","childDom","push","childVnode","attributes","attr","vnode","trust","htmlString","div","document","createElement","innerHTML","trim","Array","from","map","fragment","_","mainComponent","mainVnode","isMounted","current","event","reservedProps","Set","onCleanupSet","onMountSet","onUpdateSet","onUnmountSet","onCleanup","callback","add","callSet","set","clear","handleVIf","shouldRender","value","parentNode","newdom","createTextNode","replaceChild","directives","bool","style","display","val","model","property","handler","e","target","type","isArray","idx","indexOf","splice","sharedSetAttribute","multiple","ctrlKey","forEach","child","join","selected","prevHandler","oldProps","cleanup","className","classList","name","toggle","class","id","domStyle","eventListenerNames","eventListener","defaultPrevented","update","newVnode","newVnodeDom","removeAttribute","setAttribute","has","addEventListener","slice","addProperties","vnodeProps","updateAttributes","vnodeDom","removeAttributes","createElementNS","flatTree","newChild","view","bind","handleVFor","createNewElement","oldChild","appendChild","textContent","patch","oldDomChildren","oldChildrenLength","firstOldProps","firstVnode","oldTree","oldKeyedList","newKeyedList","key","currentChild","remove","patchKeyed","childrenLength","nextOldChild","updateVnode","directive","directiveName","container","querySelector","result","removeEventListener","Reflect","deleteProperty"],"sources":["../lib/index.ts"],"sourcesContent":["/* eslint-disable sonarjs/cognitive-complexity */\ndeclare global {\n  // eslint-disable-next-line vars-on-top, no-var, no-unused-vars\n  var document: Document;\n}\n\ninterface DefaultRecord extends Record<string | number | symbol, any> {}\n\nnamespace JSX {\n  interface IntrinsicElements extends DefaultRecord {}\n}\n\nexport interface VnodeProperties extends DefaultRecord {\n  key?: string | number;\n}\n\nexport interface DomElement extends Element, DefaultRecord {}\n\nexport interface Component extends DefaultRecord {\n  (props: VnodeProperties, children: any[]): Vnode | any;\n}\n\nexport interface POJOComponent extends DefaultRecord {\n  view: Component;\n}\n\nexport type ValyrianComponent = Component | POJOComponent;\n\nexport interface VnodeComponentInterface extends Vnode {\n  tag: ValyrianComponent;\n}\n\nexport interface Children extends Array<Vnode | VnodeComponentInterface | ValyrianComponent | any> {}\n\nexport interface Directive {\n  (value: any, vnode: VnodeWithDom, oldProps: VnodeProperties | null): void | boolean;\n}\n\nexport const isNodeJs = Boolean(typeof process !== \"undefined\" && process.versions && process.versions.node);\n\nexport class Vnode {\n  constructor(\n    public tag: string | Component | POJOComponent,\n    public props: null | VnodeProperties,\n    public children: Children,\n    public dom?: DomElement,\n    public isSVG?: boolean\n  ) {}\n}\n\nexport interface VnodeWithDom extends Vnode {\n  tag: string;\n  dom: DomElement;\n  props: VnodeProperties;\n}\n\nexport const isComponent = (component: unknown): component is Component =>\n  Boolean(typeof component === \"function\" || (component && typeof component === \"object\" && \"view\" in component));\nexport const isVnode = (object?: unknown): object is Vnode => object instanceof Vnode;\n\nexport const isVnodeComponent = (object?: unknown): object is VnodeComponentInterface => {\n  return isVnode(object) && isComponent(object.tag);\n};\n\nexport function v(tagOrComponent: string | Component, props: VnodeProperties, ...children: Children) {\n  return new Vnode(tagOrComponent, props, children);\n}\n\nv.fragment = (_: VnodeProperties, ...children: Children) => children;\n\nexport function domToVnode(dom: any): VnodeWithDom | void {\n  if (dom.nodeType === 3) {\n    return dom.nodeValue;\n  }\n\n  if (dom.nodeType === 1) {\n    const tag = dom.nodeName.toLowerCase();\n    const props = {} as VnodeProperties;\n    const children = [] as Children;\n\n    for (let i = 0, l = dom.childNodes.length; i < l; i++) {\n      const childDom = dom.childNodes[i];\n      if (childDom.nodeType === 3) {\n        children.push(childDom.nodeValue);\n      } else if (childDom.nodeType === 1) {\n        const childVnode = domToVnode(childDom);\n        children.push(childVnode);\n      }\n    }\n\n    const attributes = dom.attributes;\n    for (let i = 0, l = attributes.length; i < l; i++) {\n      const attr = attributes[i];\n      props[attr.nodeName] = attr.nodeValue;\n    }\n\n    const vnode = new Vnode(tag, props, children);\n    vnode.dom = dom;\n    vnode.isSVG = tag === \"svg\";\n    return vnode as VnodeWithDom;\n  }\n}\n\nexport function trust(htmlString: string) {\n  const div = document.createElement(\"div\");\n  div.innerHTML = htmlString.trim();\n  return Array.from(div.childNodes).map(domToVnode);\n}\n\nlet mainComponent: VnodeComponentInterface | null = null;\nlet mainVnode: VnodeWithDom | null = null;\nlet isMounted = false;\n\nexport const current = {\n  vnode: null as Vnode | null,\n  component: null as ValyrianComponent | null,\n  event: null as Event | null\n};\n\nexport const reservedProps = new Set<string>([\n  \"key\",\n  \"state\",\n  \"v-keep\",\n  \"v-text\",\n  \"v-if\",\n  \"v-for\",\n  \"v-show\",\n  \"v-class\",\n  \"v-html\",\n  \"v-model\",\n  \"v-create\",\n  \"v-update\",\n  \"v-cleanup\"\n]);\n\nconst onCleanupSet = new Set<Function>();\nconst onMountSet = new Set<Function>();\nconst onUpdateSet = new Set<Function>();\nconst onUnmountSet = new Set<Function>();\nexport const onMount = (callback: Function) => !isMounted && onMountSet.add(callback);\nexport const onUpdate = (callback: Function) => onUpdateSet.add(callback);\nexport const onCleanup = (callback: Function) => onCleanupSet.add(callback);\nexport const onUnmount = (callback: Function) => !isMounted && onUnmountSet.add(callback);\nconst callSet = (set: Set<Function>) => {\n  for (const callback of set) {\n    callback();\n  }\n  set.clear();\n};\n\nconst handleVIf = (shouldRender: boolean): Directive => {\n  return (value, vnode) => {\n    const bool = shouldRender !== Boolean(value);\n    if (bool) {\n      const parentNode = vnode.dom?.parentNode;\n      if (parentNode) {\n        const newdom = document.createTextNode(\"\");\n        parentNode.replaceChild(newdom, vnode.dom);\n      }\n\n      return false;\n    }\n  };\n};\n\nexport const directives: Record<string, Directive> = {\n  \"v-if\": handleVIf(true),\n  \"v-unless\": handleVIf(false),\n\n  \"v-show\": (value, vnode) => {\n    const bool = Boolean(value);\n    (\n      vnode.dom as unknown as {\n        style: { display: string };\n      }\n    ).style.display = bool ? \"\" : \"none\";\n  },\n\n  \"v-html\": (value, vnode) => {\n    vnode.children = [trust(value as string)];\n  },\n\n  // The \"v-model\" directive binds the value of an input element to a model property\n  \"v-model\": (val, vnode) => {\n    // eslint-disable-next-line prefer-const\n    let [model, property, event]: any[] = val as any[];\n    let value;\n    // This function updates the model property when the input element's value changes\n    let handler = (e: Event) => (model[property] = (e.target as DomElement & Record<string, any>).value);\n    if (vnode.tag === \"input\") {\n      // If the element is an input, use the \"input\" event by default\n      event = event || \"oninput\";\n      // Depending on the type of input element, use a different handler function\n      switch (vnode.props.type) {\n        case \"checkbox\": {\n          if (Array.isArray(model[property])) {\n            // If the model property is an array, add or remove the value from the array when the checkbox is checked or unchecked\n            handler = (e: Event) => {\n              const val = (e.target as DomElement & Record<string, any>).value;\n              const idx = model[property].indexOf(val);\n              if (idx === -1) {\n                model[property].push(val);\n              } else {\n                model[property].splice(idx, 1);\n              }\n            };\n            // If the value is in the array, set the checkbox to be checked\n            value = model[property].indexOf(vnode.dom.value) !== -1;\n          } else if (\"value\" in vnode.props) {\n            // If the input element has a \"value\" attribute, use it to determine the checked state\n            handler = () => {\n              if (model[property] === vnode.props.value) {\n                model[property] = null;\n              } else {\n                model[property] = vnode.props.value;\n              }\n            };\n            value = model[property] === vnode.props.value;\n          } else {\n            // If there is no \"value\" attribute, use a boolean value for the model property\n            handler = () => (model[property] = !model[property]);\n            value = model[property];\n          }\n          // Set the \"checked\" attribute on the input element\n          // eslint-disable-next-line no-use-before-define\n          sharedSetAttribute(\"checked\", value, vnode);\n          break;\n        }\n        case \"radio\": {\n          // If the element is a radio button, set the \"checked\" attribute based on the value of the model property\n          // eslint-disable-next-line no-use-before-define\n          sharedSetAttribute(\"checked\", model[property] === vnode.dom.value, vnode);\n          break;\n        }\n        default: {\n          // For all other input types, set the \"value\" attribute based on the value of the model property\n          // eslint-disable-next-line no-use-before-define\n          sharedSetAttribute(\"value\", model[property], vnode);\n        }\n      }\n    } else if (vnode.tag === \"select\") {\n      // If the element is a select element, use the \"click\" event by default\n      event = event || \"onclick\";\n      if (vnode.props.multiple) {\n        // If the select element allows multiple selections, update the model property with an array of selected values\n        handler = (e: Event & Record<string, any>) => {\n          const val = (e.target as DomElement & Record<string, any>).value;\n          if (e.ctrlKey) {\n            // If the Ctrl key is pressed, add or remove the value from the array\n            const idx = model[property].indexOf(val);\n            if (idx === -1) {\n              model[property].push(val);\n            } else {\n              model[property].splice(idx, 1);\n            }\n          } else {\n            // If the Ctrl key is not pressed, set the model property to an array with the selected value\n            model[property].splice(0, model[property].length);\n            model[property].push(val);\n          }\n        };\n        // Set the \"selected\" attribute on the options based on whether they are in the model property array\n        vnode.children.forEach((child: VnodeWithDom) => {\n          if (child.tag === \"option\") {\n            const value = \"value\" in child.props ? child.props.value : child.children.join(\"\").trim();\n            child.props.selected = model[property].indexOf(value) !== -1;\n          }\n        });\n      } else {\n        // If the select element does not allow multiple selections, set the \"selected\" attribute on the options based on the value of the model property\n        vnode.children.forEach((child: VnodeWithDom) => {\n          if (child.tag === \"option\") {\n            const value = \"value\" in child.props ? child.props.value : child.children.join(\"\").trim();\n            child.props.selected = value === model[property];\n          }\n        });\n      }\n    } else if (vnode.tag === \"textarea\") {\n      // If the element is a textarea, use the \"input\" event by default\n      event = event || \"oninput\";\n      // Set the textarea's content to the value of the model property\n      vnode.children = [model[property]];\n    }\n\n    // We assume that the prev handler if any will not be changed by the user across patchs\n    const prevHandler = vnode.props[event];\n\n    // Set the event handler on the element\n    // eslint-disable-next-line no-use-before-define\n    sharedSetAttribute(\n      event,\n      (e: Event) => {\n        handler(e);\n\n        // If the previous handler is defined, call it after the model has been updated\n        if (prevHandler) {\n          prevHandler(e);\n        }\n      },\n      vnode\n    );\n  },\n\n  \"v-create\": (callback, vnode, oldProps) => {\n    if (!oldProps) {\n      const cleanup = callback(vnode);\n\n      if (typeof cleanup === \"function\") {\n        onCleanup(cleanup);\n      }\n    }\n  },\n\n  \"v-update\": (callback, vnode, oldProps) => {\n    if (oldProps) {\n      const cleanup = callback(vnode, oldProps);\n\n      if (typeof cleanup === \"function\") {\n        onCleanup(cleanup);\n      }\n    }\n  },\n\n  \"v-cleanup\": (callback, vnode) => {\n    onCleanup(() => callback(vnode));\n  },\n\n  \"v-class\": (value, vnode) => {\n    if (typeof value === \"string\") {\n      vnode.dom.className = value;\n    } else if (Array.isArray(value)) {\n      vnode.dom.className = value.join(\" \");\n    } else if (typeof value === \"object\") {\n      const classList = vnode.dom.classList;\n      for (const name in value) {\n        const val = typeof value[name] === \"function\" ? (value[name] as Function)() : value[name];\n        classList.toggle(name, val);\n      }\n    }\n  },\n\n  // Frequent used properties\n  class(value, vnode) {\n    if (vnode.dom.className !== value) {\n      vnode.dom.className = value;\n    }\n  },\n\n  className(value, vnode) {\n    directives.class(value, vnode, null);\n  },\n\n  id: (value, vnode) => {\n    vnode.dom.id = value;\n  },\n\n  style: (value, vnode) => {\n    if (typeof value === \"string\") {\n      vnode.dom.style = value;\n    } else if (typeof value === \"object\") {\n      vnode.dom.style = \"\";\n      const domStyle = vnode.dom.style;\n      for (const name in value) {\n        domStyle[name] = value[name];\n      }\n    }\n  }\n};\n\nexport function directive(name: string, directive: Directive) {\n  const directiveName = `v-${name}`;\n  directives[directiveName] = directive;\n  reservedProps.add(directiveName);\n}\n\nconst eventListenerNames = new Set<string>();\n\nfunction eventListener(e: Event) {\n  current.event = e;\n  let dom = e.target as DomElement;\n  const name = `on${e.type}`;\n\n  while (dom) {\n    const oldProps = dom.props;\n    if (oldProps && oldProps[name]) {\n      oldProps[name](e, dom);\n\n      if (!e.defaultPrevented) {\n        // eslint-disable-next-line no-use-before-define\n        update();\n      }\n      return;\n    }\n    dom = dom.parentNode as DomElement;\n  }\n\n  current.event = null;\n}\n\nfunction sharedSetAttribute(name: string, value: any, newVnode: VnodeWithDom): void | boolean {\n  const newVnodeDom = newVnode.dom;\n  if (typeof value === \"function\") {\n    if (!eventListenerNames.has(name)) {\n      (mainVnode as VnodeWithDom).dom.addEventListener(name.slice(2), eventListener);\n      eventListenerNames.add(name);\n    }\n    return;\n  }\n\n  if (name in newVnodeDom) {\n    newVnodeDom[name] = value;\n    return;\n  }\n\n  if (value === false) {\n    newVnodeDom.removeAttribute(name);\n  } else {\n    newVnodeDom.setAttribute(name, value);\n  }\n}\n\nexport function setAttribute(name: string, value: any, newVnode: VnodeWithDom): void {\n  if (!reservedProps.has(name)) {\n    newVnode.props[name] = value;\n    sharedSetAttribute(name, value, newVnode);\n  }\n}\n\nfunction removeAttributes(vnode: VnodeWithDom, oldProps: VnodeProperties | null): void {\n  if (!oldProps) {\n    return;\n  }\n\n  const vnodeDom = vnode.dom;\n  const vnodeProps = vnode.props;\n\n  for (const name in oldProps) {\n    if (name in vnodeProps === false && !eventListenerNames.has(name) && !reservedProps.has(name)) {\n      if (name in vnodeDom) {\n        vnodeDom[name] = null;\n      } else {\n        vnodeDom.removeAttribute(name);\n      }\n    }\n  }\n}\n\nfunction addProperties(vnode: VnodeWithDom, oldProps: VnodeProperties | null) {\n  const vnodeProps = vnode.props;\n  for (const name in vnodeProps) {\n    if (directives[name]) {\n      if (directives[name](vnodeProps[name], vnode, oldProps) === false) {\n        break;\n      }\n      continue;\n    }\n\n    if (reservedProps.has(name)) {\n      continue;\n    }\n\n    sharedSetAttribute(name, vnodeProps[name], vnode);\n  }\n}\n\nexport function updateAttributes(newVnode: VnodeWithDom, oldProps: VnodeProperties | null): void {\n  removeAttributes(newVnode, oldProps);\n  addProperties(newVnode, oldProps);\n}\n\nexport function createElement(tag: string, isSVG: boolean): DomElement {\n  return isSVG\n    ? document.createElementNS(\"http://www.w3.org/2000/svg\", tag)\n    : (document.createElement(tag) as DomElement);\n}\n\nfunction flatTree(newVnode: VnodeWithDom, children: Children) {\n  current.vnode = newVnode;\n  let i = 0;\n\n  while (i < children.length) {\n    const newChild = children[i];\n\n    if (newChild == null) {\n      children.splice(i, 1);\n      continue;\n    }\n\n    if (Array.isArray(newChild)) {\n      children.splice(i, 1, ...newChild);\n      continue;\n    }\n\n    if (newChild instanceof Vnode) {\n      if (newChild.props === null) {\n        newChild.props = {};\n      }\n\n      if (typeof newChild.tag !== \"string\") {\n        const component = newChild.tag;\n\n        current.component = newChild.tag;\n        children[i] = (\"view\" in component ? component.view : component).bind(component)(\n          newChild.props,\n          newChild.children\n        );\n        continue;\n      } else {\n        newChild.isSVG = newVnode.isSVG || newChild.tag === \"svg\";\n      }\n    }\n\n    i++;\n  }\n\n  return children;\n}\n\nfunction handleVFor(newVnode: VnodeWithDom) {\n  if (\"v-for\" in newVnode.props) {\n    const set = newVnode.props[\"v-for\"];\n    const children = [];\n    const callback = newVnode.children[0];\n    children.length = set.length;\n\n    for (let i = 0, l = set.length; i < l; i++) {\n      children[i] = callback(set[i], i);\n    }\n\n    return children;\n  }\n  return [...newVnode.children];\n}\n\nfunction createNewElement(newChild: VnodeWithDom, newVnode: VnodeWithDom, oldChild: DomElement | null) {\n  const dom = createElement(newChild.tag, newChild.isSVG as boolean);\n  if (oldChild) {\n    newVnode.dom.replaceChild(dom, oldChild);\n  } else {\n    newVnode.dom.appendChild(dom);\n  }\n  newChild.dom = dom;\n  addProperties(newChild, null);\n  newChild.dom.props = newChild.props;\n  if (\"v-text\" in newChild.props) {\n    newChild.dom.textContent = newChild.props[\"v-text\"];\n    return;\n  }\n\n  const children = flatTree(newChild, handleVFor(newChild));\n  if (children.length === 0) {\n    newChild.dom.textContent = \"\";\n    return;\n  }\n\n  for (let i = 0, l = children.length; i < l; i++) {\n    if (children[i] instanceof Vnode === false) {\n      newChild.dom.appendChild(document.createTextNode(children[i]));\n      continue;\n    }\n    createNewElement(children[i], newChild, null);\n  }\n}\n\nfunction patchKeyed(newVnode: VnodeWithDom, children: Children) {\n  const oldTree = [...Array.from(newVnode.dom.childNodes)] as unknown as DomElement[];\n  const childNodes = newVnode.dom.childNodes;\n  const oldKeyedList: Record<string, number> = {};\n  const newKeyedList: Record<string, number> = {};\n\n  for (let i = 0, l = oldTree.length; i < l; i++) {\n    const oldProps = oldTree[i].props;\n    if (oldProps) {\n      oldKeyedList[oldProps.key as string] = i;\n    }\n\n    if (i < children.length && children[i] instanceof Vnode) {\n      newKeyedList[children[i].props.key as string] = i;\n    }\n  }\n\n  for (let i = 0, l = children.length; i < l; i++) {\n    const newChild = children[i];\n    const oldChild = oldTree[oldKeyedList[newChild.props.key as string]];\n\n    if (!oldChild) {\n      createNewElement(newChild, newVnode, childNodes[i] as DomElement | null);\n      continue;\n    }\n\n    newChild.dom = oldChild;\n    const currentChild = childNodes[i];\n    if (!currentChild) {\n      newVnode.dom.appendChild(oldChild);\n    } else if (currentChild !== oldChild) {\n      newVnode.dom.replaceChild(oldChild, currentChild);\n    }\n\n    if (\"v-keep\" in newChild.props === false || oldChild.props[\"v-keep\"] !== newChild.props[\"v-keep\"]) {\n      updateAttributes(newChild as VnodeWithDom, oldChild.props);\n      oldChild.props = newChild.props;\n\n      if (\"v-text\" in newChild.props) {\n        // eslint-disable-next-line eqeqeq\n        if (oldChild.textContent != newChild.props[\"v-text\"]) {\n          oldChild.textContent = newChild.props[\"v-text\"];\n        }\n        continue;\n      }\n      // eslint-disable-next-line no-use-before-define\n      patch(newChild as VnodeWithDom);\n    }\n  }\n\n  for (let i = children.length, l = childNodes.length; i < l; i++) {\n    childNodes[i]?.remove();\n  }\n}\n\n// eslint-disable-next-line complexity\nexport function patch(newVnode: VnodeWithDom): void {\n  const children = flatTree(newVnode, handleVFor(newVnode));\n\n  const dom = newVnode.dom;\n\n  if (children.length === 0) {\n    if (dom.childNodes.length) {\n      dom.textContent = \"\";\n    }\n    return;\n  }\n\n  const oldDomChildren = dom.childNodes as unknown as DomElement[];\n  const oldChildrenLength = oldDomChildren.length;\n  if (oldChildrenLength > 0) {\n    const firstOldProps = oldDomChildren[0].props;\n    const firstVnode = children[0] as VnodeWithDom;\n    if (firstOldProps && firstVnode instanceof Vnode && \"key\" in firstVnode.props && \"key\" in firstOldProps) {\n      patchKeyed(newVnode, children);\n      return;\n    }\n  }\n\n  const childrenLength = children.length;\n  if (oldChildrenLength === 0) {\n    for (let i = 0; i < childrenLength; i++) {\n      if (children[i] instanceof Vnode === false) {\n        dom.appendChild(document.createTextNode(children[i]));\n        continue;\n      }\n      createNewElement(children[i], newVnode, null);\n    }\n    return;\n  }\n\n  for (let i = 0; i < childrenLength; i++) {\n    const oldChild = oldDomChildren[i];\n    const newChild = children[i];\n\n    if (newChild instanceof Vnode === false) {\n      if (!oldChild) {\n        newVnode.dom.appendChild(document.createTextNode(newChild));\n        continue;\n      }\n\n      if (oldChild.nodeType !== 3) {\n        newVnode.dom.replaceChild(document.createTextNode(newChild), oldChild);\n        continue;\n      }\n\n      // eslint-disable-next-line eqeqeq\n      if (oldChild.nodeValue != newChild) {\n        oldChild.nodeValue = newChild;\n      }\n      continue;\n    }\n\n    if (!oldChild) {\n      createNewElement(newChild, newVnode, null);\n      continue;\n    }\n\n    if (\"v-keep\" in newChild.props) {\n      if (oldChild.props && oldChild.props[\"v-keep\"] === newChild.props[\"v-keep\"]) {\n        continue;\n      }\n\n      const nextOldChild = oldDomChildren[i + 1];\n      if (nextOldChild && nextOldChild.props && nextOldChild.props[\"v-keep\"] === newChild.props[\"v-keep\"]) {\n        oldChild.remove();\n        continue;\n      }\n    }\n\n    if (newChild.tag !== oldChild.nodeName.toLowerCase()) {\n      createNewElement(newChild, newVnode, oldChild);\n      continue;\n    }\n\n    newChild.dom = oldChild;\n    updateAttributes(newChild as VnodeWithDom, oldChild.props || null);\n    oldChild.props = newChild.props;\n    if (\"v-text\" in newChild.props) {\n      // eslint-disable-next-line eqeqeq\n      if (newChild.dom.textContent != newChild.props[\"v-text\"]) {\n        newChild.dom.textContent = newChild.props[\"v-text\"];\n      }\n      continue;\n    }\n    patch(newChild);\n  }\n\n  for (let i = childrenLength, l = oldDomChildren.length; i < l; i++) {\n    oldDomChildren[i]?.remove();\n  }\n}\n\nexport function updateVnode(vnode: VnodeWithDom): string | void {\n  callSet(onCleanupSet);\n  vnode.props = vnode.props || {};\n  patch(vnode);\n  callSet(isMounted ? onUpdateSet : onMountSet);\n  isMounted = true;\n  current.vnode = null;\n  current.component = null;\n  if (isNodeJs) {\n    return vnode.dom.innerHTML;\n  }\n}\n\nexport function update(): void | string {\n  if (mainVnode) {\n    mainVnode.children = [mainComponent];\n    return updateVnode(mainVnode);\n  }\n}\n\nexport function unmount() {\n  if (mainVnode) {\n    mainComponent = v(() => null, {}) as VnodeComponentInterface;\n    const result = update();\n    callSet(onUnmountSet);\n    for (const name in eventListenerNames) {\n      mainVnode.dom.removeEventListener(name.slice(2).toLowerCase(), eventListener);\n      Reflect.deleteProperty(eventListenerNames, name);\n    }\n\n    mainComponent = null;\n    mainVnode = null;\n    isMounted = false;\n    current.vnode = null;\n    current.component = null;\n    current.event = null;\n    return result;\n  }\n}\n\nexport function mount(dom: string | DomElement, component: any) {\n  const container =\n    typeof dom === \"string\" ? (isNodeJs ? createElement(dom, dom === \"svg\") : document.querySelector(dom)) : dom;\n\n  if (isComponent(component)) {\n    mainComponent = new Vnode(component, {}, []) as VnodeComponentInterface;\n  } else if (isVnodeComponent(component)) {\n    mainComponent = component;\n  } else {\n    mainComponent = new Vnode(() => component, {}, []) as VnodeComponentInterface;\n  }\n\n  mainVnode = domToVnode(container) as VnodeWithDom;\n  return update();\n}\n"],"mappings":"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"}