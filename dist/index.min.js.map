//# sourceMappingURL=data:application/json;charset=utf-8;base64,{"version":3,"sources":["../lib/index.ts"],"names":["ComponentString","TextString","isNodeJs","Boolean","process","versions","node","Und","Vnode","tag","props","children","this","isComponent","component","isVnodeComponent","vnode","createDomElement","isSVG","document","createElementNS","createElement","domToVnode","dom","nodeType","v","nodeValue","i","childNodes","length","child","push","forEach","call","attributes","prop","nodeName","tagName","toLowerCase","trust","htmlString","div","innerHTML","trim","map","item","reservedProps","key","state","oncreate","onupdate","onremove","shouldupdate","eventListenerNames","onCleanupList","onMountList","onUpdateList","onUnmountList","current","eventListener","e","target","name","type","defaultPrevented","update","parentNode","callCallbackList","list","mainVnode","oldVnode","patch","isMounted","unmount","emptyVnode","sharedSetAttribute","value","directives","container","addEventListener","slice","removeAttribute","setAttribute","setAttributes","newVnode","newTree","oldTree","childVnode","result","view","splice","Array","isArray","oldTreeLength","newTreeLength","oldKeyedList","newKeyedList","oldChildVnode","shouldPatch","appendChild","replaceChild","removeChild","newChildVnode","createTextNode","textContent","hideDirective","test","bool","newdom","set","style","display","classes","classList","toggle","html","model","property","event","handler","val","idx","indexOf","multiple","ctrlKey","value2","join","selected","plugins","Map","tagOrComponent","fragment","isVnode","object","onCleanup","callback","onUnmount","onMount","onUpdate","mount","vnodeComponent","appContainer","querySelectorAll","Error","directive","directive2","fullName","use","plugin","options","has","get"],"mappings":"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","sourcesContent":["/* eslint-disable no-use-before-define */\n/* eslint-disable sonarjs/cognitive-complexity */\n/*** Vnode ***/\n\nimport {\n  Children,\n  Current,\n  Directive,\n  Directives,\n  DomElement,\n  IVnode,\n  Plugin,\n  Props,\n  ReservedProps,\n  Valyrian,\n  ValyrianComponent,\n  VnodeComponent,\n  VnodeWithDom\n} from \"./interfaces\";\n\n/*** Constants ***/\nconst ComponentString = \"__component__\";\nconst TextString = \"#text\";\nconst isNodeJs = Boolean(typeof process !== \"undefined\" && process.versions && process.versions.node);\nconst Und = undefined;\n\n/*** Vnode ***/\n\nconst Vnode = function Vnode(this: IVnode, tag: string, props: Props, children: Children) {\n  this.props = props;\n  this.children = children;\n  this.tag = tag;\n} as unknown as IVnode;\n\nfunction isVnode(object?: unknown | IVnode): object is IVnode {\n  return object instanceof Vnode;\n}\n\nfunction isComponent(component?: unknown | ValyrianComponent): component is ValyrianComponent {\n  return typeof component === \"function\" || (typeof component === \"object\" && component !== null && \"view\" in component);\n}\n\nfunction isVnodeComponent(vnode?: unknown | VnodeComponent): vnode is VnodeComponent {\n  return vnode instanceof Vnode && vnode.tag === ComponentString;\n}\n\n/*** Util ***/\n\nfunction createDomElement(tag: string, isSVG: boolean = false) {\n  return isSVG ? document.createElementNS(\"http://www.w3.org/2000/svg\", tag) : document.createElement(tag);\n}\n\nfunction domToVnode(dom: DomElement): void | VnodeWithDom {\n  if (dom.nodeType === 3) {\n    let vnode = v(TextString, {}, []);\n    vnode.nodeValue = dom.nodeValue as string;\n    vnode.dom = dom;\n    return vnode as VnodeWithDom;\n  }\n\n  if (dom.nodeType === 1) {\n    let children = [];\n    for (let i = 0; i < dom.childNodes.length; i++) {\n      let child = domToVnode(dom.childNodes[i] as DomElement);\n      if (child) {\n        children.push(child);\n      }\n    }\n\n    let props: Props = {};\n    [].forEach.call(dom.attributes, (prop: Attr) => (props[prop.nodeName] = prop.nodeValue));\n\n    let vnode = v(dom.tagName.toLowerCase(), props, ...children);\n    vnode.dom = dom;\n    return vnode as VnodeWithDom;\n  }\n}\n\nconst trust = (htmlString: string): Children => {\n  let div = createDomElement(\"div\");\n  div.innerHTML = htmlString.trim();\n\n  return [].map.call(div.childNodes, (item) => domToVnode(item)) as Children;\n};\n\nconst reservedProps: ReservedProps = {\n  key: true,\n  state: true,\n  oncreate: true,\n  onupdate: true,\n  onremove: true,\n  shouldupdate: true,\n  \"v-once\": true,\n\n  // Built in directives\n  \"v-if\": true,\n  \"v-unless\": true,\n  \"v-for\": true,\n  \"v-show\": true,\n  \"v-class\": true,\n  \"v-html\": true,\n  \"v-model\": true\n};\n\n/*** Mount ***/\n\nconst eventListenerNames: Record<string, true> = {};\nlet onCleanupList: Function[] = [];\nlet onMountList: Function[] = [];\nlet onUpdateList: Function[] = [];\nlet onUnmountList: Function[] = [];\nconst current: Current = {};\nfunction eventListener(e: Event) {\n  let dom = e.target as DomElement;\n  let name = `v-on${e.type}`;\n  while (dom) {\n    if (dom[name]) {\n      dom[name](e, dom);\n      if (!e.defaultPrevented) {\n        update();\n      }\n      return;\n    }\n    dom = dom.parentNode as DomElement;\n  }\n}\n\nfunction onCleanup(callback: Function): void {\n  if (onCleanupList.indexOf(callback) === -1) {\n    onCleanupList.push(callback);\n  }\n}\nfunction onUnmount(callback: Function): void {\n  if (onUnmountList.indexOf(callback) === -1) {\n    onUnmountList.push(callback);\n  }\n}\nfunction onMount(callback: Function): void {\n  if (onMountList.indexOf(callback) === -1) {\n    onMountList.push(callback);\n  }\n}\nfunction onUpdate(callback: Function): void {\n  if (onUpdateList.indexOf(callback) === -1) {\n    onUpdateList.push(callback);\n  }\n}\n\n/*\n  * Mounts a component to the DOM\n  mount('#app', () => <div>Hello world</div>); // App is a Functional Component\n  mount('#app', { view: () => <div>Hello world</div> }); // App is a POJO component with a view method\n  mount('#app', classInstance); // App is a class instance with a view method\n  mount('#app', <App><div>Hello world</div></App>); // App is a Vnode component (Vnode with tag __component__)\n*/\n\nfunction mount(container: DomElement | string, component: ValyrianComponent | IVnode): void | string {\n  let appContainer = null;\n\n  if (isNodeJs) {\n    appContainer = typeof container === \"string\" ? createDomElement(container === \"svg\" ? \"svg\" : \"div\", container === \"svg\") : container;\n  } else {\n    appContainer = typeof container === \"string\" ? document.querySelectorAll(container)[0] : container;\n  }\n\n  if (!appContainer) {\n    throw new Error(\"Container not found\");\n  }\n\n  let vnodeComponent: VnodeComponent | IVnode;\n\n  if (isVnodeComponent(component)) {\n    vnodeComponent = component;\n  } else if (isComponent(component)) {\n    vnodeComponent = v(component, {});\n  } else {\n    throw new Error(\"Component must be a Valyrian Component or a Vnode component\");\n  }\n\n  if (v.isMounted) {\n    unmount();\n  }\n\n  v.component = vnodeComponent as VnodeComponent;\n  v.container = appContainer;\n  v.mainVnode = domToVnode(appContainer) as VnodeWithDom;\n\n  // update\n  return update();\n}\n\nfunction callCallbackList(list: Function[]): void {\n  for (let i = 0; i < list.length; i++) {\n    list[i]();\n  }\n  list = [];\n}\n\nfunction update(): void | string {\n  if (v.component && v.mainVnode) {\n    onCleanupList.length && callCallbackList(onCleanupList);\n    let oldVnode: VnodeWithDom | null = v.mainVnode as VnodeWithDom;\n    v.mainVnode = new Vnode(v.mainVnode.tag, v.mainVnode.props, [v.component]) as VnodeWithDom;\n    v.mainVnode.dom = oldVnode.dom;\n    patch(v.mainVnode, oldVnode);\n    oldVnode = null;\n    if (v.isMounted === false) {\n      onMountList.length && callCallbackList(onMountList);\n      v.isMounted = true;\n    } else {\n      onUpdateList.length && callCallbackList(onUpdateList);\n    }\n\n    if (isNodeJs) {\n      return v.mainVnode.dom.innerHTML;\n    }\n  }\n}\n\nfunction unmount(): void | string {\n  if (v.isMounted && v.mainVnode && v.component) {\n    onCleanupList.length && callCallbackList(onCleanupList);\n    onUnmountList.length && callCallbackList(onUnmountList);\n    let oldVnode: VnodeWithDom | null = v.mainVnode as VnodeWithDom;\n    v.mainVnode = new Vnode(v.mainVnode.tag, v.mainVnode.props, []) as VnodeWithDom;\n    v.mainVnode.dom = oldVnode.dom;\n    v.mainVnode.isSVG = oldVnode.isSVG;\n    patch(v.mainVnode, oldVnode);\n    oldVnode = null;\n    v.component = null;\n    v.isMounted = false;\n    if (isNodeJs) {\n      return v.mainVnode.dom.innerHTML;\n    }\n  }\n}\n\nlet emptyVnode = new Vnode(\"__empty__\", {}, []);\n\nfunction onremove(vnode: IVnode) {\n  for (let i = 0; i < vnode.children.length; i++) {\n    vnode.children[i].tag !== TextString && onremove(vnode.children[i]);\n  }\n\n  vnode.props.onremove && vnode.props.onremove(vnode);\n}\n\nfunction sharedSetAttribute(prop: string, value: any, vnode: VnodeWithDom, oldVnode?: VnodeWithDom): void | boolean {\n  // It is a reserved prop\n  if (reservedProps[prop]) {\n    // If it is a directive name call the directive\n    if (directives[prop]) {\n      return directives[prop](vnode.props[prop], vnode, oldVnode);\n    }\n\n    return;\n  }\n\n  // It is not a reserved prop so we add it to the dom\n  if (typeof value === \"function\") {\n    if (prop in eventListenerNames === false) {\n      eventListenerNames[prop] = true;\n      (v.container as DomElement).addEventListener(prop.slice(2), eventListener);\n    }\n    vnode.dom[`v-${prop}`] = value;\n    return;\n  }\n\n  if (prop in vnode.dom && vnode.isSVG === false) {\n    // eslint-disable-next-line eqeqeq\n    if (vnode.dom[prop] != value) {\n      vnode.dom[prop] = value;\n    }\n    return;\n  }\n\n  // Use set attribute\n  if (!oldVnode || oldVnode.props[prop] !== value) {\n    if (value === false) {\n      vnode.dom.removeAttribute(prop);\n    } else {\n      vnode.dom.setAttribute(prop, value);\n    }\n  }\n}\n\nfunction setAttribute(name: string, value: any, vnode: VnodeWithDom, oldVnode?: VnodeWithDom) {\n  vnode.props[name] = value;\n\n  sharedSetAttribute(name, value, vnode, oldVnode);\n}\n\nfunction setAttributes(vnode: VnodeWithDom, oldVnode?: VnodeWithDom) {\n  for (let prop in vnode.props) {\n    if (sharedSetAttribute(prop, vnode.props[prop], vnode, oldVnode) === false) {\n      return;\n    }\n  }\n\n  if (oldVnode) {\n    for (let prop in oldVnode.props) {\n      if (prop in vnode.props === false && typeof oldVnode.props[prop] !== \"function\" && prop in reservedProps === false) {\n        if (prop in oldVnode.dom && vnode.isSVG === false) {\n          oldVnode.dom[prop] = null;\n        } else {\n          oldVnode.dom.removeAttribute(prop);\n        }\n      }\n    }\n  }\n}\n\n// eslint-disable-next-line complexity\nfunction patch(newVnode: VnodeWithDom, oldVnode: VnodeWithDom | IVnode = emptyVnode) {\n  current.vnode = newVnode;\n  current.oldVnode = oldVnode === emptyVnode ? Und : (oldVnode as VnodeWithDom);\n  let newTree = newVnode.children;\n  let oldTree = oldVnode.children;\n\n  for (let i = 0; i < newTree.length; i++) {\n    let childVnode = newTree[i];\n    if (childVnode instanceof Vnode) {\n      if (childVnode.tag !== TextString) {\n        if (childVnode.tag === ComponentString) {\n          let component = childVnode.component as ValyrianComponent;\n          current.component = component;\n          let result = (\"view\" in component ? component.view : component).call(component, childVnode.props, ...childVnode.children);\n\n          newTree.splice(i--, 1, result);\n          continue;\n        }\n        childVnode.isSVG = newVnode.isSVG || childVnode.tag === \"svg\";\n      }\n    } else if (Array.isArray(childVnode)) {\n      newTree.splice(i--, 1, ...childVnode);\n    } else if (childVnode === null || childVnode === Und) {\n      newTree.splice(i--, 1);\n    } else {\n      newTree[i] = new Vnode(TextString, {}, []);\n      newTree[i].nodeValue = childVnode;\n    }\n  }\n\n  let oldTreeLength = oldTree.length;\n  let newTreeLength = newTree.length;\n\n  // If new tree is empty, remove all old nodes\n  if (newTreeLength === 0) {\n    for (let i = 0; i < oldTreeLength; i++) {\n      oldTree[i].tag !== TextString && onremove(oldTree[i]);\n    }\n\n    newVnode.dom.textContent = \"\";\n    return;\n  }\n\n  // If the tree is keyed list and is not first render and old tree is keyed list too\n  if (oldTreeLength && \"key\" in newTree[0].props && \"key\" in oldTree[0].props) {\n    let oldKeyedList: { [key: string]: number } = {};\n    for (let i = 0; i < oldTreeLength; i++) {\n      oldKeyedList[oldTree[i].props.key] = i;\n    }\n\n    let newKeyedList: { [key: string]: number } = {};\n    for (let i = 0; i < newTreeLength; i++) {\n      newKeyedList[newTree[i].props.key] = i;\n    }\n\n    for (let i = 0; i < newTreeLength; i++) {\n      let childVnode = newTree[i];\n      let oldChildVnode = oldTree[oldKeyedList[childVnode.props.key]];\n      let shouldPatch = true;\n\n      if (oldChildVnode) {\n        childVnode.dom = oldChildVnode.dom;\n        if (\"v-once\" in childVnode.props || (childVnode.props.shouldupdate && childVnode.props.shouldupdate(childVnode, oldChildVnode) === false)) {\n          // skip this patch\n          childVnode.children = oldChildVnode.children;\n          shouldPatch = false;\n        } else {\n          setAttributes(childVnode, oldChildVnode);\n          if (v.isMounted) {\n            childVnode.props.onupdate && childVnode.props.onupdate(childVnode, oldChildVnode);\n          } else {\n            childVnode.props.oncreate && childVnode.props.oncreate(childVnode);\n          }\n        }\n      } else {\n        childVnode.dom = createDomElement(childVnode.tag, childVnode.isSVG);\n        setAttributes(childVnode);\n        childVnode.props.oncreate && childVnode.props.oncreate(childVnode);\n      }\n\n      if (newVnode.dom.childNodes[i] === Und) {\n        newVnode.dom.appendChild(childVnode.dom);\n      } else if (newVnode.dom.childNodes[i] !== childVnode.dom) {\n        oldTree[i] && newKeyedList[oldTree[i].props.key] === Und && onremove(oldTree[i]);\n        newVnode.dom.replaceChild(childVnode.dom, newVnode.dom.childNodes[i]);\n      }\n\n      shouldPatch && patch(childVnode, oldChildVnode);\n    }\n\n    // For the rest of the children, we should remove them\n    for (let i = newTreeLength; i < oldTreeLength; i++) {\n      if (newKeyedList[oldTree[i].props.key] === Und) {\n        let oldChildVnode = oldTree[i];\n        onremove(oldChildVnode);\n        oldChildVnode.dom.parentNode && oldChildVnode.dom.parentNode.removeChild(oldChildVnode.dom);\n      }\n    }\n\n    return;\n  }\n\n  // If new tree and old tree have more than one child, we should update the dom\n  for (let i = 0; i < newTreeLength; i++) {\n    let newChildVnode = newTree[i];\n\n    // Old child exists\n    if (i < oldTreeLength) {\n      let oldChildVnode = oldTree[i];\n      // New child is a text node\n      if (newChildVnode.tag === TextString) {\n        // Old child is a text node\n        if (oldChildVnode.tag === TextString) {\n          newChildVnode.dom = oldChildVnode.dom;\n          // eslint-disable-next-line eqeqeq\n          if (newChildVnode.dom.nodeValue != newChildVnode.nodeValue) {\n            newChildVnode.dom.nodeValue = newChildVnode.nodeValue as string;\n          }\n          continue;\n        }\n\n        // Old child is a normal node\n        newChildVnode.dom = document.createTextNode(newChildVnode.nodeValue as string) as unknown as DomElement;\n        onremove(oldChildVnode);\n        newVnode.dom.replaceChild(newChildVnode.dom, oldChildVnode.dom);\n\n        continue;\n      }\n\n      // New child is a normal node\n      // Old child is the same type as new child\n      if (oldChildVnode.tag === newChildVnode.tag) {\n        newChildVnode.dom = oldChildVnode.dom;\n        // If we have a v-once directive or a shouldupdate method that returns false, we skip the update\n        if (newChildVnode.props[\"v-once\"] || (newChildVnode.props.shouldupdate && newChildVnode.props.shouldupdate(newChildVnode, oldChildVnode) === false)) {\n          newChildVnode.children = oldChildVnode.children;\n          continue;\n        }\n\n        // We update the dom element\n        setAttributes(newChildVnode, oldChildVnode);\n        if (v.isMounted) {\n          newChildVnode.props.onupdate && newChildVnode.props.onupdate(newChildVnode, oldChildVnode);\n        } else {\n          newChildVnode.props.oncreate && newChildVnode.props.oncreate(newChildVnode);\n        }\n\n        patch(newChildVnode, oldChildVnode);\n        continue;\n      }\n\n      // Old child is of a different type than new child\n      newChildVnode.dom = createDomElement(newChildVnode.tag, newChildVnode.isSVG);\n      setAttributes(newChildVnode);\n      oldChildVnode.tag !== TextString && onremove(oldChildVnode);\n      newChildVnode.props.oncreate && newChildVnode.props.oncreate(newChildVnode);\n      newVnode.dom.replaceChild(newChildVnode.dom, oldChildVnode.dom);\n      patch(newChildVnode, emptyVnode);\n      continue;\n    }\n\n    // Old child does not exists\n    // New child is a text node\n    if (newChildVnode.tag === TextString) {\n      newChildVnode.dom = document.createTextNode(newChildVnode.nodeValue as string) as unknown as DomElement;\n      newVnode.dom.appendChild(newChildVnode.dom);\n      continue;\n    }\n\n    // New child is a normal node\n    newChildVnode.dom = createDomElement(newChildVnode.tag, newChildVnode.isSVG);\n    setAttributes(newChildVnode);\n    newVnode.dom.appendChild(newChildVnode.dom);\n    newChildVnode.props.oncreate && newChildVnode.props.oncreate(newChildVnode);\n    patch(newChildVnode, emptyVnode);\n  }\n\n  // For the rest of the children, we should remove them\n  for (let i = newTreeLength; i < oldTreeLength; i++) {\n    let oldChildVnode = oldTree[i];\n    oldChildVnode.tag !== TextString && onremove(oldChildVnode);\n    oldChildVnode.dom.parentNode && oldChildVnode.dom.parentNode.removeChild(oldChildVnode.dom);\n  }\n}\n\n/*** Directives ***/\n\nfunction directive(name: string, directive: Directive) {\n  let fullName = `v-${name}`;\n  directives[fullName] = directive;\n  reservedProps[fullName] = true;\n}\n\nfunction hideDirective(test: boolean): Directive {\n  return (bool: boolean, vnode: IVnode, oldVnode?: IVnode) => {\n    let value = test ? bool : !bool;\n    if (value) {\n      let newdom = document.createTextNode(\"\");\n      if (oldVnode && oldVnode.dom && oldVnode.dom.parentNode) {\n        oldVnode.tag !== TextString && onremove(oldVnode);\n        oldVnode.dom.parentNode.replaceChild(newdom, oldVnode.dom);\n      }\n      vnode.tag = TextString;\n      vnode.children = [];\n      vnode.props = {};\n      vnode.dom = newdom as unknown as DomElement;\n      return false;\n    }\n  };\n}\n\nconst directives: Directives = {\n  \"v-if\": hideDirective(false),\n  \"v-unless\": hideDirective(true),\n  \"v-for\": (set: unknown[], vnode: VnodeWithDom) => {\n    vnode.children = set.map(vnode.children[0]);\n  },\n  \"v-show\": (bool: boolean, vnode: VnodeWithDom) => {\n    (vnode.dom as unknown as { style: { display: string } }).style.display = bool ? \"\" : \"none\";\n  },\n  \"v-class\": (classes: { [x: string]: boolean }, vnode: VnodeWithDom) => {\n    for (let name in classes) {\n      (vnode.dom as DomElement).classList.toggle(name, classes[name]);\n    }\n  },\n  \"v-html\": (html: string, vnode: VnodeWithDom) => {\n    vnode.children = [trust(html)];\n  },\n  \"v-model\": ([model, property, event]: any[], vnode: VnodeWithDom, oldVnode?: VnodeWithDom) => {\n    let value;\n    let handler;\n    if (vnode.tag === \"input\") {\n      event = event || \"oninput\";\n      switch (vnode.props.type) {\n        case \"checkbox\": {\n          if (Array.isArray(model[property])) {\n            handler = (e: Event) => {\n              let val = (e.target as DomElement & Record<string, any>).value;\n              let idx = model[property].indexOf(val);\n              if (idx === -1) {\n                model[property].push(val);\n              } else {\n                model[property].splice(idx, 1);\n              }\n            };\n            value = model[property].indexOf(vnode.dom.value) !== -1;\n          } else if (\"value\" in vnode.props) {\n            handler = () => {\n              if (model[property] === vnode.props.value) {\n                model[property] = null;\n              } else {\n                model[property] = vnode.props.value;\n              }\n            };\n            value = model[property] === vnode.props.value;\n          } else {\n            handler = () => (model[property] = !model[property]);\n            value = model[property];\n          }\n          setAttribute(\"checked\", value, vnode, oldVnode);\n          break;\n        }\n        case \"radio\": {\n          setAttribute(\"checked\", model[property] === vnode.dom.value, vnode, oldVnode);\n          break;\n        }\n        default: {\n          setAttribute(\"value\", model[property], vnode, oldVnode);\n        }\n      }\n    } else if (vnode.tag === \"select\") {\n      event = event || \"onclick\";\n      if (vnode.props.multiple) {\n        handler = (e: Event & Record<string, any>) => {\n          let val = (e.target as DomElement & Record<string, any>).value;\n          if (e.ctrlKey) {\n            let idx = model[property].indexOf(val);\n            if (idx === -1) {\n              model[property].push(val);\n            } else {\n              model[property].splice(idx, 1);\n            }\n          } else {\n            model[property].splice(0, model[property].length);\n            model[property].push(val);\n          }\n        };\n        vnode.children.forEach((child: IVnode) => {\n          if (child.tag === \"option\") {\n            let value = \"value\" in child.props ? child.props.value : child.children.join(\"\").trim();\n            child.props.selected = model[property].indexOf(value) !== -1;\n          }\n        });\n      } else {\n        vnode.children.forEach((child: IVnode) => {\n          if (child.tag === \"option\") {\n            let value = \"value\" in child.props ? child.props.value : child.children.join(\"\").trim();\n            child.props.selected = value === model[property];\n          }\n        });\n      }\n    } else if (vnode.tag === \"textarea\") {\n      event = event || \"oninput\";\n      vnode.children = [model[property]];\n    }\n\n    if (!vnode.props[event]) {\n      if (!handler) {\n        handler = (e: Event) => (model[property] = (e.target as DomElement & Record<string, any>).value);\n      }\n      setAttribute(event, handler, vnode, oldVnode);\n    }\n  }\n};\n\n/*** Plugins ***/\nconst plugins = new Map<Plugin, any>();\n\nfunction use(plugin: Plugin, options?: Record<string | number | symbol, any>): void | any {\n  if (plugins.has(plugin)) {\n    return plugins.get(plugin);\n  }\n\n  let result = plugin(v, options);\n  plugins.set(plugin, result);\n  return result;\n}\n\n/*** Hyperscript ***/\n\nconst v: Valyrian = function v(tagOrComponent: string | ValyrianComponent, props: Props, ...children: Children): IVnode | VnodeComponent {\n  if (typeof tagOrComponent === \"string\") {\n    return new Vnode(tagOrComponent, props || {}, children);\n  }\n\n  const vnode = new Vnode(\"__component__\", props || {}, children);\n  vnode.component = tagOrComponent;\n  return vnode as VnodeComponent;\n};\n\nv.fragment = (props: Props, ...children: Children): Children => {\n  return children;\n};\n\n/*** V properties and methods ***/\n// This is intended to make the properties and methods available for plugins\nv.current = current;\n\nv.directives = directives;\n\nv.reservedProps = reservedProps;\n\nv.isVnode = isVnode;\nv.isComponent = isComponent;\nv.isVnodeComponent = isVnodeComponent;\n\nv.isMounted = false;\nv.isNodeJs = isNodeJs;\nv.trust = trust;\n\nv.onCleanup = onCleanup;\nv.onUnmount = onUnmount;\nv.onMount = onMount;\nv.onUpdate = onUpdate;\n\nv.mount = mount;\nv.unmount = unmount;\nv.update = update;\n\nv.setAttribute = setAttribute;\nv.directive = directive;\nv.use = use;\n\nexport default v;\n"]}