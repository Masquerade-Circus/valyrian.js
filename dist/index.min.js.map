//# sourceMappingURL=data:application/json;charset=utf-8;base64,{"version":3,"names":["textTag","isNodeJs","Boolean","process","versions","node","createDomElement","tag","isSVG","document","createElementNS","createElement","Vnode","props","children","this","isComponent","component","isVnode","object","isVnodeComponent","domToVnode","dom","nodeType","vnode","nodeValue","i","l","childNodes","length","childDom","push","attributes","attr","nodeName","tagName","toLowerCase","trust","htmlString","div","innerHTML","trim","map","call","item","mainComponent","mainVnode","isMounted","current","oldVnode","event","reservedProps","key","state","onCleanupSet","Set","onMountSet","onUpdateSet","onUnmountSet","onCleanup","callback","add","callSet","set","clear","eventListenerNames","eventListener","e","target","name","type","defaultPrevented","update","parentNode","hideDirective","test","bool","oldnode","newdom","createTextNode","replaceChild","directives","newChildren","style","display","classes","classList","toggle","html","model","property","value","handler","Array","isArray","val","idx","indexOf","splice","sharedSetAttribute","multiple","ctrlKey","forEach","child","join","selected","prevHandler","cleanup","newVnode","addEventListener","slice","removeAttribute","setAttribute","updateAttributes","patch","textContent","newTree","oldTree","oldTreeLength","newTreeLength","oldKeyedList","newKeyedList","newChild","oldChild","shouldPatch","appendChild","removeChild","view","bind","oldMainVnode","unmount","result","removeEventListener","Reflect","deleteProperty","v","tagOrComponent","fragment","_","directive","directiveName","container","querySelectorAll","vnodeComponent"],"sources":["../lib/index.ts"],"sourcesContent":["/* eslint-disable no-use-before-define */\n/* eslint-disable indent */\n/* eslint-disable sonarjs/cognitive-complexity */\n/* eslint-disable complexity */\n\n// The VnodeProperties interface represents properties that can be passed to a virtual node.\nexport interface VnodeProperties {\n  // A unique key for the virtual node, which can be a string or a number.\n  // This is useful for optimizing updates in a list of nodes.\n  key?: string | number;\n  // A state object that is associated with the virtual node.\n  state?: any;\n  // An index signature that allows for any other properties to be added.\n  [key: string | number | symbol]: any;\n}\n\n// The DomElement interface extends the Element interface with an index signature.\n// This allows for any additional properties to be added to DOM elements.\nexport interface DomElement extends Element {\n  [key: string]: any;\n}\n\n// The VnodeInterface represents a virtual node. It has a number of optional fields,\n// including a tag, props, children, and a DOM element.\nexport interface VnodeInterface {\n  // The constructor for the virtual node. It takes a tag, props, and children as arguments.\n  // The tag can be a string, a component, or a POJO component.\n  // eslint-disable-next-line no-unused-vars\n  new (tag: string | Component | POJOComponent, props: VnodeProperties, children: Children): VnodeInterface;\n  // The tag for the virtual node. It can be a string, a component, or a POJO component.\n  tag: string | Component | POJOComponent;\n  // The props for the virtual node.\n  props: VnodeProperties;\n  // The children for the virtual node.\n  children: Children;\n  // A boolean indicating whether the virtual node is an SVG element.\n  isSVG?: boolean;\n  // The DOM element that corresponds to the virtual node.\n  dom?: DomElement;\n  // A boolean indicating whether the virtual node has been processed in the keyed diffing algorithm.\n  processed?: boolean;\n  // An index signature that allows for any additional properties to be added to the virtual node.\n  [key: string | number | symbol]: any;\n}\n\n// The VnodeWithDom interface represents a virtual node that has a DOM element associated with it.\nexport interface VnodeWithDom extends VnodeInterface {\n  dom: DomElement;\n}\n\n// The Component interface represents a function that returns a virtual node or a list of virtual nodes.\n// It can also have additional properties.\nexport interface Component {\n  // The function that returns a virtual node or a list of virtual nodes.\n  // It can take props and children as arguments.\n  // eslint-disable-next-line no-unused-vars\n  (props?: VnodeProperties | null, ...children: any[]): VnodeInterface | Children | any;\n  // An index signature that allows for any additional properties to be added to the component.\n  [key: string]: any;\n}\n\n// The POJOComponent interface represents a \"plain old JavaScript object\" (POJO) component.\n// It has a view function that returns a virtual node or a list of virtual nodes,\n// as well as optional props and children.\n// It can be used also to identify class instance components.\nexport interface POJOComponent {\n  // The view function that returns a virtual node or a list of virtual nodes.\n  view: Component;\n  // The props for the component.\n  props?: VnodeProperties | null;\n  // The children for the component.\n  children?: any[];\n  // An index signature that allows for any additional properties to be added to the POJO component.\n  [key: string]: any;\n}\n\n// The VnodeComponentInterface represents a virtual node that has a component as its tag.\n// It has props and children, just like a regular virtual node.\nexport interface VnodeComponentInterface extends VnodeInterface {\n  tag: Component | POJOComponent;\n  props: VnodeProperties;\n  children: Children;\n}\n\n// The Children interface represents a list of virtual nodes or other values.\nexport interface Children extends Array<VnodeInterface | VnodeComponentInterface | any> {}\n\n// The Directive interface represents a function that can be applied to a virtual node.\n// It receives the value, virtual node, and old virtual node as arguments, and can return a boolean value.\n// If only the virtual node is passed, it means its the on create phase for the v-node.\n// If the old virtual node is also passed, it means its the on update phase for the v-node.\nexport interface Directive {\n  // eslint-disable-next-line no-unused-vars\n  (value: any, vnode: VnodeWithDom, oldVnode?: VnodeWithDom): void | boolean;\n}\n\n// The Directives interface is a mapping of directive names to Directive functions.\nexport interface Directives {\n  [key: string]: Directive;\n}\n\n// The ReservedProps interface is a mapping of reserved prop names to the value `true`.\n// These prop names cannot be used as custom prop names.\nexport interface ReservedProps {\n  [key: string]: true;\n}\n\n// The Current interface represents the current component and virtual node that are being processed.\nexport interface Current {\n  // The current component. It can be a component, a POJO component, or null.\n  component: Component | POJOComponent | null;\n  // The current virtual node. It must have a DOM element associated with it.\n  vnode: VnodeWithDom | null;\n  // The old virtual node. It must have a DOM element associated with it.\n  oldVnode?: VnodeWithDom | null;\n  // The current event. It can be an event or null.\n  event: Event | null;\n}\n\n// The V function is the main function for creating virtual nodes.\n// It takes a tag or component, props, and children as arguments, and returns a virtual node.\nexport interface V {\n  // eslint-disable-next-line no-unused-vars, no-use-before-define\n  (tagOrComponent: string | Component | POJOComponent, props: VnodeProperties | null, ...children: Children):\n    | VnodeInterface\n    | VnodeComponentInterface;\n  // eslint-disable-next-line no-unused-vars, no-use-before-define\n  fragment(_: any, ...children: Children): Children;\n}\n// 'textTag' is a constant string that is used to represent text nodes in the virtual DOM.\nconst textTag = \"#text\";\n\n// 'isNodeJs' is a boolean that is true if the code is running in a Node.js environment and false otherwise.\n// It is determined by checking if the 'process' global object is defined and has a 'versions' property.\nexport let isNodeJs = Boolean(typeof process !== \"undefined\" && process.versions && process.versions.node);\n\n// 'createDomElement' is a function that creates a new DOM element with the specified tag name.\n// If 'isSVG' is true, it creates an SVG element instead of a regular DOM element.\nexport function createDomElement(tag: string, isSVG: boolean = false): DomElement {\n  return isSVG ? document.createElementNS(\"http://www.w3.org/2000/svg\", tag) : document.createElement(tag);\n}\n\n// 'Vnode' is a class that represents a virtual DOM node.\n// It has three properties: 'tag', 'props', and 'children'.\n// 'Vnode' is exported as an object with a type of 'VnodeInterface'.\n// The 'as unknown as VnodeInterface' is used to tell TypeScript that the 'Vnode' function has the same type as 'VnodeInterface'.\nexport const Vnode = function Vnode(this: VnodeInterface, tag: string, props: VnodeProperties, children: Children) {\n  // 'this' refers to the current instance of 'Vnode'.\n  this.tag = tag;\n  this.props = props;\n  this.children = children;\n} as unknown as VnodeInterface;\n\n// 'isComponent' is a function that returns true if the given 'component' is a valid component and false otherwise.\n// A component is either a function or an object with a 'view' function.\nexport function isComponent(component): component is Component {\n  return component && (typeof component === \"function\" || (typeof component === \"object\" && \"view\" in component));\n}\n\n// 'isVnode' is a function that returns true if the given 'object' is a 'Vnode' instance and false otherwise.\nexport const isVnode = (object?: unknown | VnodeInterface): object is VnodeInterface => {\n  // Use the 'instanceof' operator to check if 'object' is an instance of 'Vnode'.\n  return object instanceof Vnode;\n};\n\n// 'isVnodeComponent' is a function that returns true if the given 'object' is a 'Vnode' instance with a 'tag' property that is a valid component.\n// It returns false otherwise.\nexport const isVnodeComponent = (object?: unknown | VnodeComponentInterface): object is VnodeComponentInterface => {\n  // Check if 'object' is a 'Vnode' instance and its 'tag' property is a valid component.\n  return isVnode(object) && isComponent(object.tag);\n};\n\n// 'domToVnode' is a function that converts a DOM node to a 'Vnode' instance.\nexport function domToVnode(dom: any): VnodeWithDom {\n  // If the child node is a text node, create a 'Vnode' instance with the 'textTag' constant as the 'tag' property.\n  // Set the 'dom' property of the 'Vnode' instance to the child DOM node.\n  // Push the 'Vnode' instance to the 'children' array.\n  if (dom.nodeType === 3) {\n    let vnode = new Vnode(textTag, {}, [dom.nodeValue]);\n    vnode.dom = dom;\n    return vnode as VnodeWithDom;\n  }\n\n  let children: VnodeWithDom[] = [];\n  // Iterate through all child nodes of 'dom'.\n  for (let i = 0, l = dom.childNodes.length; i < l; i++) {\n    let childDom = dom.childNodes[i];\n    // If the child node is an element node, recursively call 'domToVnode' to convert it to a 'Vnode' instance.\n    // Push the 'Vnode' instance to the 'children' array.\n    if (childDom.nodeType === 1 || childDom.nodeType === 3) {\n      children.push(domToVnode(childDom));\n    }\n  }\n\n  let props: VnodeProperties = {};\n  // Iterate through all attributes of 'dom'.\n  for (let i = 0, l = dom.attributes.length; i < l; i++) {\n    let attr = dom.attributes[i];\n    // Add the attribute to the 'props' object, using the attribute's name as the key and its value as the value.\n    props[attr.nodeName] = attr.nodeValue;\n  }\n\n  // Create a new 'Vnode' instance with the 'tag' property set to the lowercase version of the DOM node's tag name.\n  // Set the 'props' and 'children' properties to the 'props' and 'children' arrays respectively.\n  // Set the 'dom' property of the 'Vnode' instance to the DOM node.\n  let vnode = new Vnode(dom.tagName.toLowerCase(), props, children);\n  vnode.dom = dom;\n  return vnode as VnodeWithDom;\n}\n\n// This function takes in an HTML string and creates a virtual node representation of it\n// using the `domToVnode` function. It does this by creating a new `div` element, setting\n// its `innerHTML` to the provided HTML string, and then using `map` to iterate over the\n// `childNodes` of the `div` element, passing each one to `domToVnode` to create a virtual\n// node representation of it. The resulting array of virtual nodes is then returned.\nexport function trust(htmlString: string) {\n  let div = createDomElement(\"div\");\n  div.innerHTML = htmlString.trim();\n\n  return [].map.call(div.childNodes, (item) => domToVnode(item));\n}\n\n/* ========================================================================== */\n/* Main Component implementation                                              */\n/* ========================================================================== */\n\n// These variables are used to store the main component, the main virtual node, and whether\n// the main component is currently mounted.\nlet mainComponent: VnodeComponentInterface | null = null;\nlet mainVnode: VnodeWithDom | null = null;\nlet isMounted = false;\n\n// This object is used to store the current virtual node and component being rendered.\nexport const current: Current = {\n  vnode: null,\n  oldVnode: null,\n  component: null,\n  event: null\n};\n\n/* Reserved props ----------------------------------------------------------- */\n// This object is used to store the names of reserved props, which are props that are reserved\n// for special purposes and should not be used as regular component props.\nexport const reservedProps: Record<string, true> = {\n  key: true,\n  state: true,\n  \"v-keep\": true,\n\n  // Built in directives\n  \"v-if\": true,\n  \"v-unless\": true,\n  \"v-for\": true,\n  \"v-show\": true,\n  \"v-class\": true,\n  \"v-html\": true,\n  \"v-model\": true,\n  \"v-create\": true,\n  \"v-update\": true,\n  \"v-cleanup\": true\n};\n\n/* Mounting, Updating, Cleanup and Unmounting ------------------------------- */\n// These sets are used to store callbacks for various lifecycle events: mounting, updating,\n// cleaning up, and unmounting.\nconst onCleanupSet: Set<Function> = new Set();\nconst onMountSet: Set<Function> = new Set();\nconst onUpdateSet: Set<Function> = new Set();\nconst onUnmountSet: Set<Function> = new Set();\n\n// These functions allow users to register callbacks for the corresponding lifecycle events.\nexport function onMount(callback) {\n  if (!isMounted) {\n    onMountSet.add(callback);\n  }\n}\n\nexport function onUpdate(callback) {\n  onUpdateSet.add(callback);\n}\n\nexport function onCleanup(callback) {\n  onCleanupSet.add(callback);\n}\n\nexport function onUnmount(callback) {\n  if (!isMounted) {\n    onUnmountSet.add(callback);\n  }\n}\n\n// This function is used to call all the callbacks in a given set.\nfunction callSet(set) {\n  for (let callback of set) {\n    callback();\n  }\n\n  set.clear();\n}\n\n/* Event listener ----------------------------------------------------------- */\n\n// This object stores the names of event listeners that have been added\nconst eventListenerNames: Record<string, true> = {};\n\n// This function is called when an event occurs\nfunction eventListener(e: Event) {\n  // Set the current event to the event that occurred so that it can be prevented if necessary\n  current.event = e;\n\n  // Convert the target of the event to a DOM element\n  let dom = e.target as DomElement;\n\n  // Create the name of the event listener by adding \"v-on\" to the event type\n  let name = `v-on${e.type}`;\n\n  // Keep going up the DOM tree until we find an element with an event listener\n  // matching the event type\n  while (dom) {\n    if (dom[name]) {\n      // Call the event listener function\n      dom[name](e, dom);\n\n      // If the default action of the event hasn't been prevented, update the DOM\n      if (!e.defaultPrevented) {\n        update();\n      }\n      return;\n    }\n    dom = dom.parentNode as DomElement;\n  }\n\n  current.event = null;\n}\n\n/* Directives --------------------------------------------------------------- */\n\n// This function creates a directive that hides an element based on a condition\nlet hideDirective = (test: boolean) => (bool: boolean, vnode: VnodeInterface, oldnode?: VnodeInterface) => {\n  // If test is true, use the value of bool. Otherwise, use the opposite of bool.\n  let value = test ? bool : !bool;\n\n  // If the value is true, hide the element by replacing it with a text node\n  if (value) {\n    let newdom = document.createTextNode(\"\");\n    if (oldnode && oldnode.dom && oldnode.dom.parentNode) {\n      oldnode.dom.parentNode.replaceChild(newdom, oldnode.dom);\n    }\n    vnode.tag = \"#text\";\n    vnode.children = [];\n    vnode.props = {};\n    vnode.dom = newdom as unknown as DomElement;\n    return false;\n  }\n};\n\n// This object stores all the available directives\nexport const directives: Directives = {\n  // The \"v-if\" directive hides an element if the given condition is false\n  \"v-if\": hideDirective(false),\n\n  // The \"v-unless\" directive hides an element if the given condition is true\n  \"v-unless\": hideDirective(true),\n\n  // The \"v-for\" directive creates a loop and applies a callback function to each item in the loop\n  \"v-for\": (set: unknown[], vnode: VnodeWithDom) => {\n    let newChildren: VnodeInterface[] = [];\n    let callback = vnode.children[0];\n    for (let i = 0, l = set.length; i < l; i++) {\n      newChildren.push(callback(set[i], i));\n    }\n    vnode.children = newChildren;\n  },\n\n  // The \"v-show\" directive shows or hides an element by setting the \"display\" style property\n  \"v-show\": (bool: boolean, vnode: VnodeWithDom) => {\n    (\n      vnode.dom as unknown as {\n        style: { display: string };\n      }\n    ).style.display = bool ? \"\" : \"none\";\n  },\n\n  // The \"v-class\" directive adds or removes class names from an element based on a condition\n  \"v-class\": (classes: { [x: string]: boolean }, vnode: VnodeWithDom) => {\n    // Loop through all the class names in the classes object\n    for (let name in classes) {\n      // Add or remove the class name from the element's class list based on the value in the classes object\n      (vnode.dom as DomElement).classList.toggle(name, classes[name]);\n    }\n  },\n\n  // The \"v-html\" directive sets the inner HTML of an element to the given HTML string\n  \"v-html\": (html: string, vnode: VnodeWithDom) => {\n    // Set the children of the vnode to a trusted version of the HTML string\n    vnode.children = [trust(html)];\n  },\n\n  // The \"v-model\" directive binds the value of an input element to a model property\n  \"v-model\": ([model, property, event]: any[], vnode: VnodeWithDom, oldVnode?: VnodeWithDom) => {\n    let value;\n    // This function updates the model property when the input element's value changes\n    let handler = (e: Event) => (model[property] = (e.target as DomElement & Record<string, any>).value);\n    if (vnode.tag === \"input\") {\n      // If the element is an input, use the \"input\" event by default\n      event = event || \"oninput\";\n      // Depending on the type of input element, use a different handler function\n      switch (vnode.props.type) {\n        case \"checkbox\": {\n          if (Array.isArray(model[property])) {\n            // If the model property is an array, add or remove the value from the array when the checkbox is checked or unchecked\n            handler = (e: Event) => {\n              let val = (e.target as DomElement & Record<string, any>).value;\n              let idx = model[property].indexOf(val);\n              if (idx === -1) {\n                model[property].push(val);\n              } else {\n                model[property].splice(idx, 1);\n              }\n            };\n            // If the value is in the array, set the checkbox to be checked\n            value = model[property].indexOf(vnode.dom.value) !== -1;\n          } else if (\"value\" in vnode.props) {\n            // If the input element has a \"value\" attribute, use it to determine the checked state\n            handler = () => {\n              if (model[property] === vnode.props.value) {\n                model[property] = null;\n              } else {\n                model[property] = vnode.props.value;\n              }\n            };\n            value = model[property] === vnode.props.value;\n          } else {\n            // If there is no \"value\" attribute, use a boolean value for the model property\n            handler = () => (model[property] = !model[property]);\n            value = model[property];\n          }\n          // Set the \"checked\" attribute on the input element\n          // eslint-disable-next-line no-use-before-define\n          sharedSetAttribute(\"checked\", value, vnode);\n          break;\n        }\n        case \"radio\": {\n          // If the element is a radio button, set the \"checked\" attribute based on the value of the model property\n          // eslint-disable-next-line no-use-before-define\n          sharedSetAttribute(\"checked\", model[property] === vnode.dom.value, vnode);\n          break;\n        }\n        default: {\n          // For all other input types, set the \"value\" attribute based on the value of the model property\n          // eslint-disable-next-line no-use-before-define\n          sharedSetAttribute(\"value\", model[property], vnode);\n        }\n      }\n    } else if (vnode.tag === \"select\") {\n      // If the element is a select element, use the \"click\" event by default\n      event = event || \"onclick\";\n      if (vnode.props.multiple) {\n        // If the select element allows multiple selections, update the model property with an array of selected values\n        handler = (e: Event & Record<string, any>) => {\n          let val = (e.target as DomElement & Record<string, any>).value;\n          if (e.ctrlKey) {\n            // If the Ctrl key is pressed, add or remove the value from the array\n            let idx = model[property].indexOf(val);\n            if (idx === -1) {\n              model[property].push(val);\n            } else {\n              model[property].splice(idx, 1);\n            }\n          } else {\n            // If the Ctrl key is not pressed, set the model property to an array with the selected value\n            model[property].splice(0, model[property].length);\n            model[property].push(val);\n          }\n        };\n        // Set the \"selected\" attribute on the options based on whether they are in the model property array\n        vnode.children.forEach((child: VnodeInterface) => {\n          if (child.tag === \"option\") {\n            let value = \"value\" in child.props ? child.props.value : child.children.join(\"\").trim();\n            child.props.selected = model[property].indexOf(value) !== -1;\n          }\n        });\n      } else {\n        // If the select element does not allow multiple selections, set the \"selected\" attribute on the options based on the value of the model property\n        vnode.children.forEach((child: VnodeInterface) => {\n          if (child.tag === \"option\") {\n            let value = \"value\" in child.props ? child.props.value : child.children.join(\"\").trim();\n            child.props.selected = value === model[property];\n          }\n        });\n      }\n    } else if (vnode.tag === \"textarea\") {\n      // If the element is a textarea, use the \"input\" event by default\n      event = event || \"oninput\";\n      // Set the textarea's content to the value of the model property\n      vnode.children = [model[property]];\n    }\n\n    // We assume that the prev handler if any will not be changed by the user across patchs\n    let prevHandler = vnode.props[event];\n\n    // Set the event handler on the element\n    // eslint-disable-next-line no-use-before-define\n    sharedSetAttribute(\n      event,\n      (e: Event) => {\n        handler(e);\n\n        // If the previous handler is defined, call it after the model has been updated\n        if (prevHandler) {\n          prevHandler(e);\n        }\n      },\n      vnode,\n      oldVnode\n    );\n  },\n\n  // The \"v-create\" directive is called when a new virtual node is created.\n  // The provided callback function is called with the new virtual node as an argument.\n  // This directive is only called once per virtual node, when it is first created.\n  // eslint-disable-next-line no-unused-vars\n  \"v-create\": (callback: (vnode: VnodeWithDom) => void, vnode: VnodeWithDom, oldVnode?: VnodeWithDom) => {\n    // If this is not an update, call the callback function with the new virtual node\n    if (!oldVnode) {\n      let cleanup = callback(vnode);\n\n      // If the callback function returns a function, call it when the update is gonna be cleaned up\n      if (typeof cleanup === \"function\") {\n        onCleanup(cleanup);\n      }\n    }\n  },\n\n  // The \"v-update\" directive is called when an existing virtual node is updated.\n  // The provided callback function is called with the new and old virtual nodes as arguments.\n  // This directive is only called once per virtual node update.\n  \"v-update\": (\n    // eslint-disable-next-line no-unused-vars\n    callback: (vnode: VnodeWithDom, oldVnode: VnodeWithDom) => void,\n    vnode: VnodeWithDom,\n    oldVnode?: VnodeWithDom\n  ) => {\n    // If this is an update, call the callback function with the new and old virtual nodes\n    if (oldVnode) {\n      let cleanup = callback(vnode, oldVnode);\n\n      // If the callback function returns a function, call it when the update is gonna be cleaned up\n      if (typeof cleanup === \"function\") {\n        onCleanup(cleanup);\n      }\n    }\n  },\n\n  // The \"v-cleanup\" directive is called when the update is cleaned up.\n  // The provided callback function is called with the old virtual node as an argument.\n  // This directive is only called once per virtual node, when the update is cleaned up.\n  \"v-cleanup\": (\n    // eslint-disable-next-line no-unused-vars\n    callback: (vnode: VnodeWithDom, oldVnode?: VnodeWithDom) => void,\n    vnode: VnodeWithDom,\n    oldVnode?: VnodeWithDom\n  ) => {\n    // Add the callback function to the list of cleanup functions to be called when the update is cleaned up\n    onCleanup(() => callback(vnode, oldVnode));\n  }\n};\n// Add a directive to the global directives object, with the key being the name\n// preceded by \"v-\". Also add the name to the global reservedProps object.\nexport function directive(name: string, directive: Directive) {\n  let directiveName = `v-${name}`;\n  directives[directiveName] = directive;\n  reservedProps[directiveName] = true;\n}\n\n// Set an attribute on a virtual DOM node and update the actual DOM element.\n// If the attribute value is a function, add an event listener for the attribute\n// name to the DOM element represented by mainVnode.\n// If oldVnode is provided, compare the new attribute value to the old value\n// and only update the attribute if the values are different.\nfunction sharedSetAttribute(name: string, value: any, newVnode: VnodeWithDom, oldVnode?: VnodeWithDom): void | boolean {\n  // If the attribute value is a function, add an event listener for the attribute\n  // name to the DOM element represented by mainVnode.\n  if (typeof value === \"function\") {\n    // Only add the event listener if it hasn't been added yet.\n    if (name in eventListenerNames === false) {\n      (mainVnode as VnodeWithDom).dom.addEventListener(name.slice(2), eventListener);\n      eventListenerNames[name] = true;\n    }\n    newVnode.dom[`v-${name}`] = value;\n    return;\n  }\n\n  // If the attribute is present on the DOM element and newVnode is not an SVG,\n  // update the attribute if the value has changed.\n  if (name in newVnode.dom && newVnode.isSVG === false) {\n    // eslint-disable-next-line eqeqeq\n    if (newVnode.dom[name] != value) {\n      newVnode.dom[name] = value;\n    }\n    return;\n  }\n\n  // If oldVnode is not provided or the attribute value has changed, update the\n  // attribute on the DOM element.\n  if (!oldVnode || value !== oldVnode.props[name]) {\n    if (value === false) {\n      newVnode.dom.removeAttribute(name);\n    } else {\n      newVnode.dom.setAttribute(name, value);\n    }\n  }\n}\n\n// Set an attribute on a virtual DOM node and update the actual DOM element.\n// Skip the attribute if it is in the reservedProps object.\nexport function setAttribute(name: string, value: any, newVnode: VnodeWithDom, oldVnode?: VnodeWithDom): void {\n  if (name in reservedProps) {\n    return;\n  }\n  newVnode.props[name] = value;\n  sharedSetAttribute(name, value, newVnode as VnodeWithDom, oldVnode);\n}\n\n// Update the attributes on a virtual DOM node. If oldVnode is provided, remove\n// attributes from the DOM element that are not present in newVnode.props but are\n// present in oldVnode.props. Then, iterate over the attributes in newVnode.props\n// and update the DOM element with the attributes using the sharedSetAttribute\n// function. If an attribute is in the reservedProps object and has a corresponding\n// directive in the directives object, call the directive with the attribute value\n// and the two virtual DOM nodes as arguments. If the directive returns false, exit\n// the loop.\nexport function updateAttributes(newVnode: VnodeWithDom, oldVnode?: VnodeWithDom): void {\n  // If oldVnode is provided, remove attributes from the DOM element that are not\n  // present in newVnode.props but are present in oldVnode.props.\n  if (oldVnode) {\n    for (let name in oldVnode.props) {\n      if (name in newVnode.props === false && name in eventListenerNames === false && name in reservedProps === false) {\n        if (name in newVnode.dom && newVnode.isSVG === false) {\n          newVnode.dom[name] = null;\n        } else {\n          newVnode.dom.removeAttribute(name);\n        }\n      }\n    }\n  }\n\n  // Iterate over the attributes in newVnode.props and update the DOM element with\n  // the attributes using the sharedSetAttribute function.\n  for (let name in newVnode.props) {\n    if (name in reservedProps) {\n      // If there is a directive for the attribute, call it with the attribute value\n      // and the two virtual DOM nodes as arguments. If the directive returns false,\n      // exit the loop.\n      if (name in directives && directives[name](newVnode.props[name], newVnode, oldVnode) === false) {\n        break;\n      }\n      continue;\n    }\n    sharedSetAttribute(name, newVnode.props[name], newVnode, oldVnode);\n  }\n}\n\n/* patch ------------------------------------------------------------------- */\n\n// Patch a DOM node with a new VNode tree\nexport function patch(newVnode: VnodeWithDom, oldVnode?: VnodeWithDom): void {\n  // If the new tree has no children, set the text content of the parent DOM element to an empty string\n  if (newVnode.children.length === 0) {\n    newVnode.dom.textContent = \"\";\n    return;\n  }\n\n  // Get the children of the new and old virtual DOM nodes\n  let newTree = newVnode.children;\n  let oldTree = oldVnode?.children || [];\n  // Get the length of the old tree\n  let oldTreeLength = oldTree.length;\n\n  // If the old tree has children and the first child of the new tree is a VNode with a \"key\"\n  // attribute and the first child of the old tree is a VNode with a \"key\" attribute, update\n  // the DOM element in place by comparing the keys of the nodes in the trees.\n  if (oldTreeLength && newTree[0] instanceof Vnode && \"key\" in newTree[0].props && \"key\" in oldTree[0].props) {\n    // Get the lengths of the new and old trees\n    let newTreeLength = newTree.length;\n\n    // Create an object that maps keys to indices in the old tree\n    let oldKeyedList: { [key: string]: number } = {};\n    for (let i = 0; i < oldTreeLength; i++) {\n      oldKeyedList[oldTree[i].props.key] = i;\n    }\n\n    // Create an object that maps keys to indices in the new tree\n    let newKeyedList: { [key: string]: number } = {};\n    for (let i = 0; i < newTreeLength; i++) {\n      newKeyedList[newTree[i].props.key] = i;\n    }\n\n    // Iterate over the new tree\n    for (let i = 0; i < newTreeLength; i++) {\n      // Get the current new child and the corresponding old child\n      let newChild = newTree[i];\n      let oldChild = oldTree[oldKeyedList[newChild.props.key]];\n      // Initialize a flag to determine whether to patch the child\n      let shouldPatch = true;\n\n      // If the old child exists, update the DOM element of the new child to match the old child's DOM element\n      if (oldChild) {\n        newChild.dom = oldChild.dom;\n        // If the new and old children have the same \"v-keep\" attribute value, update the children of the new child to match the old child's children\n        if (\"v-keep\" in newChild.props && newChild.props[\"v-keep\"] === oldChild.props[\"v-keep\"]) {\n          newChild.children = oldChild.children;\n          // Set the shouldPatch flag to false\n          shouldPatch = false;\n        } else {\n          updateAttributes(newChild, oldChild);\n        }\n\n        // If the old child does not exist, create a new DOM element for the new child and update its attributes\n      } else {\n        newChild.dom = createDomElement(newChild.tag, newChild.isSVG);\n        updateAttributes(newChild);\n      }\n\n      // If the new child's DOM element is not the i-th child of the parent DOM element, insert it\n      if (!newVnode.dom.childNodes[i]) {\n        newVnode.dom.appendChild(newChild.dom);\n\n        // If the new child's DOM element is not the same as the i-th child of the parent DOM element, replace the i-th child with the new child's DOM element\n      } else if (newVnode.dom.childNodes[i] !== newChild.dom) {\n        newVnode.dom.replaceChild(newChild.dom, newVnode.dom.childNodes[i]);\n      }\n\n      // If the shouldPatch flag is true, recursively call the patch function on the new child, passing in the old child as the second argument\n      shouldPatch && patch(newChild, oldChild);\n    }\n\n    // For the rest of the children, we should remove them from the DOM\n    for (let i = newTreeLength; i < oldTreeLength; i++) {\n      // If the i-th child of the old tree does not have a corresponding key in the new tree, remove its DOM element from the parent DOM element\n      if (!newKeyedList[oldTree[i].props.key]) {\n        oldTree[i].dom.parentNode && oldTree[i].dom.parentNode.removeChild(oldTree[i].dom);\n      }\n    }\n    return;\n  }\n\n  // If the new tree has no children, set the text content of the parent DOM element to an empty string\n  if (newTree.length === 0) {\n    newVnode.dom.textContent = \"\";\n    return;\n  }\n\n  // Set the global current object to the new and old virtual DOM nodes\n  current.vnode = newVnode;\n  current.oldVnode = oldVnode;\n\n  // Flatten the new tree\n  // Take into account that is necessary to flatten the tree before the patch process\n  // to let the hooks and signals work properly\n  for (let i = 0; i < newTree.length; i++) {\n    let newChild = newTree[i];\n\n    // If the new child is a Vnode and is not a text node\n    if (newChild instanceof Vnode) {\n      // If the tag of the new child is not a string, it is a component\n      if (typeof newChild.tag !== \"string\") {\n        // Set the current component to the tag of the new child\n        current.component = newChild.tag;\n        // Replace the new child with the result of calling its view or bind method, passing in the props and children as arguments\n        newTree.splice(\n          i--,\n          1,\n          (\"view\" in newChild.tag ? newChild.tag.view.bind(newChild.tag) : newChild.tag.bind(newChild.tag))(\n            newChild.props,\n            ...newChild.children\n          )\n        );\n      }\n\n      continue;\n    }\n\n    // If the new child is an array, flatten it and continue the loop\n    if (Array.isArray(newChild)) {\n      newTree.splice(i--, 1, ...newChild);\n      continue;\n    }\n\n    // If the new child is null or undefined, remove it from the new tree and continue the loop\n    if (newChild === null || newChild === undefined) {\n      newTree.splice(i--, 1);\n      continue;\n    }\n\n    // If the new child is a Vnode, set the text of the Vnode to the text content of its dom property\n    newTree[i] = new Vnode(textTag, {}, [newChild]);\n  }\n\n  // Patch the the old tree\n  for (let i = 0; i < newTree.length; i++) {\n    let newChild = newTree[i];\n\n    if (newChild.tag === textTag) {\n      // If no old child exists at the same index\n      if (i >= oldTreeLength) {\n        // Create a new text node for the new child\n        newChild.dom = document.createTextNode(newChild.children[0]);\n        // Append the new text node to the dom\n        newVnode.dom.appendChild(newChild.dom);\n        continue;\n      }\n\n      // If there is an old child at the same index\n      let oldChild = oldTree[i];\n\n      // If the old child is not a text node\n      if (oldChild.tag !== textTag) {\n        // Create a new text node for the new child\n        newChild.dom = document.createTextNode(newChild.children[0]);\n        // Replace the old child in the dom with the new text node\n        newVnode.dom.replaceChild(newChild.dom, oldChild.dom);\n        continue;\n      }\n\n      // If the old child is a text node\n      // Set the dom property of the text Vnode to the dom property of the old child\n      newChild.dom = oldChild.dom;\n      // If the text content of the old child is different from the new child, update the text content of the old child\n      // eslint-disable-next-line eqeqeq\n      if (newChild.children[0] != oldChild.dom.textContent) {\n        oldChild.dom.textContent = newChild.children[0];\n      }\n      continue;\n    }\n\n    // If the new child is not a text node\n    // Set the isSVG flag for the new child if it is an SVG element or if the parent is an SVG element\n    newChild.isSVG = newVnode.isSVG || newChild.tag === \"svg\";\n\n    // If there is no old child at the same index\n    if (i >= oldTreeLength) {\n      // Create a new dom element for the new child\n      newChild.dom = createDomElement(newChild.tag as string, newChild.isSVG);\n      // Update the attributes of the new child\n      updateAttributes(newChild as VnodeWithDom);\n      // Append the new child to the dom\n      newVnode.dom.appendChild(newChild.dom);\n      // Recursively patch the new child\n      patch(newChild as VnodeWithDom);\n      continue;\n    }\n\n    // If there is an old child at the same index\n    let oldChild = oldTree[i];\n\n    // If the tag of the new child is different from the tag of the old child\n    if (newChild.tag !== oldChild.tag) {\n      // Create a new dom element for the new child\n      newChild.dom = createDomElement(newChild.tag as string, newChild.isSVG);\n      // Update the attributes of the new child\n      updateAttributes(newChild as VnodeWithDom);\n      // Replace the old child in the dom with the new child\n      newVnode.dom.replaceChild(newChild.dom, oldChild.dom);\n      // Recursively patch the new child\n      patch(newChild as VnodeWithDom);\n      continue;\n    }\n\n    // If the tag of the new child is the same as the tag of the old child\n    // Set the dom property of the new child to the dom property of the old child\n    newChild.dom = oldChild.dom;\n    // If the v-keep prop is the same for both the new and old child, set the children of the new child to the children of the old child\n    if (\"v-keep\" in newChild.props && newChild.props[\"v-keep\"] === oldChild.props[\"v-keep\"]) {\n      newChild.children = oldChild.children;\n      continue;\n    }\n\n    // Update the attributes of the new child based on the old child\n    updateAttributes(newChild as VnodeWithDom, oldChild);\n    // Recursively patch the new and old children\n    patch(newChild as VnodeWithDom, oldChild);\n  }\n\n  // Remove any old children that are no longer present in the new tree\n  for (let i = newTree.length; i < oldTreeLength; i++) {\n    newVnode.dom.removeChild(oldTree[i].dom);\n  }\n}\n\n// Update the main Vnode\nexport function update(): void | string {\n  // If the main Vnode exists\n  if (mainVnode) {\n    // Call any cleanup functions that are registered with the onCleanupSet set\n    callSet(onCleanupSet);\n    // Store a reference to the old main Vnode\n    let oldMainVnode = mainVnode;\n    // Create a new main Vnode with the main component as its only child\n    mainVnode = new Vnode(oldMainVnode.tag, oldMainVnode.props, [mainComponent]) as VnodeWithDom;\n    mainVnode.dom = oldMainVnode.dom;\n    mainVnode.isSVG = oldMainVnode.isSVG;\n\n    // Recursively patch the new and old main Vnodes\n    patch(mainVnode, oldMainVnode);\n\n    // Call any update or mount functions that are registered with the onUpdateSet or onMountSet set\n    callSet(isMounted ? onUpdateSet : onMountSet);\n\n    // Set the isMounted flag to true\n    isMounted = true;\n\n    // Reset the current vnode, oldVnode, and component properties\n    current.vnode = null;\n    current.oldVnode = null;\n    current.component = null;\n\n    // If the code is running in a Node.js environment, return the inner HTML of the main Vnode's dom element\n    if (isNodeJs) {\n      return mainVnode.dom.innerHTML;\n    }\n  }\n}\n\n// Update custom Vnode\n// It is assumed that a first mount has already occurred, so,\n// the oldVnode is not null and the dom property of the oldVnode is not null\n// You need to set the dom property of the newVnode to the dom property of the oldVnode\n// The same with the isSVG property\n// Prefer this function over patch to allow for cleanup, onUpdate and onMount sets to be called\nexport function updateVnode(vnode: VnodeWithDom, oldVnode: VnodeWithDom): string | void {\n  // Call any cleanup functions that are registered with the onCleanupSet set\n  callSet(onCleanupSet);\n\n  // Recursively patch the new and old main Vnodes\n  patch(vnode, oldVnode);\n\n  // Set the oldVnode's tag, props, children, dom, and isSVG properties to the newVnode's tag, props, children, dom, and isSVG properties\n  // This is necessary to allow for the oldVnode to be used as the newVnode in the next update with the normal update function\n  oldVnode.tag = vnode.tag;\n  oldVnode.props = { ...vnode.props };\n  oldVnode.children = [...vnode.children];\n  oldVnode.dom = vnode.dom;\n  oldVnode.isSVG = vnode.isSVG;\n\n  // Call any update or mount functions that are registered with the onUpdateSet or onMountSet set\n  callSet(isMounted ? onUpdateSet : onMountSet);\n\n  // Set the isMounted flag to true\n  isMounted = true;\n\n  // Reset the current vnode, oldVnode, and component properties\n  current.vnode = null;\n  current.oldVnode = null;\n  current.component = null;\n\n  if (isNodeJs) {\n    return vnode.dom.innerHTML;\n  }\n}\n\n// Unmount the main Vnode\nexport function unmount() {\n  // If the main Vnode exists\n  if (mainVnode) {\n    // Set the main component to a null Vnode\n    mainComponent = new Vnode(() => null, {}, []) as VnodeComponentInterface;\n    // Update the main Vnode\n    let result = update();\n    // Call any unmount functions that are registered with the onUnmountSet set\n    callSet(onUnmountSet);\n\n    // Remove any event listeners that were added to the main Vnode's dom element\n    for (let name in eventListenerNames) {\n      mainVnode.dom.removeEventListener(name.slice(2).toLowerCase(), eventListener);\n      Reflect.deleteProperty(eventListenerNames, name);\n    }\n\n    // Reset the main component and main Vnode\n    mainComponent = null;\n    mainVnode = null;\n    // Set the isMounted flag to false\n    isMounted = false;\n    // Reset the current vnode, oldVnode, and component properties\n    current.vnode = null;\n    current.oldVnode = null;\n    current.component = null;\n    // Return the result of updating the main Vnode\n    return result;\n  }\n}\n// This function takes in a DOM element or a DOM element selector and a component to be mounted on it.\nexport function mount(dom, component) {\n  // Check if the 'dom' argument is a string. If it is, select the first element that matches the given selector.\n  // Otherwise, use the 'dom' argument as the container.\n  let container =\n    typeof dom === \"string\"\n      ? isNodeJs\n        ? createDomElement(dom, dom === \"svg\")\n        : document.querySelectorAll(dom)[0]\n      : dom;\n\n  // Check if the 'component' argument is a Vnode component or a regular component.\n  // If it's a regular component, create a new Vnode component using the 'component' argument as the tag.\n  // If it's not a component at all, create a new Vnode component with the 'component' argument as the rendering function.\n  let vnodeComponent = isVnodeComponent(component)\n    ? component\n    : isComponent(component)\n    ? new Vnode(component, {}, [])\n    : new Vnode(() => component, {}, []);\n\n  // If a main component already exists and it's not the same as the current 'vnodeComponent', unmount it.\n  if (mainComponent && mainComponent.tag !== vnodeComponent.tag) {\n    unmount();\n  }\n\n  // Set the 'vnodeComponent' as the main component.\n  mainComponent = vnodeComponent as VnodeComponentInterface;\n  // Convert the container element to a Vnode.\n  mainVnode = domToVnode(container);\n  // Update the DOM with the new component.\n  return update();\n}\n\n// This is a utility function for creating Vnode objects.\n// It takes in a tag or component, and optional props and children arguments.\nexport const v: V = (tagOrComponent, props = {}, ...children) => {\n  // Return a new Vnode object using the given arguments.\n  return new Vnode(tagOrComponent, props || {}, children);\n};\n\n// This utility function creates a fragment Vnode.\n// It takes in a placeholder and the children arguments, returns only the children.\nv.fragment = (_: VnodeProperties, ...children: Children) => children;\n"],"mappings":"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"}