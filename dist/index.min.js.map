//# sourceMappingURL=data:application/json;charset=utf-8;base64,{"version":3,"names":["isNodeJs","Boolean","process","versions","node","byStringMatcherCache","byStringMatcherRegex","byStringMatcher","string","match","exec","tag","id","classes","split","splice","matcher","vnode","Vnode","previousMatcher","dom","className","classList","contains","_Vnode","constructor","props","children","processed","isSVG","_parent","this","parent","finalMatcher","findChild","filter","finalFilter","i","l","length","child","result","filterChildren","push","get","index","remove","cleanupVnodeChildren","domToVnodeWeakMap","delete","indexOf","replace","newChild","processVnode","isComponent","component","isVnode","object","isVnodeComponent","domToVnode","nodeType","nodeValue","nodeName","toLowerCase","set","childNodes","childDom","attributes","attr","trust","htmlString","div","document","createElement","innerHTML","trim","Array","from","map","mainComponent","mainVnode","isMounted","current","event","reservedProps","key","state","onCleanupSet","Set","onMountSet","onUpdateSet","onUnmountSet","onCleanup","callback","add","callSet","clear","directives","parentNode","newdom","createTextNode","replaceChild","bool","style","display","name","value","toggle","oldVnode","cleanup","eventListenerNames","eventListener","e","target","type","defaultPrevented","update","sharedSetAttribute","newVnode","removeAttribute","setAttribute","styleKey","hasOwnProperty","addEventListener","slice","addProperties","updateAttributes","removeAttributes","WeakMap","createElementNS","createNewElement","parentVnode","textContent","flatTree","childEl","appendChild","has","oldChild","patch","isArray","view","bind","newTreeLength","oldTree","oldTreeLength","firstOldVnode","oldKeyedList","newKeyedList","shouldPatch","currentNode","domToRemove","maxLen","Math","max","textDom","unmount","removeEventListener","Reflect","deleteProperty","v","tagOrComponent","fragment","_","directive","directiveName","container","querySelector","vnodeComponent"],"sources":["../lib/index.ts"],"sourcesContent":["/* eslint-disable indent */\n/* eslint-disable eqeqeq */\n/* eslint-disable complexity */\ndeclare global {\n  // eslint-disable-next-line vars-on-top, no-var\n  var document: Document;\n  namespace JSX {\n    interface IntrinsicElements {\n      [elemName: string]: any;\n    }\n  }\n}\n\ninterface DefaultRecord extends Record<string | number | symbol, any> {}\n\nexport interface VnodeProperties extends DefaultRecord {\n  key?: string | number;\n}\n\nexport interface DomElement extends Element, DefaultRecord {}\n\nexport interface DomElementWithVnode extends DomElement {\n  vnode: VnodeWithDom;\n}\n\nexport interface Component extends DefaultRecord {\n  (props: VnodeProperties, children: any[]): Vnode | any;\n}\n\nexport interface POJOComponent extends DefaultRecord {\n  view: Component;\n}\n\nexport type ValyrianComponent = Component | POJOComponent;\n\nexport interface VnodeComponentInterface extends Vnode {\n  tag: ValyrianComponent;\n}\n\nexport interface Children extends Array<Vnode | VnodeComponentInterface | ValyrianComponent | any> {}\n\nexport interface Directive {\n  (vnode: VnodeWithDom, oldVnode: VnodeWithDom | null): void | boolean;\n}\n\nexport const isNodeJs = Boolean(typeof process !== \"undefined\" && process.versions && process.versions.node);\n\nconst byStringMatcherCache: Record<string, (vnode: VnodeWithDom) => boolean> = {};\nconst byStringMatcherRegex = /^([^.#]*)?#?([^.]*)?(.*)?$/;\n\nfunction byStringMatcher(string: string) {\n  if (!byStringMatcherCache[string]) {\n    // Use regular expression to extract tag, id, and classes\n    const match = byStringMatcherRegex.exec(string) as RegExpMatchArray;\n    const tag = match[1];\n    const id = match[2];\n    const classes = match[3] ? match[3].split(\".\").splice(1) : null;\n\n    let matcher: (vnode: VnodeWithDom) => boolean = (vnode: VnodeWithDom) => vnode instanceof Vnode;\n    if (tag) {\n      const previousMatcher = matcher;\n      matcher = (vnode: VnodeWithDom) => previousMatcher(vnode) && vnode.tag === tag;\n    }\n\n    if (id) {\n      const previousMatcher = matcher;\n      matcher = (vnode: VnodeWithDom) => previousMatcher(vnode) && vnode.dom.id === id;\n    }\n\n    if (classes) {\n      const previousMatcher = matcher;\n      matcher = (vnode: VnodeWithDom) => {\n        if (!previousMatcher(vnode)) {\n          return false;\n        }\n\n        for (const className of classes) {\n          if (!vnode.dom.classList.contains(className)) {\n            return false;\n          }\n        }\n\n        return true;\n      };\n    }\n\n    byStringMatcherCache[string] = matcher;\n  }\n\n  return byStringMatcherCache[string];\n}\n\nexport class Vnode {\n  constructor(\n    public tag: string | Component | POJOComponent,\n    public props: VnodeProperties,\n    public children: Children,\n    public dom?: DomElementWithVnode,\n    public processed?: boolean,\n    public isSVG?: boolean,\n    public _parent?: Vnode\n  ) {}\n\n  parent(matcher?: string | ((vnode: VnodeWithDom) => boolean)): Vnode | void {\n    if (!matcher) {\n      return this._parent;\n    }\n\n    const finalMatcher = typeof matcher === \"string\" ? byStringMatcher(matcher) : matcher;\n\n    let parent = this._parent as VnodeWithDom;\n    while (parent) {\n      if (finalMatcher(parent)) {\n        return parent;\n      }\n      parent = parent._parent;\n    }\n  }\n\n  findChild(filter: string | ((vnode: VnodeWithDom) => boolean)): VnodeWithDom | void {\n    const finalFilter =\n      typeof filter === \"string\"\n        ? byStringMatcher(filter)\n        : (vnode: VnodeWithDom) => vnode instanceof Vnode && filter(vnode);\n\n    for (let i = 0, l = this.children.length; i < l; i++) {\n      const child = this.children[i];\n      if (finalFilter(child as VnodeWithDom)) {\n        return child as VnodeWithDom;\n      }\n    }\n\n    for (let i = 0, l = this.children.length; i < l; i++) {\n      const child = this.children[i];\n      if (child instanceof Vnode) {\n        const result = child.findChild(finalFilter);\n        if (result) {\n          return result;\n        }\n      }\n    }\n  }\n\n  filterChildren(filter: string | ((vnode: VnodeWithDom, i: number) => boolean)): VnodeWithDom[] {\n    const finalFilter =\n      typeof filter === \"string\"\n        ? byStringMatcher(filter)\n        : (vnode: VnodeWithDom, i: number) => vnode instanceof Vnode && filter(vnode, i);\n    const result: VnodeWithDom[] = [];\n    for (let i = 0, l = this.children.length; i < l; i++) {\n      const child = this.children[i];\n      if (finalFilter(child as VnodeWithDom, i)) {\n        result.push(child as VnodeWithDom);\n      }\n    }\n\n    return result;\n  }\n\n  get(index: number): VnodeWithDom | void {\n    return this.children[index];\n  }\n\n  remove(this: VnodeWithDom) {\n    this.dom.remove();\n    cleanupVnodeChildren(this);\n    domToVnodeWeakMap.delete(this.dom);\n    this._parent.children.splice(this._parent.children.indexOf(this), 1);\n  }\n\n  replace(this: VnodeWithDom, newChild: VnodeWithDom) {\n    this._parent.children.splice(this._parent.children.indexOf(this), 1, newChild);\n    processVnode(this._parent, newChild, this.dom);\n    cleanupVnodeChildren(this);\n    domToVnodeWeakMap.delete(this.dom);\n  }\n}\n\nexport interface VnodeWithDom extends Vnode {\n  tag: string;\n  dom: DomElementWithVnode;\n  _parent: VnodeWithDom;\n}\n\nexport const isComponent = (component: unknown): component is Component => typeof component === \"function\";\nexport const isVnode = (object?: unknown): object is Vnode => object instanceof Vnode;\n\nexport const isVnodeComponent = (object?: unknown): object is VnodeComponentInterface => {\n  return isVnode(object) && isComponent(object.tag);\n};\n\nexport function domToVnode(dom: any): VnodeWithDom {\n  if (dom.nodeType === 3) {\n    return dom.nodeValue;\n  }\n\n  const vnode = new Vnode(dom.nodeName.toLowerCase(), {}, []) as VnodeWithDom;\n  vnode.dom = dom;\n  domToVnodeWeakMap.set(dom, vnode);\n\n  for (let i = 0, l = dom.childNodes.length; i < l; i++) {\n    const childDom = dom.childNodes[i];\n    if (childDom.nodeType === 3) {\n      vnode.children.push(childDom.nodeValue);\n    } else if (childDom.nodeType === 1) {\n      const childVnode = domToVnode(childDom);\n      childVnode._parent = vnode;\n      vnode.children.push();\n    }\n  }\n\n  for (let i = 0, l = dom.attributes.length; i < l; i++) {\n    const attr = dom.attributes[i];\n    vnode.props[attr.nodeName] = attr.nodeValue;\n  }\n\n  return vnode as VnodeWithDom;\n}\n\nexport function trust(htmlString: string) {\n  const div = document.createElement(\"div\");\n  div.innerHTML = htmlString.trim();\n  return Array.from(div.childNodes).map(domToVnode);\n}\n\nlet mainComponent: VnodeComponentInterface | null = null;\nlet mainVnode: VnodeWithDom | null = null;\nlet isMounted = false;\n\n// This object is used to store the current virtual node and component being rendered.\nexport const current = {\n  vnode: null as Vnode | null,\n  component: null as ValyrianComponent | null,\n  event: null as Event | null\n};\n\n/* Reserved props ----------------------------------------------------------- */\n// This object is used to store the names of reserved props, which are props that are reserved\n// for special purposes and should not be used as regular component props.\nexport const reservedProps: Record<string, true> = {\n  key: true,\n  state: true,\n  \"v-keep\": true, // Used to keep the element when the parent is updated\n  \"v-text\": true, // Used to set the text content of an element\n\n  // Built in directives\n  \"v-if\": true,\n  \"v-for\": true,\n  \"v-show\": true,\n  \"v-class\": true,\n  \"v-html\": true,\n  \"v-model\": true,\n  \"v-create\": true,\n  \"v-update\": true,\n  \"v-cleanup\": true\n};\n\n/* Mounting, Updating, Cleanup and Unmounting ------------------------------- */\nconst onCleanupSet = new Set<Function>();\nconst onMountSet = new Set<Function>();\nconst onUpdateSet = new Set<Function>();\nconst onUnmountSet = new Set<Function>();\nexport const onMount = (callback: Function) => !isMounted && onMountSet.add(callback);\nexport const onUpdate = (callback: Function) => onUpdateSet.add(callback);\nexport const onCleanup = (callback: Function) => onCleanupSet.add(callback);\nexport const onUnmount = (callback: Function) => !isMounted && onUnmountSet.add(callback);\nconst callSet = (set: Set<Function>) => {\n  for (const callback of set) {\n    callback();\n  }\n  set.clear();\n};\n\n/* Directives --------------------------------------------------------------- */\nexport const directives: Record<string, Directive> = {\n  \"v-if\": (vnode: VnodeWithDom) => {\n    const bool = Boolean(vnode.props[\"v-if\"]);\n    if (bool) {\n      const parentNode = vnode.dom?.parentNode;\n      if (parentNode) {\n        const newdom = document.createTextNode(\"\");\n        parentNode.replaceChild(newdom, vnode.dom);\n      }\n\n      return false;\n    }\n  },\n\n  \"v-for\": (vnode: VnodeWithDom) => {\n    const [set, callback] = vnode.props[\"v-for\"];\n    for (let i = 0, l = set.length; i < l; i++) {\n      vnode.children.push(callback(set[i], i));\n    }\n  },\n\n  \"v-show\": (vnode: VnodeWithDom) => {\n    const bool = Boolean(vnode.props[\"v-show\"]);\n    (\n      vnode.dom as unknown as {\n        style: { display: string };\n      }\n    ).style.display = bool ? \"\" : \"none\";\n  },\n\n  \"v-class\": (vnode: VnodeWithDom) => {\n    const classes = vnode.props[\"v-class\"];\n    const classList = (vnode.dom as DomElement).classList;\n    for (const name in classes) {\n      const value = typeof classes[name] === \"function\" ? (classes[name] as Function)() : classes[name];\n      classList.toggle(name, value);\n    }\n  },\n\n  \"v-html\": (vnode: VnodeWithDom) => {\n    vnode.children = [trust(vnode.props[\"v-html\"])];\n  },\n\n  \"v-create\": (vnode: VnodeWithDom, oldVnode: VnodeWithDom | null) => {\n    if (!oldVnode) {\n      const callback = vnode.props[\"v-create\"];\n      const cleanup = callback(vnode);\n\n      if (typeof cleanup === \"function\") {\n        onCleanup(cleanup);\n      }\n    }\n  },\n\n  \"v-update\": (vnode: VnodeWithDom, oldVnode: VnodeWithDom | null) => {\n    if (oldVnode) {\n      const callback = vnode.props[\"v-update\"];\n      const cleanup = callback(vnode, oldVnode);\n\n      if (typeof cleanup === \"function\") {\n        onCleanup(cleanup);\n      }\n    }\n  },\n\n  \"v-cleanup\": (vnode: VnodeWithDom) => {\n    const callback = vnode.props[\"v-cleanup\"];\n    onCleanup(() => callback(vnode));\n  }\n};\n\nexport function directive(name: string, directive: Directive) {\n  const directiveName = `v-${name}`;\n  directives[directiveName] = directive;\n  reservedProps[directiveName] = true;\n}\n\n/* Event listener ----------------------------------------------------------- */\nconst eventListenerNames: Record<string, true> = {};\n\nfunction eventListener(e: Event) {\n  current.event = e;\n  let dom = e.target as DomElement;\n  const name = `on${e.type}`;\n\n  while (dom) {\n    const oldVnode = domToVnodeWeakMap.get(dom);\n    if (oldVnode && oldVnode.props[name]) {\n      oldVnode.props[name](e, oldVnode);\n\n      if (!e.defaultPrevented) {\n        update();\n      }\n      return;\n    }\n    dom = dom.parentNode as DomElement;\n  }\n\n  current.event = null;\n}\n\nfunction sharedSetAttribute(\n  name: string,\n  value: any,\n  newVnode: VnodeWithDom,\n  oldVnode: VnodeWithDom | null\n): void | boolean {\n  if (typeof value === \"function\") {\n    if (name in eventListenerNames === false) {\n      (mainVnode as VnodeWithDom).dom.addEventListener(name.slice(2), eventListener);\n      eventListenerNames[name] = true;\n    }\n    return;\n  }\n\n  if (name === \"style\" && typeof value === \"object\") {\n    // Apply styles\n    for (const styleKey in value) {\n      if (value.hasOwnProperty(styleKey)) {\n        newVnode.dom.style[styleKey] = value[styleKey];\n      }\n    }\n    return;\n  }\n\n  if (name in newVnode.dom) {\n    if (newVnode.dom[name] != value) {\n      newVnode.dom[name] = value;\n    }\n    return;\n  }\n\n  if (!oldVnode || value !== oldVnode.props[name]) {\n    if (value === false) {\n      newVnode.dom.removeAttribute(name);\n    } else {\n      newVnode.dom.setAttribute(name, value);\n    }\n  }\n}\n\nexport function setAttribute(name: string, value: any, newVnode: VnodeWithDom, oldVnode: VnodeWithDom | null): void {\n  if (!reservedProps[name]) {\n    newVnode.props[name] = value;\n    sharedSetAttribute(name, value, newVnode, oldVnode);\n  }\n}\n\nfunction removeAttributes(vnode: VnodeWithDom, oldVnode: VnodeWithDom | null): void {\n  if (oldVnode) {\n    for (const name in oldVnode.props) {\n      if (!vnode.props[name] && !eventListenerNames[name] && !reservedProps[name]) {\n        if (name in vnode.dom) {\n          vnode.dom[name] = null;\n        } else {\n          vnode.dom.removeAttribute(name);\n        }\n      }\n    }\n  }\n}\n\nfunction addProperties(vnode: VnodeWithDom, oldVnode: VnodeWithDom | null) {\n  for (const name in vnode.props) {\n    if (reservedProps[name]) {\n      if (directives[name] && directives[name](vnode, oldVnode) === false) {\n        break;\n      }\n      continue;\n    }\n    sharedSetAttribute(name, vnode.props[name], vnode, oldVnode);\n  }\n}\n\nexport function updateAttributes(newVnode: VnodeWithDom, oldVnode: VnodeWithDom | null): void {\n  removeAttributes(newVnode, oldVnode);\n  addProperties(newVnode, oldVnode);\n}\n\n/* patch ------------------------------------------------------------------- */\n\nconst domToVnodeWeakMap = new WeakMap<DomElement, VnodeWithDom>();\n\nfunction createElement(tag: string, isSVG: boolean): DomElement {\n  return isSVG\n    ? document.createElementNS(\"http://www.w3.org/2000/svg\", tag)\n    : (document.createElement(tag) as DomElement);\n}\n\nfunction createNewElement(vnode: any, parentVnode: VnodeWithDom) {\n  if (vnode instanceof Vnode === false) {\n    return document.createTextNode(vnode);\n  }\n\n  vnode._parent = parentVnode;\n  const dom = createElement(vnode.tag, vnode.isSVG);\n  vnode.dom = dom;\n  domToVnodeWeakMap.set(dom, vnode);\n  addProperties(vnode, null);\n\n  if (\"v-text\" in vnode.props) {\n    dom.textContent = vnode.props[\"v-text\"];\n    return dom;\n  }\n\n  flatTree(vnode);\n\n  if (vnode.children.length === 0) {\n    return dom;\n  }\n\n  for (let i = 0, l = vnode.children.length; i < l; i++) {\n    const childVnode = vnode.children[i];\n    const childEl = createNewElement(childVnode, vnode);\n    dom.appendChild(childEl);\n  }\n\n  return dom;\n}\n\nfunction cleanupVnodeChildren(vnode: VnodeWithDom) {\n  for (let i = 0, l = vnode.dom.childNodes.length; i < l; i++) {\n    const child = vnode.dom.childNodes[i];\n    if (domToVnodeWeakMap.has(child as DomElement)) {\n      const oldVnode = domToVnodeWeakMap.get(child as DomElement) as VnodeWithDom;\n      cleanupVnodeChildren(oldVnode);\n      domToVnodeWeakMap.delete(child as DomElement);\n    }\n  }\n}\n\nfunction processVnode(newVnode: VnodeWithDom, newChild: VnodeWithDom, oldChild: DomElement): void {\n  newChild.isSVG = newVnode.isSVG || newChild.tag === \"svg\";\n\n  if (!oldChild || newChild.tag !== oldChild.nodeName.toLowerCase()) {\n    newChild.dom = createNewElement(newChild, newVnode) as DomElementWithVnode;\n    if (oldChild) {\n      newVnode.dom.replaceChild(newChild.dom, oldChild);\n    } else {\n      newVnode.dom.appendChild(newChild.dom);\n    }\n    return;\n  }\n\n  newChild._parent = newVnode;\n  const oldVnode = domToVnodeWeakMap.get(oldChild);\n  newChild.dom = oldChild as DomElementWithVnode;\n  domToVnodeWeakMap.set(oldChild, newChild);\n\n  if (oldVnode && \"v-keep\" in newChild.props && newChild.props[\"v-keep\"] === oldVnode.props[\"v-keep\"]) {\n    newChild.children = oldVnode.children;\n    return;\n  }\n\n  updateAttributes(newChild as VnodeWithDom, oldVnode || null);\n\n  if (\"v-text\" in newChild.props) {\n    if (newChild.dom.textContent != newChild.props[\"v-text\"]) {\n      newChild.dom.textContent = newChild.props[\"v-text\"];\n    }\n    return;\n  }\n\n  if (newChild.children.length === 0) {\n    if (newChild.dom.childNodes.length > 0) {\n      newChild.dom.textContent = \"\";\n      cleanupVnodeChildren(newChild);\n    }\n    return;\n  }\n\n  patch(newChild as VnodeWithDom);\n}\n\nfunction flatTree(newVnode: VnodeWithDom) {\n  current.vnode = newVnode;\n  const { children } = newVnode;\n  let i = 0;\n\n  while (i < children.length) {\n    const newChild = children[i];\n\n    if (newChild == null) {\n      children.splice(i, 1);\n      continue;\n    }\n\n    if (Array.isArray(newChild)) {\n      children.splice(i, 1, ...newChild);\n      continue;\n    }\n\n    if (newChild instanceof Vnode && typeof newChild.tag !== \"string\") {\n      const component = (\"view\" in newChild.tag ? newChild.tag.view : newChild.tag).bind(newChild.tag);\n      current.component = component;\n      children[i] = component(newChild.props, newChild.children);\n    }\n\n    i++;\n  }\n}\n\nexport function patch(newVnode: VnodeWithDom): void {\n  flatTree(newVnode);\n  const { dom, children } = newVnode;\n  const newTreeLength = children.length;\n\n  if (newTreeLength === 0) {\n    dom.textContent = \"\";\n    cleanupVnodeChildren(newVnode);\n    return;\n  }\n\n  const oldTree = dom.childNodes as unknown as DomElementWithVnode[];\n  const oldTreeLength = oldTree.length;\n  const firstOldVnode = oldTree[0] && domToVnodeWeakMap.get(oldTree[0]);\n\n  if (firstOldVnode && children[0] instanceof Vnode && \"key\" in children[0].props && \"key\" in firstOldVnode.props) {\n    const oldKeyedList: Record<string, number> = {};\n    const newKeyedList: Record<string, number> = {};\n    const childNodes = newVnode.dom.childNodes;\n\n    // Create key maps while also handling removal of nodes not present in children\n    for (let i = 0; i < oldTreeLength; i++) {\n      const oldVnode = domToVnodeWeakMap.get(oldTree[i]);\n      oldKeyedList[oldVnode?.props.key as any] = i;\n      if (i < newTreeLength) {\n        newKeyedList[children[i].props.key] = i;\n      }\n    }\n\n    for (let i = 0; i < newTreeLength; i++) {\n      const newChild = children[i];\n      newChild._parent = newVnode;\n      newChild.isSVG = newVnode.isSVG || newChild.tag === \"svg\";\n      const oldChildIndex = oldKeyedList[newChild.props.key];\n      const oldChild = oldTree[oldChildIndex];\n      let shouldPatch = true;\n\n      if (oldChild) {\n        newChild.dom = oldChild;\n        const oldVnode = domToVnodeWeakMap.get(oldChild) as VnodeWithDom;\n\n        newChild.dom = oldChild;\n        domToVnodeWeakMap.set(oldChild, newChild);\n\n        if (oldVnode && \"v-keep\" in newChild.props && newChild.props[\"v-keep\"] === oldVnode.props[\"v-keep\"]) {\n          newChild.children = oldVnode.children;\n          shouldPatch = false;\n        } else {\n          updateAttributes(newChild, oldVnode);\n          if (\"v-text\" in newChild.props) {\n            if (newChild.dom.textContent != newChild.props[\"v-text\"]) {\n              newChild.dom.textContent = newChild.props[\"v-text\"];\n            }\n            shouldPatch = false;\n          } else if (newChild.children.length === 0) {\n            if (newChild.dom.childNodes.length > 0) {\n              newChild.dom.textContent = \"\";\n              cleanupVnodeChildren(newChild);\n            }\n            shouldPatch = false;\n          }\n        }\n      } else {\n        newChild.dom = createNewElement(newChild, newVnode) as DomElementWithVnode;\n        shouldPatch = false;\n      }\n\n      const currentNode = childNodes[i];\n      if (!currentNode) {\n        newVnode.dom.appendChild(newChild.dom);\n      } else if (currentNode !== newChild.dom) {\n        newVnode.dom.replaceChild(newChild.dom, currentNode);\n      }\n\n      shouldPatch && patch(newChild);\n    }\n\n    for (let i = newTreeLength; i < oldTreeLength; i++) {\n      const oldVnode = domToVnodeWeakMap.get(oldTree[i]);\n      if (oldVnode && !newKeyedList[oldVnode.props.key as any]) {\n        const domToRemove = oldTree[i];\n        domToRemove.parentNode && domToRemove.remove();\n        cleanupVnodeChildren(oldVnode);\n      }\n    }\n    return;\n  }\n\n  const maxLen = Math.max(newTreeLength, oldTreeLength);\n\n  for (let i = 0; i < maxLen; i++) {\n    const newChild = children[i];\n    const oldChild = oldTree[i] as DomElementWithVnode;\n    const oldVnode = domToVnodeWeakMap.get(oldChild);\n\n    if (newChild === oldVnode) {\n      continue;\n    }\n\n    if (!oldChild) {\n      newVnode.dom.appendChild(createNewElement(newChild, newVnode));\n      continue;\n    }\n\n    if (!newChild) {\n      oldChild.remove();\n      oldVnode && cleanupVnodeChildren(oldVnode);\n      continue;\n    }\n\n    if (newChild instanceof Vnode === false) {\n      if (oldChild.nodeType !== 3) {\n        const textDom = document.createTextNode(newChild as string);\n        newVnode.dom.replaceChild(textDom, oldChild);\n        if (domToVnodeWeakMap.has(oldChild)) {\n          oldVnode && cleanupVnodeChildren(oldVnode);\n          domToVnodeWeakMap.delete(oldChild);\n        }\n      } else if (oldChild.nodeValue != newChild) {\n        oldChild.nodeValue = newChild as string;\n      }\n      continue;\n    }\n\n    processVnode(newVnode, newChild as VnodeWithDom, oldChild);\n  }\n}\n\nexport function update(): void | string {\n  if (mainVnode) {\n    callSet(onCleanupSet);\n    mainVnode.children = [mainComponent];\n    patch(mainVnode);\n    callSet(isMounted ? onUpdateSet : onMountSet);\n    isMounted = true;\n    current.vnode = null;\n    current.component = null;\n    if (isNodeJs) {\n      return mainVnode.dom.innerHTML;\n    }\n  }\n}\n\nexport function updateVnode(vnode: VnodeWithDom): string | void {\n  callSet(onCleanupSet);\n  patch(vnode);\n  callSet(isMounted ? onUpdateSet : onMountSet);\n  isMounted = true;\n  current.vnode = null;\n  current.component = null;\n  if (isNodeJs) {\n    return vnode.dom.innerHTML;\n  }\n}\n\nexport function unmount() {\n  if (mainVnode) {\n    mainComponent = new Vnode(() => null, {}, []) as VnodeComponentInterface;\n    const result = update();\n    callSet(onUnmountSet);\n    for (const name in eventListenerNames) {\n      mainVnode.dom.removeEventListener(name.slice(2).toLowerCase(), eventListener);\n      Reflect.deleteProperty(eventListenerNames, name);\n    }\n\n    mainComponent = null;\n    mainVnode = null;\n    isMounted = false;\n    current.vnode = null;\n    current.component = null;\n    return result;\n  }\n}\n\nexport function mount(dom: string | DomElement, component: any) {\n  const container =\n    typeof dom === \"string\" ? (isNodeJs ? createElement(dom, dom === \"svg\") : document.querySelector(dom)) : dom;\n  const vnodeComponent = isVnodeComponent(component)\n    ? component\n    : isComponent(component)\n    ? new Vnode(component, {}, [])\n    : new Vnode(() => component, {}, []);\n  if (mainComponent && mainComponent.tag !== vnodeComponent.tag) {\n    unmount();\n  }\n  mainComponent = vnodeComponent as VnodeComponentInterface;\n  mainVnode = domToVnode(container);\n  return update();\n}\n\nexport function v(tagOrComponent: string | Component, props: VnodeProperties, ...children: Children) {\n  return new Vnode(tagOrComponent, props || {}, children);\n}\n\nv.fragment = (_: VnodeProperties, ...children: Children) => children;\n"],"mappings":"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"}