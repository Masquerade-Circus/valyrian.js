//# sourceMappingURL=data:application/json;charset=utf-8;base64,{"version":3,"names":["textTag","isNodeJs","Boolean","process","versions","node","createDomElement","tag","isSVG","document","createElementNS","createElement","Vnode","props","children","this","isComponent","component","isVnode","object","isVnodeComponent","domToVnode","dom","i","l","childNodes","length","childDom","nodeType","push","vnode","attributes","attr","nodeName","nodeValue","tagName","toLowerCase","trust","htmlString","div","innerHTML","trim","map","call","item","mainComponent","mainVnode","isMounted","current","oldVnode","reservedProps","key","state","onCleanupSet","Set","onMountSet","onUpdateSet","onUnmountSet","onCleanup","callback","add","callSet","set","clear","eventListenerNames","eventListener","e","target","name","type","defaultPrevented","update","parentNode","hideDirective","test","bool","oldnode","newdom","createTextNode","replaceChild","directives","newChildren","style","display","classes","classList","toggle","html","model","property","event","oldModel","oldProperty","oldEvent","value","handler","Array","isArray","val","idx","indexOf","splice","sharedSetAttribute","multiple","ctrlKey","forEach","child","join","selected","prevHandler","newVnode","addEventListener","slice","removeAttribute","setAttribute","updateAttributes","patch","newTree","oldTree","oldTreeLength","newTreeLength","oldKeyedList","newKeyedList","newChild","oldChild","shouldPatch","appendChild","removeChild","view","bind","textContent","oldMainVnode","unmount","result","removeEventListener","Reflect","deleteProperty","v","tagOrComponent","fragment","directive","directiveName","container","querySelectorAll","vnodeComponent"],"sources":["../lib/index.ts"],"sourcesContent":["/* eslint-disable indent */\n/* eslint-disable sonarjs/cognitive-complexity */\n/* eslint-disable complexity */\n\nexport interface Props {\n  key?: string | number;\n  state?: any;\n  oncreate?: {\n    // eslint-disable-next-line no-unused-vars, no-use-before-define\n    (vnode: VnodeInterface): never;\n  };\n  onupdate?: {\n    // eslint-disable-next-line no-unused-vars, no-use-before-define\n    (vnode: VnodeInterface, oldVnode: VnodeInterface): never;\n  };\n  onremove?: {\n    // eslint-disable-next-line no-unused-vars, no-use-before-define\n    (oldVnode: VnodeInterface): never;\n  };\n  shouldupdate?: {\n    // eslint-disable-next-line no-unused-vars, no-use-before-define\n    (vnode: VnodeInterface, oldVnode: VnodeInterface): undefined | boolean;\n  };\n  [key: string | number | symbol]: any;\n}\nexport interface DomElement extends Element {\n  [key: string]: any;\n}\nexport interface VnodeInterface {\n  // eslint-disable-next-line no-unused-vars, no-use-before-define\n  new (tag: string | Component | POJOComponent, props: Props, children: Children): VnodeInterface;\n  // eslint-disable-next-line no-unused-vars, no-use-before-define\n  tag: string | Component | POJOComponent;\n  props: Props;\n  // eslint-disable-next-line no-unused-vars, no-use-before-define\n  children: Children;\n  isSVG?: boolean;\n  dom?: DomElement;\n  processed?: boolean;\n  [key: string | number | symbol]: any;\n}\nexport interface VnodeWithDom extends VnodeInterface {\n  dom: DomElement;\n}\nexport interface Component {\n  // eslint-disable-next-line no-unused-vars, no-use-before-define\n  (props?: Props | null, ...children: any[]): VnodeInterface | Children | any;\n  [key: string]: any;\n}\nexport interface POJOComponent {\n  view: Component;\n  props?: Props | null;\n  children?: any[];\n  [key: string]: any;\n}\nexport interface VnodeComponentInterface extends VnodeInterface {\n  tag: Component | POJOComponent;\n  props: Props;\n  // eslint-disable-next-line no-unused-vars, no-use-before-define\n  children: Children;\n}\nexport interface Children extends Array<VnodeInterface | VnodeComponentInterface | any> {}\nexport interface Directive {\n  // eslint-disable-next-line no-unused-vars, no-use-before-define\n  (value: any, vnode: VnodeWithDom, oldVnode?: VnodeWithDom): void | boolean;\n}\nexport interface Directives {\n  [key: string]: Directive;\n}\nexport interface ReservedProps {\n  [key: string]: true;\n}\nexport interface Current {\n  component: Component | POJOComponent | null;\n  vnode: VnodeWithDom | null;\n  oldVnode?: VnodeWithDom | null;\n}\nexport interface V {\n  // eslint-disable-next-line no-unused-vars, no-use-before-define\n  (tagOrComponent: string | Component | POJOComponent, props: Props | null, ...children: Children):\n    | VnodeInterface\n    | VnodeComponentInterface;\n  // eslint-disable-next-line no-unused-vars, no-use-before-define\n  fragment(_: any, ...children: Children): Children;\n}\n\nconst textTag = \"#text\";\n\nexport let isNodeJs = Boolean(typeof process !== \"undefined\" && process.versions && process.versions.node);\n\nexport function createDomElement(tag: string, isSVG: boolean = false): DomElement {\n  return isSVG ? document.createElementNS(\"http://www.w3.org/2000/svg\", tag) : document.createElement(tag);\n}\n\nexport const Vnode = function Vnode(this: VnodeInterface, tag: string, props: Props, children: Children) {\n  this.tag = tag;\n  this.props = props;\n  this.children = children;\n} as unknown as VnodeInterface;\n\nexport function isComponent(component): component is Component {\n  return component && (typeof component === \"function\" || (typeof component === \"object\" && \"view\" in component));\n}\n\nexport const isVnode = (object?: unknown | VnodeInterface): object is VnodeInterface => {\n  return object instanceof Vnode;\n};\n\nexport const isVnodeComponent = (object?: unknown | VnodeComponentInterface): object is VnodeComponentInterface => {\n  return isVnode(object) && isComponent(object.tag);\n};\n\n// Transforms a DOM node to a VNode\nfunction domToVnode(dom: any): VnodeWithDom {\n  let children: VnodeWithDom[] = [];\n  for (let i = 0, l = dom.childNodes.length; i < l; i++) {\n    let childDom = dom.childNodes[i];\n    if (childDom.nodeType === 3) {\n      let vnode = new Vnode(textTag, {}, []);\n      vnode.dom = childDom;\n      children.push(vnode as VnodeWithDom);\n      continue;\n    }\n\n    if (childDom.nodeType === 1) {\n      children.push(domToVnode(childDom));\n    }\n  }\n\n  let props: Props = {};\n  for (let i = 0, l = dom.attributes.length; i < l; i++) {\n    let attr = dom.attributes[i];\n    props[attr.nodeName] = attr.nodeValue;\n  }\n\n  let vnode = new Vnode(dom.tagName.toLowerCase(), props, children);\n  vnode.dom = dom;\n  return vnode as VnodeWithDom;\n}\n\nexport function trust(htmlString: string) {\n  let div = createDomElement(\"div\");\n  div.innerHTML = htmlString.trim();\n\n  return [].map.call(div.childNodes, (item) => domToVnode(item));\n}\n\n/* ========================================================================== */\n/* Main Component implementation                                              */\n/* ========================================================================== */\n\nlet mainComponent: VnodeComponentInterface | null = null;\nlet mainVnode: VnodeWithDom | null = null;\nlet isMounted = false;\n\nexport const current: Current = {\n  vnode: null,\n  oldVnode: null,\n  component: null\n};\n\n/* Reserved props ----------------------------------------------------------- */\nexport const reservedProps: Record<string, true> = {\n  key: true,\n  state: true,\n  \"v-keep\": true,\n\n  // Built in directives\n  \"v-if\": true,\n  \"v-unless\": true,\n  \"v-for\": true,\n  \"v-show\": true,\n  \"v-class\": true,\n  \"v-html\": true,\n  \"v-model\": true,\n  \"v-create\": true,\n  \"v-update\": true,\n  \"v-cleanup\": true\n};\n\n/* Mounting, Updating, Cleanup and Unmounting ------------------------------- */\nconst onCleanupSet: Set<Function> = new Set();\nconst onMountSet: Set<Function> = new Set();\nconst onUpdateSet: Set<Function> = new Set();\nconst onUnmountSet: Set<Function> = new Set();\n\nexport function onMount(callback) {\n  onMountSet.add(callback);\n}\n\nexport function onUpdate(callback) {\n  onUpdateSet.add(callback);\n}\n\nexport function onCleanup(callback) {\n  onCleanupSet.add(callback);\n}\n\nexport function onUnmount(callback) {\n  onUnmountSet.add(callback);\n}\n\nfunction callSet(set) {\n  for (let callback of set) {\n    callback();\n  }\n\n  set.clear();\n}\n\n/* Event listener ----------------------------------------------------------- */\nconst eventListenerNames: Record<string, true> = {};\nfunction eventListener(e: Event) {\n  let dom = e.target as DomElement;\n  let name = `v-on${e.type}`;\n  while (dom) {\n    if (dom[name]) {\n      dom[name](e, dom);\n      if (!e.defaultPrevented) {\n        // eslint-disable-next-line no-use-before-define\n        update();\n      }\n      return;\n    }\n    dom = dom.parentNode as DomElement;\n  }\n}\n\n/* Directives --------------------------------------------------------------- */\nlet hideDirective = (test: boolean) => (bool: boolean, vnode: VnodeInterface, oldnode?: VnodeInterface) => {\n  let value = test ? bool : !bool;\n  if (value) {\n    let newdom = document.createTextNode(\"\");\n    if (oldnode && oldnode.dom && oldnode.dom.parentNode) {\n      oldnode.dom.parentNode.replaceChild(newdom, oldnode.dom);\n    }\n    vnode.tag = \"#text\";\n    vnode.children = [];\n    vnode.props = {};\n    vnode.dom = newdom as unknown as DomElement;\n    return false;\n  }\n};\n\nexport const directives: Directives = {\n  \"v-if\": hideDirective(false),\n  \"v-unless\": hideDirective(true),\n  \"v-for\": (set: unknown[], vnode: VnodeWithDom) => {\n    let newChildren: VnodeInterface[] = [];\n    let callback = vnode.children[0];\n    for (let i = 0, l = set.length; i < l; i++) {\n      newChildren.push(callback(set[i], i));\n    }\n    vnode.children = newChildren;\n  },\n  \"v-show\": (bool: boolean, vnode: VnodeWithDom) => {\n    (\n      vnode.dom as unknown as {\n        style: { display: string };\n      }\n    ).style.display = bool ? \"\" : \"none\";\n  },\n  \"v-class\": (classes: { [x: string]: boolean }, vnode: VnodeWithDom) => {\n    for (let name in classes) {\n      (vnode.dom as DomElement).classList.toggle(name, classes[name]);\n    }\n  },\n  \"v-html\": (html: string, vnode: VnodeWithDom) => {\n    vnode.children = [trust(html)];\n  },\n  \"v-model\": ([model, property, event]: any[], vnode: VnodeWithDom, oldVnode?: VnodeWithDom) => {\n    // We try to identify if the old vnode has the v-model directive initialized or not\n    // If it is, we don't need to reinitialize it\n    if (oldVnode && oldVnode.dom === vnode.dom) {\n      let [oldModel, oldProperty, oldEvent] = oldVnode.props[\"v-model\"] || [];\n\n      if (oldModel === model && oldProperty === property && oldEvent === event) {\n        return;\n      }\n    }\n\n    let value;\n    let handler = (e: Event) => (model[property] = (e.target as DomElement & Record<string, any>).value);\n    if (vnode.tag === \"input\") {\n      event = event || \"oninput\";\n      switch (vnode.props.type) {\n        case \"checkbox\": {\n          if (Array.isArray(model[property])) {\n            handler = (e: Event) => {\n              let val = (e.target as DomElement & Record<string, any>).value;\n              let idx = model[property].indexOf(val);\n              if (idx === -1) {\n                model[property].push(val);\n              } else {\n                model[property].splice(idx, 1);\n              }\n            };\n            value = model[property].indexOf(vnode.dom.value) !== -1;\n          } else if (\"value\" in vnode.props) {\n            handler = () => {\n              if (model[property] === vnode.props.value) {\n                model[property] = null;\n              } else {\n                model[property] = vnode.props.value;\n              }\n            };\n            value = model[property] === vnode.props.value;\n          } else {\n            handler = () => (model[property] = !model[property]);\n            value = model[property];\n          }\n          // eslint-disable-next-line no-use-before-define\n          sharedSetAttribute(\"checked\", value, vnode);\n          break;\n        }\n        case \"radio\": {\n          // eslint-disable-next-line no-use-before-define\n          sharedSetAttribute(\"checked\", model[property] === vnode.dom.value, vnode);\n          break;\n        }\n        default: {\n          // eslint-disable-next-line no-use-before-define\n          sharedSetAttribute(\"value\", model[property], vnode);\n        }\n      }\n    } else if (vnode.tag === \"select\") {\n      event = event || \"onclick\";\n      if (vnode.props.multiple) {\n        handler = (e: Event & Record<string, any>) => {\n          let val = (e.target as DomElement & Record<string, any>).value;\n          if (e.ctrlKey) {\n            let idx = model[property].indexOf(val);\n            if (idx === -1) {\n              model[property].push(val);\n            } else {\n              model[property].splice(idx, 1);\n            }\n          } else {\n            model[property].splice(0, model[property].length);\n            model[property].push(val);\n          }\n        };\n        vnode.children.forEach((child: VnodeInterface) => {\n          if (child.tag === \"option\") {\n            let value = \"value\" in child.props ? child.props.value : child.children.join(\"\").trim();\n            child.props.selected = model[property].indexOf(value) !== -1;\n          }\n        });\n      } else {\n        vnode.children.forEach((child: VnodeInterface) => {\n          if (child.tag === \"option\") {\n            let value = \"value\" in child.props ? child.props.value : child.children.join(\"\").trim();\n            child.props.selected = value === model[property];\n          }\n        });\n      }\n    } else if (vnode.tag === \"textarea\") {\n      event = event || \"oninput\";\n      vnode.children = [model[property]];\n    }\n\n    // We assume that the prev handler if any will not be changed by the user across patchs\n    let prevHandler = vnode.props[event];\n\n    // eslint-disable-next-line no-use-before-define\n    sharedSetAttribute(\n      event,\n      (e: Event) => {\n        handler(e);\n\n        // If the user has defined a handler for the event, we call it right away\n        if (prevHandler) {\n          prevHandler(e);\n        }\n      },\n      vnode,\n      oldVnode\n    );\n  },\n\n  // eslint-disable-next-line no-unused-vars\n  \"v-create\": (callback: (vnode: VnodeWithDom) => void, vnode: VnodeWithDom, oldVnode?: VnodeWithDom) => {\n    if (!oldVnode) {\n      callback(vnode);\n    }\n  },\n\n  \"v-update\": (\n    // eslint-disable-next-line no-unused-vars\n    callback: (vnode: VnodeWithDom, oldVnode: VnodeWithDom) => void,\n    vnode: VnodeWithDom,\n    oldVnode?: VnodeWithDom\n  ) => {\n    if (oldVnode) {\n      callback(vnode, oldVnode);\n    }\n  },\n\n  \"v-cleanup\": (\n    // eslint-disable-next-line no-unused-vars\n    callback: (vnode: VnodeWithDom, oldVnode?: VnodeWithDom) => void,\n    vnode: VnodeWithDom,\n    oldVnode?: VnodeWithDom\n  ) => {\n    onCleanup(() => callback(vnode, oldVnode));\n  }\n};\n\nexport function directive(name: string, directive: Directive) {\n  let directiveName = `v-${name}`;\n  directives[directiveName] = directive;\n  reservedProps[directiveName] = true;\n}\n\n/* Set attribute ------------------------------------------------------------ */\nfunction sharedSetAttribute(name: string, value: any, newVnode: VnodeWithDom, oldVnode?: VnodeWithDom): void | boolean {\n  if (typeof value === \"function\") {\n    if (name in eventListenerNames === false) {\n      (mainVnode as VnodeWithDom).dom.addEventListener(name.slice(2), eventListener);\n      eventListenerNames[name] = true;\n    }\n    newVnode.dom[`v-${name}`] = value;\n    return;\n  }\n\n  if (name in newVnode.dom && newVnode.isSVG === false) {\n    // eslint-disable-next-line eqeqeq\n    if (newVnode.dom[name] != value) {\n      newVnode.dom[name] = value;\n    }\n    return;\n  }\n\n  if (!oldVnode || value !== oldVnode.props[name]) {\n    if (value === false) {\n      newVnode.dom.removeAttribute(name);\n    } else {\n      newVnode.dom.setAttribute(name, value);\n    }\n  }\n}\n\nexport function setAttribute(name: string, value: any, newVnode: VnodeWithDom, oldVnode?: VnodeWithDom): void {\n  if (name in reservedProps) {\n    return;\n  }\n  newVnode.props[name] = value;\n  sharedSetAttribute(name, value, newVnode as VnodeWithDom, oldVnode);\n}\n\nexport function updateAttributes(newVnode: VnodeWithDom, oldVnode?: VnodeWithDom): void {\n  if (oldVnode) {\n    for (let name in oldVnode.props) {\n      if (name in newVnode.props === false && name in eventListenerNames === false && name in reservedProps === false) {\n        if (name in newVnode.dom && newVnode.isSVG === false) {\n          newVnode.dom[name] = null;\n        } else {\n          newVnode.dom.removeAttribute(name);\n        }\n      }\n    }\n  }\n\n  for (let name in newVnode.props) {\n    if (name in reservedProps) {\n      if (name in directives && directives[name](newVnode.props[name], newVnode, oldVnode) === false) {\n        break;\n      }\n      continue;\n    }\n    sharedSetAttribute(name, newVnode.props[name], newVnode, oldVnode);\n  }\n}\n\n/* patch ------------------------------------------------------------------- */\n\n// Patch a DOM node with a new VNode tree\nexport function patch(newVnode: VnodeWithDom, oldVnode?: VnodeWithDom): void {\n  let newTree = newVnode.children;\n  let oldTree = oldVnode?.children || [];\n  let oldTreeLength = oldTree.length;\n\n  // Is keyed list and update in place\n  if (oldTreeLength && newTree[0] instanceof Vnode && \"key\" in newTree[0].props && \"key\" in oldTree[0].props) {\n    let newTreeLength = newTree.length;\n\n    let oldKeyedList: { [key: string]: number } = {};\n    for (let i = 0; i < oldTreeLength; i++) {\n      oldKeyedList[oldTree[i].props.key] = i;\n    }\n\n    let newKeyedList: { [key: string]: number } = {};\n    for (let i = 0; i < newTreeLength; i++) {\n      newKeyedList[newTree[i].props.key] = i;\n    }\n\n    for (let i = 0; i < newTreeLength; i++) {\n      let newChild = newTree[i];\n      let oldChild = oldTree[oldKeyedList[newChild.props.key]];\n      let shouldPatch = true;\n\n      if (oldChild) {\n        newChild.dom = oldChild.dom;\n        if (\"v-keep\" in newChild.props && newChild.props[\"v-keep\"] === oldChild.props[\"v-keep\"]) {\n          newChild.children = oldChild.children;\n          shouldPatch = false;\n        } else {\n          updateAttributes(newChild, oldChild);\n        }\n      } else {\n        newChild.dom = createDomElement(newChild.tag, newChild.isSVG);\n        updateAttributes(newChild);\n      }\n\n      if (!newVnode.dom.childNodes[i]) {\n        newVnode.dom.appendChild(newChild.dom);\n      } else if (newVnode.dom.childNodes[i] !== newChild.dom) {\n        newVnode.dom.replaceChild(newChild.dom, newVnode.dom.childNodes[i]);\n      }\n\n      shouldPatch && patch(newChild, oldChild);\n    }\n\n    // For the rest of the children, we should remove them\n    for (let i = newTreeLength; i < oldTreeLength; i++) {\n      if (!newKeyedList[oldTree[i].props.key]) {\n        oldTree[i].dom.parentNode && oldTree[i].dom.parentNode.removeChild(oldTree[i].dom);\n      }\n    }\n    return;\n  }\n\n  if (newTree.length === 0) {\n    newVnode.dom.textContent = \"\";\n    return;\n  }\n\n  current.vnode = newVnode;\n  current.oldVnode = oldVnode;\n\n  // Flat newTree\n  for (let i = 0; i < newTree.length; i++) {\n    let newChild = newTree[i];\n\n    if (newChild instanceof Vnode && newChild.tag !== textTag) {\n      if (typeof newChild.tag !== \"string\") {\n        current.component = newChild.tag;\n        newTree.splice(\n          i--,\n          1,\n          (\"view\" in newChild.tag ? newChild.tag.view.bind(newChild.tag) : newChild.tag.bind(newChild.tag))(\n            newChild.props,\n            ...newChild.children\n          )\n        );\n        continue;\n      }\n\n      newChild.isSVG = newVnode.isSVG || newChild.tag === \"svg\";\n\n      if (i < oldTreeLength) {\n        let oldChild = oldTree[i];\n        if (newChild.tag === oldChild.tag) {\n          newChild.dom = oldChild.dom;\n          if (\"v-keep\" in newChild.props && newChild.props[\"v-keep\"] === oldChild.props[\"v-keep\"]) {\n            newChild.children = oldChild.children;\n            continue;\n          }\n\n          updateAttributes(newChild as VnodeWithDom, oldChild);\n          patch(newChild as VnodeWithDom, oldChild);\n          continue;\n        }\n\n        newChild.dom = createDomElement(newChild.tag, newChild.isSVG);\n        updateAttributes(newChild as VnodeWithDom);\n        newVnode.dom.replaceChild(newChild.dom, oldChild.dom);\n        patch(newChild as VnodeWithDom);\n        continue;\n      }\n\n      newChild.dom = createDomElement(newChild.tag, newChild.isSVG);\n      updateAttributes(newChild as VnodeWithDom);\n      newVnode.dom.appendChild(newChild.dom);\n      patch(newChild as VnodeWithDom);\n      continue;\n    }\n\n    if (Array.isArray(newChild)) {\n      newTree.splice(i--, 1, ...newChild);\n      continue;\n    }\n\n    if (newChild === null || newChild === undefined) {\n      newTree.splice(i--, 1);\n      continue;\n    }\n\n    newTree[i] = new Vnode(textTag, {}, []);\n    if (newChild instanceof Vnode) {\n      newTree[i].dom = newChild.dom;\n      newChild = (newChild as VnodeWithDom).dom.textContent;\n    }\n\n    if (i < oldTreeLength) {\n      let oldChild = oldTree[i];\n\n      if (oldChild.tag === textTag) {\n        newTree[i].dom = oldChild.dom;\n        // eslint-disable-next-line eqeqeq\n        if (newChild != oldChild.dom.textContent) {\n          oldChild.dom.textContent = newChild;\n        }\n        continue;\n      }\n\n      newTree[i].dom = document.createTextNode(newChild);\n      newVnode.dom.replaceChild(newTree[i].dom, oldChild.dom);\n      continue;\n    }\n\n    newTree[i].dom = document.createTextNode(newChild);\n    newVnode.dom.appendChild(newTree[i].dom);\n  }\n\n  for (let i = newTree.length; i < oldTreeLength; i++) {\n    newVnode.dom.removeChild(oldTree[i].dom);\n  }\n}\n\nexport function update(): void | string {\n  if (mainVnode) {\n    callSet(onCleanupSet);\n    let oldMainVnode = mainVnode;\n    mainVnode = new Vnode(oldMainVnode.tag, oldMainVnode.props, [mainComponent]) as VnodeWithDom;\n    mainVnode.dom = oldMainVnode.dom;\n    mainVnode.isSVG = oldMainVnode.isSVG;\n    patch(mainVnode, oldMainVnode);\n    callSet(isMounted ? onUpdateSet : onMountSet);\n    isMounted = true;\n    current.vnode = null;\n    current.oldVnode = null;\n    current.component = null;\n    if (isNodeJs) {\n      return mainVnode.dom.innerHTML;\n    }\n  }\n}\n\nexport function unmount() {\n  if (mainVnode) {\n    mainComponent = new Vnode(() => null, {}, []) as VnodeComponentInterface;\n    let result = update();\n    callSet(onUnmountSet);\n\n    for (let name in eventListenerNames) {\n      mainVnode.dom.removeEventListener(name.slice(2).toLowerCase(), eventListener);\n      Reflect.deleteProperty(eventListenerNames, name);\n    }\n\n    mainComponent = null;\n    mainVnode = null;\n    isMounted = false;\n    current.vnode = null;\n    current.oldVnode = null;\n    current.component = null;\n    return result;\n  }\n}\n\nexport function mount(dom, component) {\n  let container =\n    typeof dom === \"string\"\n      ? isNodeJs\n        ? createDomElement(dom, dom === \"svg\")\n        : document.querySelectorAll(dom)[0]\n      : dom;\n\n  let vnodeComponent = isVnodeComponent(component)\n    ? component\n    : isComponent(component)\n    ? new Vnode(component, {}, [])\n    : new Vnode(() => component, {}, []);\n\n  if (mainComponent && mainComponent.tag !== vnodeComponent.tag) {\n    unmount();\n  }\n\n  mainComponent = vnodeComponent as VnodeComponentInterface;\n  mainVnode = domToVnode(container);\n  return update();\n}\n\nexport const v: V = (tagOrComponent, props = {}, ...children) => {\n  return new Vnode(tagOrComponent, props || {}, children);\n};\n\nv.fragment = (props: Props, ...children: Children) => children;\n"],"mappings":"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"}