//# sourceMappingURL=data:application/json;charset=utf-8;base64,{"version":3,"names":["isNodeJs","Boolean","process","versions","node","elementsToClone","svg","notSvg","createDomElement","tag","isSVG","document","createElementNS","dom2","cloneNode","vProps","createElement","dom","domToVnode","nodeType","props","children","nodeValue","i","childNodes","length","child","push","forEach","call","attributes","prop","nodeName","tagName","toLowerCase","trust","htmlString","div","innerHTML","trim","map","item","createValyrianComponent","component","view","bind","v","tagOrComponent","createVnode","fragment","isVnode","object","isComponent","isValyrianComponent","reservedProps","key","state","oncreate","onupdate","onremove","shouldupdate","conservedProps","eventListenerNames","eventListener","e","target","name","type","defaultPrevented","update","parentNode","sharedSetAttribute","vnode","oldVnode","directives","value","container","addEventListener","slice","removeAttribute","Reflect","deleteProperty","setAttribute","addAttributes","updateAttributes","oldProps","callLifeCycle","event","patch","newVnode","newTree","oldTree","childVnode","splice","Array","isArray","result","oldTreeLength","newTreeLength","newChild","oldChild","isMounted","replaceChild","textContent","createTextNode","appendChild","removeChild","console","log","mainVnode","plugins","Map","hideDirective","test","bool","newdom","set","style","display","classes","classList","toggle","html","model","property","handler","val","idx","indexOf","multiple","ctrlKey","value2","join","selected","directive","directive2","fullName","mount","normalComponent","unmount","querySelectorAll","use","plugin","options","has","get","current"],"sources":["../lib/index2.ts"],"sourcesContent":["/* eslint-disable sonarjs/cognitive-complexity */\n/* eslint-disable complexity */\n\nimport {\n  Children,\n  Component,\n  Current,\n  Directive,\n  Directives,\n  DomElement,\n  Plugin,\n  Props,\n  Valyrian,\n  ValyrianComponent,\n  Vnode,\n  VnodeWithDom\n} from \"./interfaces2\";\n\nconst isNodeJs = Boolean(typeof process !== \"undefined\" && process.versions && process.versions.node);\n\nconst elementsToClone: {\n  svg: Record<string, DomElement>;\n  notSvg: Record<string, DomElement>;\n} = {\n  svg: {},\n  notSvg: {}\n};\n\nfunction createDomElement(tag: string, isSVG: boolean = false): DomElement {\n  if (isSVG) {\n    if (!elementsToClone.svg[tag]) {\n      elementsToClone.svg[tag] = document.createElementNS(\"http://www.w3.org/2000/svg\", tag) as any;\n    }\n\n    let dom = elementsToClone.svg[tag].cloneNode(false) as any;\n    dom.vProps = {};\n    return dom;\n  }\n\n  if (!elementsToClone.notSvg[tag]) {\n    elementsToClone.notSvg[tag] = document.createElement(tag) as any;\n  }\n\n  let dom = elementsToClone.notSvg[tag].cloneNode(false) as any;\n  dom.vProps = {};\n  return dom as DomElement;\n}\n\nfunction domToVnode(dom: any): void | VnodeWithDom {\n  if (dom.nodeType === 3) {\n    return {\n      tag: \"#text\",\n      props: {},\n      children: [dom.nodeValue],\n      dom\n    };\n  }\n\n  if (dom.nodeType === 1) {\n    let children = [];\n    for (let i = 0; i < dom.childNodes.length; i++) {\n      let child = domToVnode(dom.childNodes[i]);\n      if (child) {\n        children.push(child);\n      }\n    }\n\n    let vProps: Props = {};\n    if (dom.vProps) {\n      vProps = dom.vProps;\n    } else {\n      [].forEach.call(dom.attributes, (prop: Attr) => (vProps[prop.nodeName] = prop.nodeValue));\n    }\n\n    dom.vProps = vProps;\n\n    return {\n      tag: dom.tagName.toLowerCase(),\n      props: vProps,\n      children,\n      dom\n    };\n  }\n}\n\nconst trust = (htmlString: string): Children => {\n  let div = createDomElement(\"div\");\n  div.innerHTML = htmlString.trim();\n\n  return [].map.call(div.childNodes, (item) => domToVnode(item)) as Vnode[];\n};\n\nfunction createVnode(tag: string, props: Props, children: any[]): Vnode {\n  return {\n    tag,\n    props,\n    children\n  };\n}\n\nfunction createValyrianComponent(component: Component, props: Record<string, any>, children: any[]): ValyrianComponent {\n  return {\n    view: component.bind(component),\n    props,\n    children\n  };\n}\n\nconst v: Valyrian = function (tagOrComponent: string | Component, props: Record<string, any> | null, ...children: any[]): Vnode | ValyrianComponent {\n  if (typeof tagOrComponent === \"string\") {\n    return createVnode(tagOrComponent, props || {}, children);\n  }\n  return createValyrianComponent(tagOrComponent, props || {}, children);\n};\n\nv.fragment = function (props: Props, ...children: any[]) {\n  return children;\n};\n\nv.isVnode = function isVnode(object?: unknown | Vnode): object is Vnode {\n  return Boolean(object && typeof object === \"object\" && \"tag\" in object);\n};\n\nv.isComponent = function isComponent(component?: unknown | ValyrianComponent): component is ValyrianComponent {\n  return Boolean((component && typeof component === \"function\") || v.isValyrianComponent(component));\n};\n\nv.isValyrianComponent = function isValyrianComponent(component?: unknown | ValyrianComponent): component is ValyrianComponent {\n  return Boolean(component && typeof component === \"object\" && \"view\" in component);\n};\n\nconst reservedProps: Record<string, true> = {\n  key: true,\n  state: true,\n  oncreate: true,\n  onupdate: true,\n  onremove: true,\n  shouldupdate: true,\n  \"v-once\": true,\n\n  // Built in directives\n  \"v-if\": true,\n  \"v-unless\": true,\n  \"v-for\": true,\n  \"v-show\": true,\n  \"v-class\": true,\n  \"v-html\": true,\n  \"v-model\": true\n};\nconst conservedProps: Record<string, true> = {\n  key: true,\n  state: true,\n  onremove: true\n};\nconst eventListenerNames: Record<string, any> = {};\nfunction eventListener(e: Event) {\n  let dom = e.target as any;\n  let name = `v-on${e.type}`;\n  while (dom) {\n    if (dom[name]) {\n      dom[name](e, dom);\n      if (!e.defaultPrevented) {\n        v.update();\n      }\n      return;\n    }\n    dom = dom.parentNode;\n  }\n}\n\nconst current: Current = {};\n\nfunction sharedSetAttribute(prop: string, vnode: Vnode, dom: DomElement, isSVG: boolean = false, oldVnode?: VnodeWithDom): void | boolean {\n  // It is a reserved prop\n  if (reservedProps[prop]) {\n    // If it is a directive name call the directive\n    if (directives[prop]) {\n      vnode.dom = dom;\n      dom.vProps[prop] = vnode.props[prop];\n      return directives[prop](vnode.props[prop], vnode as VnodeWithDom, oldVnode);\n    }\n\n    if (conservedProps[prop]) {\n      dom.vProps[prop] = vnode.props[prop];\n    }\n\n    return;\n  }\n\n  let value = vnode.props[prop];\n\n  // It is not a reserved prop so we add it to the dom\n  if (typeof value === \"function\") {\n    if (prop in eventListenerNames === false) {\n      eventListenerNames[prop] = true;\n      (v.container as DomElement).addEventListener(prop.slice(2), eventListener);\n    }\n    dom[`v-${prop}`] = value;\n    return;\n  }\n\n  if (prop in dom && isSVG === false) {\n    // eslint-disable-next-line eqeqeq\n    if (dom[prop] != value) {\n      dom.vProps[prop] = value;\n      dom[prop] = value;\n    }\n    return;\n  }\n\n  // Use set attribute\n  if (dom[prop] !== value) {\n    if (value === false) {\n      dom.removeAttribute(prop);\n      Reflect.deleteProperty(dom.vProps, prop);\n    } else {\n      dom.setAttribute(prop, value);\n      dom.vProps[prop] = value;\n    }\n  }\n}\n\nfunction setAttribute(name: string, value: any, vnode: VnodeWithDom, isSVG: boolean = false, oldVnode?: VnodeWithDom): void {\n  vnode.props[name] = value;\n  sharedSetAttribute(name, vnode, vnode.dom, isSVG || vnode.tag === \"svg\", oldVnode);\n}\n\nfunction addAttributes(vnode: Vnode, dom: DomElement, isSVG = false): void {\n  for (let prop in vnode.props) {\n    if (sharedSetAttribute(prop, vnode, dom, isSVG) === false) {\n      break;\n    }\n  }\n}\n\nfunction updateAttributes(vnode: Vnode, dom: DomElement, isSVG: boolean = false) {\n  let oldProps = { ...dom.vProps };\n  let oldVnode;\n\n  if (dom.vProps) {\n    oldVnode = domToVnode(dom) as VnodeWithDom;\n  }\n\n  for (let prop in vnode.props) {\n    if (sharedSetAttribute(prop, vnode, dom, isSVG, oldVnode) === false) {\n      break;\n    }\n  }\n\n  for (let prop in oldProps) {\n    if (prop in vnode.props === false) {\n      if (prop in dom && isSVG === false) {\n        dom[prop] = null;\n      } else {\n        dom.removeAttribute(prop);\n      }\n      Reflect.deleteProperty(dom.vProps, prop);\n    }\n  }\n}\n\nfunction callLifeCycle(event: string, vnode: Vnode, dom: DomElement, oldVnode?: VnodeWithDom) {\n  if (vnode.props[event]) {\n    vnode.dom = dom;\n    vnode.props[event](vnode, oldVnode);\n  }\n\n  if (event === \"onremove\") {\n    for (let i = 0; i < vnode.children.length; i++) {\n      let child = vnode.children[i];\n      if (child.tag !== \"#text\") {\n        callLifeCycle(event, child, child.dom);\n      }\n    }\n  }\n}\n\nfunction patch(newVnode: VnodeWithDom, oldVnode?: VnodeWithDom, isSVG: boolean = false) {\n  let newTree = newVnode.children;\n  let oldTree = oldVnode?.children || [];\n\n  for (let i = 0; i < newTree.length; i++) {\n    let childVnode = newTree[i];\n    if (childVnode === null || childVnode === undefined) {\n      newTree.splice(i--, 1);\n    } else if (Array.isArray(childVnode)) {\n      newTree.splice(i--, 1, ...childVnode);\n    } else if (typeof childVnode === \"object\" && (\"tag\" in childVnode || \"view\" in childVnode)) {\n      if (childVnode.view) {\n        let result = childVnode.view(childVnode.props, ...childVnode.children);\n\n        newTree.splice(i--, 1, result);\n        continue;\n      }\n    } else {\n      newTree[i] = v(\"#text\", {}, childVnode);\n    }\n  }\n\n  let oldTreeLength = oldTree.length;\n  let newTreeLength = newTree.length;\n\n  // If new tree is empty, remove all old nodes\n  if (newTreeLength === 0) {\n    for (let i = oldTreeLength - 1; i >= 0; i--) {\n      let oldChild = oldTree[i];\n\n      if (oldChild.tag !== \"#text\") {\n        callLifeCycle(\"onremove\", oldChild, oldChild.dom);\n      }\n\n      console.log(\"remove\", oldChild.dom);\n\n      newVnode.dom.textContent = \"\";\n    }\n    return;\n  }\n\n  // If new tree and old tree have more than one child, we should update the dom\n  if (newTreeLength) {\n    for (let i = 0; i < newTreeLength; i++) {\n      let newChild = newTree[i];\n      let oldChild = oldTree[i];\n\n      if (!oldChild) {\n        if (newChild.tag === \"#text\") {\n          newChild.dom = document.createTextNode(newChild.children[0]);\n          newVnode.dom.appendChild(newChild.dom);\n          continue;\n        }\n\n        isSVG = isSVG || newChild.tag === \"svg\";\n        newChild.dom = createDomElement(newChild.tag, isSVG);\n        addAttributes(newChild, newChild.dom, isSVG);\n        newVnode.dom.appendChild(newChild.dom);\n        callLifeCycle(\"oncreate\", newChild, newChild.dom);\n        if (newChild.children.length > 0) {\n          patch(newChild, undefined, isSVG);\n        }\n        continue;\n      }\n\n      if (newChild.tag === \"#text\") {\n        if (oldChild.tag === \"#text\") {\n          newChild.dom = oldChild.dom;\n          // eslint-disable-next-line eqeqeq\n          if (newChild.dom.textContent != newChild.children[0]) {\n            newChild.dom.textContent = newChild.children[0];\n          }\n          continue;\n        }\n\n        newChild.dom = document.createTextNode(newChild.children[0]);\n        if (oldChild.tag !== \"#text\") {\n          callLifeCycle(\"onremove\", oldChild, oldChild.dom);\n        }\n\n        newVnode.dom.replaceChild(newChild.dom, oldChild.dom);\n        continue;\n      }\n\n      isSVG = isSVG || newChild.tag === \"svg\";\n      if (oldChild.tag !== newChild.tag) {\n        newChild.dom = createDomElement(newChild.tag, isSVG);\n        if (oldChild.tag !== \"#text\") {\n          callLifeCycle(\"onremove\", oldChild, oldChild.dom);\n        }\n        addAttributes(newChild, newChild.dom, isSVG);\n        newVnode.dom.replaceChild(newChild.dom, oldChild.dom);\n        callLifeCycle(\"oncreate\", newChild, newChild.dom);\n        patch(newChild, oldChild, isSVG);\n        continue;\n      }\n\n      newChild.dom = oldChild.dom;\n      if (\"v-once\" in newChild.props || (\"shouldupdate\" in newChild.props && newChild.props.shouldupdate(oldChild, newChild) === false)) {\n        newChild.children = oldChild.children;\n        continue;\n      }\n\n      updateAttributes(newChild, newChild.dom, isSVG);\n      callLifeCycle(v.isMounted ? \"onupdate\" : \"oncreate\", newChild, newChild.dom, oldChild);\n\n      patch(newChild, oldChild, isSVG);\n    }\n  }\n\n  // For the rest of the children, we should remove them\n  for (let i = newTreeLength; i < oldTreeLength; i++) {\n    let oldChild = oldTree[i];\n\n    if (oldChild.tag !== \"#text\") {\n      callLifeCycle(\"onremove\", oldChild, oldChild.dom);\n    }\n\n    newVnode.dom.removeChild(oldChild.dom);\n  }\n}\n\nfunction update() {\n  if (v.component && v.container && v.mainVnode) {\n    let oldVnode = {\n      ...v.mainVnode,\n      props: v.mainVnode.props,\n      children: v.mainVnode.children\n    };\n\n    let result = v.component.view(v.component.props || {}, v.component.children);\n\n    v.mainVnode.children = Array.isArray(result) ? result : [result];\n\n    patch(v.mainVnode, oldVnode, v.mainVnode.tag === \"svg\");\n\n    v.isMounted = true;\n\n    if (isNodeJs) {\n      return v.container.innerHTML;\n    }\n  }\n}\n\nfunction mount(container: string | Element, normalComponent: Component | ValyrianComponent) {\n  if (v.isMounted) {\n    v.unmount();\n  }\n\n  if (isNodeJs) {\n    v.container = typeof container === \"string\" ? createDomElement(container === \"svg\" ? \"svg\" : \"div\", container === \"svg\") : container;\n  } else {\n    v.container = typeof container === \"string\" ? document.querySelectorAll(container)[0] : container;\n  }\n\n  if (v.isValyrianComponent(normalComponent)) {\n    if (!normalComponent.props) {\n      normalComponent.props = {};\n    }\n\n    if (!Array.isArray(normalComponent.children)) {\n      normalComponent.children = \"children\" in normalComponent ? [normalComponent.children] : [];\n    }\n\n    v.component = normalComponent;\n  } else {\n    v.component = createValyrianComponent(\n      normalComponent,\n      normalComponent.props || {},\n      \"children\" in normalComponent ? (Array.isArray(normalComponent.children) ? normalComponent.children : [normalComponent.children]) : []\n    );\n  }\n\n  v.mainVnode = domToVnode(v.container) as VnodeWithDom;\n\n  return update();\n}\n\nfunction unmount() {\n  if (v.component && v.container && v.mainVnode) {\n    let oldVnode = {\n      ...v.mainVnode,\n      props: v.mainVnode.props,\n      children: [...v.mainVnode.children]\n    };\n\n    v.mainVnode.children = [];\n\n    patch(v.mainVnode, oldVnode, v.mainVnode.tag === \"svg\");\n\n    let container = v.container;\n    v.container = null;\n    v.component = null;\n    v.isMounted = false;\n    if (isNodeJs) {\n      return container.innerHTML;\n    }\n  }\n}\n\nconst plugins = new Map<Plugin, any>();\n\nfunction use(plugin: Plugin, options?: Record<string | number | symbol, any>): void | any {\n  if (plugins.has(plugin)) {\n    return plugins.get(plugin);\n  }\n\n  let result = plugin(v, options);\n  plugins.set(plugin, result);\n  return result;\n}\n\nfunction directive(name: string, directive: Directive) {\n  let fullName = `v-${name}`;\n  directives[fullName] = directive;\n  reservedProps[fullName] = true;\n}\n\nfunction hideDirective(test: boolean): Directive {\n  return (bool: boolean, vnode: VnodeWithDom, oldVnode?: VnodeWithDom) => {\n    let value = test ? bool : !bool;\n    if (value) {\n      let newdom = document.createTextNode(\"\");\n      if (oldVnode && oldVnode.dom && oldVnode.dom.parentNode) {\n        oldVnode.tag !== \"#text\" && callLifeCycle(\"onremove\", oldVnode, oldVnode.dom);\n        oldVnode.dom.parentNode.replaceChild(newdom, oldVnode.dom);\n      }\n      vnode.tag = \"#text\";\n      vnode.children = [\"\"];\n      vnode.props = {};\n      vnode.dom = newdom as unknown as DomElement;\n\n      return false;\n    }\n  };\n}\n\nconst directives: Directives = {\n  \"v-if\": hideDirective(false),\n  \"v-unless\": hideDirective(true),\n  \"v-for\": (set: unknown[], vnode: VnodeWithDom) => {\n    vnode.children = set.map(vnode.children[0]);\n  },\n  \"v-show\": (bool: boolean, vnode: VnodeWithDom) => {\n    (vnode.dom as unknown as { style: { display: string } }).style.display = bool ? \"\" : \"none\";\n  },\n  \"v-class\": (classes: { [x: string]: boolean }, vnode: VnodeWithDom) => {\n    for (let name in classes) {\n      (vnode.dom as DomElement).classList.toggle(name, classes[name]);\n    }\n  },\n  \"v-html\": (html: string, vnode: VnodeWithDom) => {\n    vnode.children = [trust(html)];\n  },\n  \"v-model\": ([model, property, event]: any[], vnode: VnodeWithDom, oldVnode?: VnodeWithDom) => {\n    let value;\n    let handler;\n    if (vnode.tag === \"input\") {\n      event = event || \"oninput\";\n      switch (vnode.props.type) {\n        case \"checkbox\": {\n          if (Array.isArray(model[property])) {\n            handler = (e: Event) => {\n              let val = (e.target as DomElement & Record<string, any>).value;\n              let idx = model[property].indexOf(val);\n              if (idx === -1) {\n                model[property].push(val);\n              } else {\n                model[property].splice(idx, 1);\n              }\n            };\n            value = model[property].indexOf(vnode.dom.value) !== -1;\n          } else if (\"value\" in vnode.props) {\n            handler = () => {\n              if (model[property] === vnode.props.value) {\n                model[property] = null;\n              } else {\n                model[property] = vnode.props.value;\n              }\n            };\n            value = model[property] === vnode.props.value;\n          } else {\n            handler = () => (model[property] = !model[property]);\n            value = model[property];\n          }\n          setAttribute(\"checked\", value, vnode, false, oldVnode);\n          break;\n        }\n        case \"radio\": {\n          setAttribute(\"checked\", model[property] === vnode.dom.value, vnode, false, oldVnode);\n          break;\n        }\n        default: {\n          setAttribute(\"value\", model[property], vnode, false, oldVnode);\n        }\n      }\n    } else if (vnode.tag === \"select\") {\n      event = event || \"onclick\";\n      if (vnode.props.multiple) {\n        handler = (e: Event & Record<string, any>) => {\n          let val = (e.target as DomElement & Record<string, any>).value;\n          if (e.ctrlKey) {\n            let idx = model[property].indexOf(val);\n            if (idx === -1) {\n              model[property].push(val);\n            } else {\n              model[property].splice(idx, 1);\n            }\n          } else {\n            model[property].splice(0, model[property].length);\n            model[property].push(val);\n          }\n        };\n        vnode.children.forEach((child: Vnode) => {\n          if (child.tag === \"option\") {\n            let value = \"value\" in child.props ? child.props.value : child.children.join(\"\").trim();\n            child.props.selected = model[property].indexOf(value) !== -1;\n          }\n        });\n      } else {\n        vnode.children.forEach((child: Vnode) => {\n          if (child.tag === \"option\") {\n            let value = \"value\" in child.props ? child.props.value : child.children.join(\"\").trim();\n            child.props.selected = value === model[property];\n          }\n        });\n      }\n    } else if (vnode.tag === \"textarea\") {\n      event = event || \"oninput\";\n      vnode.children = [model[property]];\n    }\n\n    if (!vnode.props[event]) {\n      if (!handler) {\n        handler = (e: Event) => (model[property] = (e.target as DomElement & Record<string, any>).value);\n      }\n      setAttribute(event, handler, vnode, false, oldVnode);\n    }\n  }\n};\n\nv.isNodeJs = isNodeJs;\nv.isMounted = false;\nv.directives = directives;\nv.directive = directive;\nv.reservedProps = reservedProps;\nv.mount = mount;\nv.unmount = unmount;\nv.update = update;\nv.use = use;\nv.trust = trust;\nv.setAttribute = setAttribute;\nv.current = current;\n\nexport default v;\n"],"mappings":"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"}