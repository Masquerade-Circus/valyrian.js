//# sourceMappingURL=data:application/json;charset=utf-8;base64,{"version":3,"names":["current","onCleanupList","onMountList","onUpdateList","onUnmountList","emptyComponent","eventListenerNames","eventListener","e","dom","target","name","type","defaultPrevented","v","update","parentNode","reservedProps","key","state","oncreate","onupdate","onremove","shouldupdate","createDomElement","tag","isSVG","document","createElementNS","createElement","Vnode","props","children","this","VnodeText","nodeValue","VnodeComponent","component","domToVnode","i","childNodes","length","childDom","nodeType","push","vnode2","attributes","attr","nodeName","vnode","tagName","toLowerCase","tagOrComponent","callCallbackList","list","sharedSetAttribute","prop","newVnode","oldVnode","directives","value","mainVnode","addEventListener","slice","removeAttribute","setAttribute","setAttributes","fragment","vnodes","trust","htmlString","div","innerHTML","trim","map","call","item","isVnode","object","isVnodeComponent","isValyrianComponent","Boolean","isComponent","onCleanup","callback","indexOf","onUnmount","onMount","onUpdate","callRemove","l","patch","newParentVnode","oldParentVnode","oldTree","newTree","oldTreeLength","newTreeLength2","oldKeyedList","newKeyedList","childVnode","oldChildVnode","shouldPatch","isMounted","replaceChild","appendChild","removeChild","oldChildVnode2","splice","Array","isArray","view","bind","String","createTextNode","newTreeLength","textContent","oldMainVnode","newMainVnode","isNodeJs","unmount","result","mount","container","mainContainer","querySelectorAll","plugins","Map","use","plugin","options","has","get","set","hideDirective","test","bool","oldnode","newdom","style","display","classes","classList","toggle","html","model","property","event","handler","val","idx","multiple","ctrlKey","forEach","child","value2","join","selected","directive","fullName","process","versions","node"],"sources":["../lib/index2.ts"],"sourcesContent":["/* eslint-disable sonarjs/cognitive-complexity */\n/* eslint-disable complexity */\n\nimport {\n  Children,\n  Component,\n  Current,\n  Directive,\n  Directives,\n  DomElement,\n  Plugin,\n  Props,\n  Valyrian,\n  ValyrianComponent,\n  Vnode,\n  VnodeText,\n  VnodeWithDom,\n  VnodeComponent\n} from \"./interfaces2\";\n\nconst current: Current = {};\nconst onCleanupList: Function[] = [];\nconst onMountList: Function[] = [];\nconst onUpdateList: Function[] = [];\nconst onUnmountList: Function[] = [];\nconst emptyComponent: Component = () => \"\";\n\nconst eventListenerNames: Record<string, true> = {};\nfunction eventListener(e: Event) {\n  let dom = e.target as DomElement;\n  let name = `v-on${e.type}`;\n  while (dom) {\n    if (dom[name]) {\n      dom[name](e, dom);\n      if (!e.defaultPrevented) {\n        v.update();\n      }\n      return;\n    }\n    dom = dom.parentNode as DomElement;\n  }\n}\n\nconst reservedProps: Record<string, true> = {\n  key: true,\n  state: true,\n  oncreate: true,\n  onupdate: true,\n  onremove: true,\n  shouldupdate: true,\n  \"v-once\": true,\n\n  // Built in directives\n  \"v-if\": true,\n  \"v-unless\": true,\n  \"v-for\": true,\n  \"v-show\": true,\n  \"v-class\": true,\n  \"v-html\": true,\n  \"v-model\": true\n};\n\nconst elementsToClone: Record<string, DomElement> = {};\nconst elementsToCloneSvg: Record<string, DomElement> = {};\n\nfunction createDomElement(tag: string, isSVG: boolean = false): DomElement {\n  return isSVG ? document.createElementNS(\"http://www.w3.org/2000/svg\", tag) : document.createElement(tag);\n  // if (isSVG) {\n  //   if (!elementsToCloneSvg[tag]) {\n  //     elementsToCloneSvg[tag] = document.createElementNS(\n  //       \"http://www.w3.org/2000/svg\",\n  //       tag\n  //     ) as any;\n  //   }\n\n  //   return elementsToCloneSvg[tag].cloneNode(false) as any;\n  // }\n\n  // if (!elementsToClone[tag]) {\n  //   elementsToClone[tag] = document.createElement(tag) as any;\n  // }\n\n  // return elementsToClone[tag].cloneNode(false) as any;\n}\n\nconst Vnode = (function Vnode(\n  this: Vnode,\n  tag: string,\n  props: Props,\n  children: Children\n) {\n  this.tag = tag;\n  this.props = props;\n  this.children = children;\n} as unknown) as Vnode;\n\nconst VnodeText = (function VnodeText(this: VnodeText, nodeValue: string) {\n  this.nodeValue = nodeValue;\n} as unknown) as VnodeText;\n\nconst VnodeComponent = (function VnodeComponent(\n  this: VnodeComponent,\n  component: Component | ValyrianComponent,\n  props: Props,\n  children: Children\n) {\n  this.component = component;\n  this.props = props;\n  this.children = children;\n} as unknown) as VnodeComponent;\n\n// Transforms a DOM node to a VNode\nfunction domToVnode(dom: any): VnodeWithDom {\n  let children = [];\n  for (let i = 0; i < dom.childNodes.length; i++) {\n    let childDom = dom.childNodes[i];\n    if (childDom.nodeType === 3) {\n      let vnode = new VnodeText(childDom.nodeValue);\n      vnode.dom = childDom;\n      children.push(vnode);\n      continue;\n    }\n\n    if (childDom.nodeType === 1) {\n      children.push(domToVnode(childDom));\n    }\n  }\n\n  let props: Props = {};\n  for (let i = 0; i < dom.attributes.length; i++) {\n    let attr = dom.attributes[i];\n    props[attr.nodeName] = attr.nodeValue;\n  }\n\n  let vnode = new Vnode(dom.tagName.toLowerCase(), props, children);\n  vnode.dom = dom;\n  return vnode as VnodeWithDom;\n}\n\nconst v: Valyrian = (tagOrComponent, props, ...children) => {\n  if (typeof tagOrComponent === \"string\") {\n    return new Vnode(tagOrComponent, props || {}, children);\n  }\n\n  return new VnodeComponent(tagOrComponent, props || {}, children);\n};\n\nv.fragment = (props: Props, ...vnodes: Children) => {\n  return vnodes;\n};\n\nv.trust = (htmlString: string) => {\n  let div = createDomElement(\"div\");\n  div.innerHTML = htmlString.trim();\n\n  return [].map.call(div.childNodes, (item) => domToVnode(item)) as Vnode[];\n};\n\nv.isVnode = (object?: unknown | Vnode): object is Vnode => {\n  return object instanceof Vnode;\n};\n\nv.isVnodeComponent = (\n  object?: unknown | VnodeComponent\n): object is VnodeComponent => {\n  return object instanceof VnodeComponent;\n};\n\nv.isValyrianComponent = (\n  component?: unknown | ValyrianComponent\n): component is ValyrianComponent => {\n  return Boolean(\n    component && typeof component === \"object\" && \"view\" in component\n  );\n};\n\nv.isComponent = (\n  component?: unknown | ValyrianComponent\n): component is ValyrianComponent => {\n  return Boolean(\n    (component && typeof component === \"function\") ||\n      v.isValyrianComponent(component) ||\n      v.isVnodeComponent(component)\n  );\n};\n\nv.onCleanup = (callback: Function): void => {\n  if (onCleanupList.indexOf(callback) === -1) {\n    onCleanupList.push(callback);\n  }\n};\nv.onUnmount = (callback: Function): void => {\n  if (onUnmountList.indexOf(callback) === -1) {\n    onUnmountList.push(callback);\n  }\n};\nv.onMount = (callback: Function): void => {\n  if (onMountList.indexOf(callback) === -1) {\n    onMountList.push(callback);\n  }\n};\nv.onUpdate = (callback: Function): void => {\n  if (onUpdateList.indexOf(callback) === -1) {\n    onUpdateList.push(callback);\n  }\n};\n\nfunction callCallbackList(list: Function[]): void {\n  for (let i = 0; i < list.length; i++) {\n    list[i]();\n  }\n  list.length = 0;\n}\n\nfunction sharedSetAttribute(\n  prop: string,\n  newVnode: VnodeWithDom,\n  oldVnode?: VnodeWithDom\n): void | boolean {\n  if (reservedProps[prop]) {\n    if (directives[prop]) {\n      return directives[prop](newVnode.props[prop], newVnode, oldVnode);\n    }\n    return;\n  }\n\n  let value = newVnode.props[prop];\n  let dom = newVnode.dom;\n\n  if (typeof value === \"function\") {\n    if (!eventListenerNames[prop]) {\n      (v.mainVnode as VnodeWithDom).dom.addEventListener(\n        prop.slice(2),\n        eventListener\n      );\n      eventListenerNames[prop] = true;\n    }\n    dom[`v-${prop}`] = value;\n    return;\n  }\n\n  if (prop in dom && !newVnode.isSVG) {\n    // eslint-disable-next-line eqeqeq\n    if (dom[prop] != value) {\n      dom[prop] = value;\n    }\n\n    return;\n  }\n\n  if (!oldVnode || value !== oldVnode.props[prop]) {\n    if (value === false) {\n      dom.removeAttribute(prop);\n    } else {\n      dom.setAttribute(prop, value);\n    }\n  }\n}\n\nfunction setAttribute(\n  name: string,\n  value: any,\n  vnode: Vnode,\n  oldVnode?: VnodeWithDom\n): void {\n  vnode.props[name] = value;\n  sharedSetAttribute(name, vnode as VnodeWithDom, oldVnode);\n}\n\nfunction setAttributes(newVnode: VnodeWithDom, oldVnode?: VnodeWithDom): void {\n  for (let prop in newVnode.props) {\n    if (sharedSetAttribute(prop, newVnode, oldVnode) === false) {\n      return;\n    }\n  }\n\n  if (oldVnode) {\n    for (let name in oldVnode.props) {\n      if (\n        name in newVnode.props === false &&\n      typeof oldVnode.props[name] !== \"function\" &&\n      !reservedProps[name]\n      ) {\n        if (name in newVnode.dom && newVnode.isSVG === false) {\n          newVnode.dom[name] = null;\n        } else {\n          newVnode.dom.removeAttribute(name);\n        }\n      }\n    }\n  }\n}\n\nconst callRemove = (vnode: Vnode) => {\n  for (let i = 0, l = vnode.children.length; i < l; i++) {\n    vnode.children[i] instanceof Vnode && callRemove(vnode.children[i]);\n  }\n\n  vnode.props.onremove && vnode.props.onremove(vnode);\n};\n\n// Patch a DOM node with a new VNode tree\nfunction patch(\n  newParentVnode: VnodeWithDom,\n  oldParentVnode?: VnodeWithDom\n): void {\n  let oldTree = oldParentVnode?.children || [];\n  let newTree = newParentVnode.children;\n  let oldTreeLength = oldTree.length;\n\n  current.vnode = newParentVnode;\n  current.oldVnode = oldParentVnode;\n\n  if (\n    newTree[0] instanceof Vnode &&\n    oldTree[0] instanceof Vnode &&\n    \"key\" in newTree[0].props &&\n    \"key\" in oldTree[0].props\n  ) {\n    let newTreeLength = newTree.length;\n    let oldKeyedList: { [key: string]: number } = {};\n    for (let i = 0; i < oldTreeLength; i++) {\n      oldKeyedList[oldTree[i].props.key] = i;\n    }\n\n    let newKeyedList: { [key: string]: number } = {};\n    for (let i = 0; i < newTreeLength; i++) {\n      newKeyedList[newTree[i].props.key] = i;\n    }\n\n    for (let i = 0; i < newTreeLength; i++) {\n      let childVnode = newTree[i];\n      let oldChildVnode = oldTree[oldKeyedList[childVnode.props.key]];\n      let shouldPatch = true;\n\n      if (oldChildVnode) {\n        childVnode.dom = oldChildVnode.dom;\n        if (\n          childVnode.props[\"v-once\"] ||\n          (childVnode.props.shouldupdate &&\n            childVnode.props.shouldupdate(childVnode, oldChildVnode) === false)\n        ) {\n          childVnode.children = oldChildVnode.children;\n          shouldPatch = false;\n        } else {\n          setAttributes(childVnode, oldChildVnode);\n          if (v.isMounted) {\n            childVnode.props.onupdate &&\n              childVnode.props.onupdate(childVnode, oldChildVnode);\n          } else {\n            childVnode.props.oncreate && childVnode.props.oncreate(childVnode);\n          }\n        }\n      } else {\n        childVnode.dom = createDomElement(childVnode.tag, childVnode.isSVG);\n        setAttributes(childVnode);\n        childVnode.props.oncreate && childVnode.props.oncreate(childVnode);\n      }\n\n      if (!newParentVnode.dom.childNodes[i]) {\n        newParentVnode.dom.appendChild(childVnode.dom);\n      } else if (newParentVnode.dom.childNodes[i] !== childVnode.dom) {\n        oldTree[i] &&\n          !newKeyedList[oldTree[i].props.key] &&\n          callRemove(oldTree[i]);\n        newParentVnode.dom.replaceChild(\n          childVnode.dom,\n          newParentVnode.dom.childNodes[i]\n        );\n      }\n\n      shouldPatch && patch(childVnode, oldChildVnode);\n    }\n\n    // For the rest of the children, we should remove them\n    for (let i = newTreeLength; i < oldTreeLength; i++) {\n      if (!newKeyedList[oldTree[i].props.key]) {\n        let oldChildVnode = oldTree[i];\n        callRemove(oldChildVnode);\n        oldChildVnode.dom.parentNode &&\n          oldChildVnode.dom.parentNode.removeChild(oldChildVnode.dom);\n      }\n    }\n    return;\n  }\n\n  // Flat newTree\n  for (let i = 0; i < newTree.length; i++) {\n    let childVnode = newTree[i];\n\n    if (childVnode instanceof Vnode) {\n      let oldChildVnode = oldTree[i];\n      childVnode.isSVG = newParentVnode.isSVG || childVnode.tag === \"svg\";\n\n      if (!oldChildVnode) {\n        childVnode.dom = createDomElement(childVnode.tag, childVnode.isSVG);\n        setAttributes(childVnode as VnodeWithDom);\n        childVnode.props.oncreate && childVnode.props.oncreate(childVnode);\n        patch(childVnode as VnodeWithDom);\n        newParentVnode.dom.appendChild(childVnode.dom);\n        continue;\n      }\n\n      if (childVnode.tag === oldChildVnode.tag) {\n        childVnode.dom = oldChildVnode.dom;\n\n        if (\n          childVnode.props[\"v-once\"] ||\n          (childVnode.props.shouldupdate &&\n            childVnode.props.shouldupdate(childVnode, oldChildVnode) === false)\n        ) {\n          childVnode.children = oldChildVnode.children;\n          continue;\n        }\n\n        setAttributes(childVnode as VnodeWithDom, oldChildVnode);\n        if (v.isMounted) {\n          childVnode.props.onupdate &&\n            childVnode.props.onupdate(childVnode, oldChildVnode);\n        } else {\n          childVnode.props.oncreate && childVnode.props.oncreate(childVnode);\n        }\n        patch(childVnode as VnodeWithDom, oldChildVnode);\n        continue;\n      }\n\n      childVnode.dom = createDomElement(childVnode.tag, childVnode.isSVG);\n      setAttributes(childVnode as VnodeWithDom);\n      childVnode.props.oncreate && childVnode.props.oncreate(childVnode);\n      oldChildVnode instanceof Vnode && callRemove(oldChildVnode);\n      newParentVnode.dom.replaceChild(childVnode.dom, oldChildVnode.dom);\n      patch(childVnode as VnodeWithDom);\n      continue;\n    }\n\n    if (childVnode === null || childVnode === undefined) {\n      newTree.splice(i--, 1);\n      continue;\n    }\n\n    if (Array.isArray(childVnode)) {\n      newTree.splice(i--, 1, ...childVnode);\n      continue;\n    }\n\n    if (childVnode instanceof VnodeComponent) {\n      current.component = childVnode.component;\n      newTree.splice(\n        i--,\n        1,\n        (childVnode.component.view\n          ? childVnode.component.view.bind(childVnode.component)\n          : childVnode.component.bind(childVnode.component))(\n          childVnode.props,\n          ...childVnode.children\n        )\n      );\n      continue;\n    }\n\n    if (childVnode instanceof VnodeText === false) {\n      newTree[i] = childVnode = new VnodeText(String(childVnode));\n    }\n\n    let oldChildVnode = oldTree[i];\n\n    if (!oldChildVnode) {\n      childVnode.dom = document.createTextNode(childVnode.nodeValue);\n      newParentVnode.dom.appendChild(childVnode.dom);\n      continue;\n    }\n\n    if (oldChildVnode instanceof VnodeText) {\n      childVnode.dom = oldChildVnode.dom;\n      // eslint-disable-next-line eqeqeq\n      if (childVnode.nodeValue != childVnode.dom.nodeValue) {\n        childVnode.dom.nodeValue = childVnode.nodeValue;\n      }\n      continue;\n    }\n\n    childVnode.dom = document.createTextNode(childVnode.nodeValue);\n    callRemove(oldChildVnode);\n    newParentVnode.dom.replaceChild(childVnode.dom, oldChildVnode.dom);\n  }\n\n  let newTreeLength = newTree.length;\n\n  // If new tree is empty, fast remove all old nodes\n  if (newTreeLength === 0) {\n    for (let i = oldTreeLength; i--; ) {\n      oldTree[i] instanceof Vnode && callRemove(oldTree[i]);\n    }\n    newParentVnode.dom.textContent = \"\";\n    return;\n  }\n\n  // For the rest of the children, we should remove them\n  for (let i = oldTreeLength - 1; i >= newTreeLength; --i) {\n    oldTree[i] instanceof Vnode && callRemove(oldTree[i]);\n    oldTree[i].dom.parentNode &&\n      oldTree[i].dom.parentNode.removeChild(oldTree[i].dom);\n  }\n}\n\nv.update = () => {\n  if (v.mainVnode) {\n    onCleanupList.length && callCallbackList(onCleanupList);\n    let oldMainVnode = v.mainVnode;\n    let newMainVnode = new Vnode(oldMainVnode.tag, oldMainVnode.props, [\n      v.component instanceof VnodeComponent\n        ? v.component\n        : v(v.component as Component, null)\n    ]) as VnodeWithDom;\n    newMainVnode.dom = oldMainVnode.dom;\n    newMainVnode.isSVG = oldMainVnode.isSVG;\n    v.mainVnode = newMainVnode;\n    patch(newMainVnode, oldMainVnode);\n    if (v.isMounted === false) {\n      onMountList.length && callCallbackList(onMountList);\n      v.isMounted = true;\n    } else {\n      onUpdateList.length && callCallbackList(onUpdateList);\n    }\n    if (v.isNodeJs) {\n      return (newMainVnode.dom as HTMLElement).innerHTML;\n    }\n  }\n};\n\nv.unmount = () => {\n  if (v.mainVnode) {\n    onCleanupList.length && callCallbackList(onCleanupList);\n    onUnmountList.length && callCallbackList(onUnmountList);\n    v.component = emptyComponent;\n    let result = v.update();\n    v.mainVnode = null;\n    v.component = null;\n    v.isMounted = false;\n    return result;\n  }\n};\n\nv.mount = (container, component) => {\n  if (v.isMounted) {\n    v.unmount();\n  }\n\n  let mainContainer;\n  if (v.isNodeJs) {\n    mainContainer =\n      typeof container === \"string\"\n        ? createDomElement(container, container === \"svg\")\n        : container;\n  } else {\n    mainContainer =\n      typeof container === \"string\"\n        ? (document.querySelectorAll(container)[0] as DomElement)\n        : container;\n  }\n\n  v.mainVnode = domToVnode(mainContainer);\n  v.mainVnode.isSVG = v.mainVnode.tag === \"svg\";\n  v.component = component;\n\n  return v.update();\n};\n\nconst plugins = new Map<Plugin, any>();\n\nv.use = (\n  plugin: Plugin,\n  options?: Record<string | number | symbol, any>\n): void | any => {\n  if (plugins.has(plugin)) {\n    return plugins.get(plugin);\n  }\n\n  let result = plugin(v, options);\n  plugins.set(plugin, result);\n  return result;\n};\n\nlet hideDirective = (test: boolean) => (\n  bool: boolean,\n  vnode: Vnode,\n  oldnode?: Vnode | VnodeText\n) => {\n  let value = test ? bool : !bool;\n  if (value) {\n    let newdom = document.createTextNode(\"\");\n    if (oldnode && oldnode.dom && oldnode.dom.parentNode) {\n      oldnode instanceof Vnode && callRemove(oldnode);\n      oldnode.dom.parentNode.replaceChild(newdom, oldnode.dom);\n    }\n    vnode.tag = \"#text\";\n    vnode.children = [];\n    vnode.props = {};\n    vnode.dom = (newdom as unknown) as DomElement;\n    return false;\n  }\n};\n\nconst directives: Directives = {\n  \"v-if\": hideDirective(false),\n  \"v-unless\": hideDirective(true),\n  \"v-for\": (set: unknown[], vnode: VnodeWithDom) => {\n    vnode.children = set.map(vnode.children[0]);\n  },\n  \"v-show\": (bool: boolean, vnode: VnodeWithDom) => {\n    ((vnode.dom as unknown) as {\n      style: { display: string };\n    }).style.display = bool ? \"\" : \"none\";\n  },\n  \"v-class\": (classes: { [x: string]: boolean }, vnode: VnodeWithDom) => {\n    for (let name in classes) {\n      (vnode.dom as DomElement).classList.toggle(name, classes[name]);\n    }\n  },\n  \"v-html\": (html: string, vnode: VnodeWithDom) => {\n    vnode.children = [v.trust(html)];\n  },\n  \"v-model\": (\n    [model, property, event]: any[],\n    vnode: VnodeWithDom,\n    oldVnode?: VnodeWithDom\n  ) => {\n    let value;\n    let handler;\n    if (vnode.tag === \"input\") {\n      event = event || \"oninput\";\n      switch (vnode.props.type) {\n        case \"checkbox\": {\n          if (Array.isArray(model[property])) {\n            handler = (e: Event) => {\n              let val = (e.target as DomElement & Record<string, any>).value;\n              let idx = model[property].indexOf(val);\n              if (idx === -1) {\n                model[property].push(val);\n              } else {\n                model[property].splice(idx, 1);\n              }\n            };\n            value = model[property].indexOf(vnode.dom.value) !== -1;\n          } else if (\"value\" in vnode.props) {\n            handler = () => {\n              if (model[property] === vnode.props.value) {\n                model[property] = null;\n              } else {\n                model[property] = vnode.props.value;\n              }\n            };\n            value = model[property] === vnode.props.value;\n          } else {\n            handler = () => (model[property] = !model[property]);\n            value = model[property];\n          }\n          setAttribute(\"checked\", value, vnode, oldVnode);\n          break;\n        }\n        case \"radio\": {\n          setAttribute(\n            \"checked\",\n            model[property] === vnode.dom.value,\n            vnode,\n            oldVnode\n          );\n          break;\n        }\n        default: {\n          setAttribute(\"value\", model[property], vnode, oldVnode);\n        }\n      }\n    } else if (vnode.tag === \"select\") {\n      event = event || \"onclick\";\n      if (vnode.props.multiple) {\n        handler = (e: Event & Record<string, any>) => {\n          let val = (e.target as DomElement & Record<string, any>).value;\n          if (e.ctrlKey) {\n            let idx = model[property].indexOf(val);\n            if (idx === -1) {\n              model[property].push(val);\n            } else {\n              model[property].splice(idx, 1);\n            }\n          } else {\n            model[property].splice(0, model[property].length);\n            model[property].push(val);\n          }\n        };\n        vnode.children.forEach((child: Vnode) => {\n          if (child.tag === \"option\") {\n            let value =\n              \"value\" in child.props\n                ? child.props.value\n                : child.children.join(\"\").trim();\n            child.props.selected = model[property].indexOf(value) !== -1;\n          }\n        });\n      } else {\n        vnode.children.forEach((child: Vnode) => {\n          if (child.tag === \"option\") {\n            let value =\n              \"value\" in child.props\n                ? child.props.value\n                : child.children.join(\"\").trim();\n            child.props.selected = value === model[property];\n          }\n        });\n      }\n    } else if (vnode.tag === \"textarea\") {\n      event = event || \"oninput\";\n      vnode.children = [model[property]];\n    }\n\n    if (!vnode.props[event]) {\n      if (!handler) {\n        handler = (e: Event) =>\n          (model[property] = (e.target as DomElement &\n            Record<string, any>).value);\n      }\n      setAttribute(event, handler, vnode, oldVnode);\n    }\n  }\n};\n\nv.directive = (name: string, directive: Directive) => {\n  let fullName = `v-${name}`;\n  directives[fullName] = directive;\n  reservedProps[fullName] = true;\n};\n\nv.isNodeJs = Boolean(\n  typeof process !== \"undefined\" && process.versions && process.versions.node\n);\nv.isMounted = false;\n\nv.component = null;\nv.mainVnode = null;\n\nv.directives = directives;\nv.reservedProps = reservedProps;\nv.current = current;\n\nv.setAttribute = setAttribute;\n\nexport default v;\n"],"mappings":"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"}