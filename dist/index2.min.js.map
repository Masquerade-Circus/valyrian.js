//# sourceMappingURL=data:application/json;charset=utf-8;base64,{"version":3,"names":["current","onCleanupList","onMountList","onUpdateList","onUnmountList","emptyComponent","eventListenerNames","eventListener","e","dom","target","name","type","defaultPrevented","v","update","parentNode","reservedProps","key","state","oncreate","onupdate","onremove","shouldupdate","elementsToClone","elementsToCloneSvg","createDomElement","tag","isSVG","document","createElementNS","cloneNode","createElement","Vnode","props","children","this","VnodeText","nodeValue","VnodeComponent","component","domToVnode","i","childNodes","length","childDom","nodeType","push","vnode2","attributes","attr","nodeName","vnode","tagName","toLowerCase","tagOrComponent","callCallbackList","list","sharedSetAttribute","prop","newVnode","oldVnode","directives","value","mainVnode","addEventListener","slice","removeAttribute","setAttribute","setAttributes","fragment","vnodes","trust","htmlString","div","innerHTML","trim","map","call","item","isVnode","object","isVnodeComponent","isValyrianComponent","Boolean","isComponent","onCleanup","callback","indexOf","onUnmount","onMount","onUpdate","callRemove","l","patch","newParentVnode","oldParentVnode","oldTree","newTree","oldTreeLength","newTreeLength2","oldKeyedList","newKeyedList","childVnode","oldChildVnode","shouldPatch","isMounted","replaceChild","appendChild","removeChild","oldChildVnode2","splice","Array","isArray","view","bind","String","createTextNode","newTreeLength","textContent","oldMainVnode","newMainVnode","isNodeJs","unmount","result","mount","container","mainContainer","querySelectorAll","plugins","Map","use","plugin","options","has","get","set","hideDirective","test","bool","oldnode","newdom","style","display","classes","classList","toggle","html","model","property","event","handler","val","idx","multiple","ctrlKey","forEach","child","value2","join","selected","directive","fullName","process","versions","node"],"sources":["../lib/index2.ts"],"sourcesContent":["/* eslint-disable sonarjs/cognitive-complexity */\n/* eslint-disable complexity */\n\nimport {\n  Children,\n  Component,\n  Current,\n  Directive,\n  Directives,\n  DomElement,\n  Plugin,\n  Props,\n  Valyrian,\n  ValyrianComponent,\n  Vnode,\n  VnodeText,\n  VnodeWithDom,\n  VnodeComponent\n} from \"./interfaces2\";\n\nconst current: Current = {};\nconst onCleanupList: Function[] = [];\nconst onMountList: Function[] = [];\nconst onUpdateList: Function[] = [];\nconst onUnmountList: Function[] = [];\nconst emptyComponent: Component = () => \"\";\n\nconst eventListenerNames: Record<string, true> = {};\nfunction eventListener(e: Event) {\n  let dom = e.target as DomElement;\n  let name = `v-on${e.type}`;\n  while (dom) {\n    if (dom[name]) {\n      dom[name](e, dom);\n      if (!e.defaultPrevented) {\n        v.update();\n      }\n      return;\n    }\n    dom = dom.parentNode as DomElement;\n  }\n}\n\nconst reservedProps: Record<string, true> = {\n  key: true,\n  state: true,\n  oncreate: true,\n  onupdate: true,\n  onremove: true,\n  shouldupdate: true,\n  \"v-once\": true,\n\n  // Built in directives\n  \"v-if\": true,\n  \"v-unless\": true,\n  \"v-for\": true,\n  \"v-show\": true,\n  \"v-class\": true,\n  \"v-html\": true,\n  \"v-model\": true\n};\n\nconst elementsToClone: Record<string, DomElement> = {};\nconst elementsToCloneSvg: Record<string, DomElement> = {};\n\nfunction createDomElement(tag: string, isSVG: boolean = false): DomElement {\n  // return isSVG ? document.createElementNS(\"http://www.w3.org/2000/svg\", tag) : document.createElement(tag);\n  if (isSVG) {\n    if (!elementsToCloneSvg[tag]) {\n      elementsToCloneSvg[tag] = document.createElementNS(\"http://www.w3.org/2000/svg\", tag) as any;\n    }\n\n    return elementsToCloneSvg[tag].cloneNode(false) as any;\n  }\n\n  if (!elementsToClone[tag]) {\n    elementsToClone[tag] = document.createElement(tag) as any;\n  }\n\n  return elementsToClone[tag].cloneNode(false) as any;\n}\n\nconst Vnode = function Vnode(this: Vnode, tag: string, props: Props, children: Children) {\n  this.tag = tag;\n  this.props = props;\n  this.children = children;\n} as unknown as Vnode;\n\nconst VnodeText = function VnodeText(this: VnodeText, nodeValue: string) {\n  this.nodeValue = nodeValue;\n} as unknown as VnodeText;\n\nconst VnodeComponent = function VnodeComponent(this: VnodeComponent, component: Component | ValyrianComponent, props: Props, children: Children) {\n  this.component = component;\n  this.props = props;\n  this.children = children;\n} as unknown as VnodeComponent;\n\n// Transforms a DOM node to a VNode\nfunction domToVnode(dom: any): VnodeWithDom {\n  let children = [];\n  for (let i = 0; i < dom.childNodes.length; i++) {\n    let childDom = dom.childNodes[i];\n    if (childDom.nodeType === 3) {\n      let vnode = new VnodeText(childDom.nodeValue);\n      vnode.dom = childDom;\n      children.push(vnode);\n      continue;\n    }\n\n    if (childDom.nodeType === 1) {\n      children.push(domToVnode(childDom));\n    }\n  }\n\n  let props: Props = {};\n  for (let i = 0; i < dom.attributes.length; i++) {\n    let attr = dom.attributes[i];\n    props[attr.nodeName] = attr.nodeValue;\n  }\n\n  let vnode = new Vnode(dom.tagName.toLowerCase(), props, children);\n  vnode.dom = dom;\n  return vnode as VnodeWithDom;\n}\n\nconst v: Valyrian = (tagOrComponent, props, ...children) => {\n  if (typeof tagOrComponent === \"string\") {\n    return new Vnode(tagOrComponent, props || {}, children);\n  }\n\n  return new VnodeComponent(tagOrComponent, props || {}, children);\n};\n\nv.fragment = (props: Props, ...vnodes: Children) => {\n  return vnodes;\n};\n\nv.trust = (htmlString: string) => {\n  let div = createDomElement(\"div\");\n  div.innerHTML = htmlString.trim();\n\n  return [].map.call(div.childNodes, (item) => domToVnode(item)) as Vnode[];\n};\n\nv.isVnode = (object?: unknown | Vnode): object is Vnode => {\n  return object instanceof Vnode;\n};\n\nv.isVnodeComponent = (object?: unknown | VnodeComponent): object is VnodeComponent => {\n  return object instanceof VnodeComponent;\n};\n\nv.isValyrianComponent = (component?: unknown | ValyrianComponent): component is ValyrianComponent => {\n  return Boolean(component && typeof component === \"object\" && \"view\" in component);\n};\n\nv.isComponent = (component?: unknown | ValyrianComponent): component is ValyrianComponent => {\n  return Boolean((component && typeof component === \"function\") || v.isValyrianComponent(component) || v.isVnodeComponent(component));\n};\n\nv.onCleanup = (callback: Function): void => {\n  if (onCleanupList.indexOf(callback) === -1) {\n    onCleanupList.push(callback);\n  }\n};\nv.onUnmount = (callback: Function): void => {\n  if (onUnmountList.indexOf(callback) === -1) {\n    onUnmountList.push(callback);\n  }\n};\nv.onMount = (callback: Function): void => {\n  if (onMountList.indexOf(callback) === -1) {\n    onMountList.push(callback);\n  }\n};\nv.onUpdate = (callback: Function): void => {\n  if (onUpdateList.indexOf(callback) === -1) {\n    onUpdateList.push(callback);\n  }\n};\n\nfunction callCallbackList(list: Function[]): void {\n  for (let i = 0; i < list.length; i++) {\n    list[i]();\n  }\n  list.length = 0;\n}\n\nfunction sharedSetAttribute(prop: string, newVnode: VnodeWithDom, oldVnode?: VnodeWithDom): void | boolean {\n  if (reservedProps[prop]) {\n    if (directives[prop]) {\n      return directives[prop](newVnode.props[prop], newVnode, oldVnode);\n    }\n    return;\n  }\n\n  let value = newVnode.props[prop];\n  let dom = newVnode.dom;\n\n  if (typeof value === \"function\") {\n    if (!eventListenerNames[prop]) {\n      (v.mainVnode as VnodeWithDom).dom.addEventListener(prop.slice(2), eventListener);\n      eventListenerNames[prop] = true;\n    }\n    dom[`v-${prop}`] = value;\n    return;\n  }\n\n  if (prop in dom && !newVnode.isSVG) {\n    // eslint-disable-next-line eqeqeq\n    if (dom[prop] != value) {\n      dom[prop] = value;\n    }\n\n    return;\n  }\n\n  if (!oldVnode || value !== oldVnode.props[prop]) {\n    if (value === false) {\n      dom.removeAttribute(prop);\n    } else {\n      dom.setAttribute(prop, value);\n    }\n  }\n}\n\nfunction setAttribute(name: string, value: any, vnode: Vnode, oldVnode?: VnodeWithDom): void {\n  vnode.props[name] = value;\n  sharedSetAttribute(name, vnode as VnodeWithDom, oldVnode);\n}\n\nfunction setAttributes(newVnode: VnodeWithDom, oldVnode?: VnodeWithDom): void {\n  for (let prop in newVnode.props) {\n    if (sharedSetAttribute(prop, newVnode, oldVnode) === false) {\n      return;\n    }\n  }\n\n  if (oldVnode) {\n    for (let name in oldVnode.props) {\n      if (name in newVnode.props === false && typeof oldVnode.props[name] !== \"function\" && !reservedProps[name]) {\n        if (name in newVnode.dom && newVnode.isSVG === false) {\n          newVnode.dom[name] = null;\n        } else {\n          newVnode.dom.removeAttribute(name);\n        }\n      }\n    }\n  }\n}\n\nconst callRemove = (vnode: Vnode) => {\n  for (let i = 0, l = vnode.children.length; i < l; i++) {\n    vnode.children[i] instanceof Vnode && callRemove(vnode.children[i]);\n  }\n\n  vnode.props.onremove && vnode.props.onremove(vnode);\n};\n\n// Patch a DOM node with a new VNode tree\nfunction patch(newParentVnode: VnodeWithDom, oldParentVnode?: VnodeWithDom): void {\n  let oldTree = oldParentVnode?.children || [];\n  let newTree = newParentVnode.children;\n  let oldTreeLength = oldTree.length;\n\n  current.vnode = newParentVnode;\n  current.oldVnode = oldParentVnode;\n\n  if (newTree[0] instanceof Vnode && oldTree[0] instanceof Vnode && \"key\" in newTree[0].props && \"key\" in oldTree[0].props) {\n    let newTreeLength = newTree.length;\n    let oldKeyedList: { [key: string]: number } = {};\n    for (let i = 0; i < oldTreeLength; i++) {\n      oldKeyedList[oldTree[i].props.key] = i;\n    }\n\n    let newKeyedList: { [key: string]: number } = {};\n    for (let i = 0; i < newTreeLength; i++) {\n      newKeyedList[newTree[i].props.key] = i;\n    }\n\n    for (let i = 0; i < newTreeLength; i++) {\n      let childVnode = newTree[i];\n      let oldChildVnode = oldTree[oldKeyedList[childVnode.props.key]];\n      let shouldPatch = true;\n\n      if (oldChildVnode) {\n        childVnode.dom = oldChildVnode.dom;\n        if (childVnode.props[\"v-once\"] || (childVnode.props.shouldupdate && childVnode.props.shouldupdate(childVnode, oldChildVnode) === false)) {\n          childVnode.children = oldChildVnode.children;\n          shouldPatch = false;\n        } else {\n          setAttributes(childVnode, oldChildVnode);\n          if (v.isMounted) {\n            childVnode.props.onupdate && childVnode.props.onupdate(childVnode, oldChildVnode);\n          } else {\n            childVnode.props.oncreate && childVnode.props.oncreate(childVnode);\n          }\n        }\n      } else {\n        childVnode.dom = createDomElement(childVnode.tag, childVnode.isSVG);\n        setAttributes(childVnode);\n        childVnode.props.oncreate && childVnode.props.oncreate(childVnode);\n      }\n\n      if (!newParentVnode.dom.childNodes[i]) {\n        newParentVnode.dom.appendChild(childVnode.dom);\n      } else if (newParentVnode.dom.childNodes[i] !== childVnode.dom) {\n        oldTree[i] && !newKeyedList[oldTree[i].props.key] && callRemove(oldTree[i]);\n        newParentVnode.dom.replaceChild(childVnode.dom, newParentVnode.dom.childNodes[i]);\n      }\n\n      shouldPatch && patch(childVnode, oldChildVnode);\n    }\n\n    // For the rest of the children, we should remove them\n    for (let i = newTreeLength; i < oldTreeLength; i++) {\n      if (!newKeyedList[oldTree[i].props.key]) {\n        let oldChildVnode = oldTree[i];\n        callRemove(oldChildVnode);\n        oldChildVnode.dom.parentNode && oldChildVnode.dom.parentNode.removeChild(oldChildVnode.dom);\n      }\n    }\n    return;\n  }\n\n  // Flat newTree\n  for (let i = 0; i < newTree.length; i++) {\n    let childVnode = newTree[i];\n\n    if (childVnode instanceof Vnode) {\n      let oldChildVnode = oldTree[i];\n      childVnode.isSVG = newParentVnode.isSVG || childVnode.tag === \"svg\";\n\n      if (!oldChildVnode) {\n        childVnode.dom = createDomElement(childVnode.tag, childVnode.isSVG);\n        setAttributes(childVnode as VnodeWithDom);\n        childVnode.props.oncreate && childVnode.props.oncreate(childVnode);\n        patch(childVnode as VnodeWithDom);\n        newParentVnode.dom.appendChild(childVnode.dom);\n        continue;\n      }\n\n      if (childVnode.tag === oldChildVnode.tag) {\n        childVnode.dom = oldChildVnode.dom;\n\n        if (childVnode.props[\"v-once\"] || (childVnode.props.shouldupdate && childVnode.props.shouldupdate(childVnode, oldChildVnode) === false)) {\n          childVnode.children = oldChildVnode.children;\n          continue;\n        }\n\n        setAttributes(childVnode as VnodeWithDom, oldChildVnode);\n        if (v.isMounted) {\n          childVnode.props.onupdate && childVnode.props.onupdate(childVnode, oldChildVnode);\n        } else {\n          childVnode.props.oncreate && childVnode.props.oncreate(childVnode);\n        }\n        patch(childVnode as VnodeWithDom, oldChildVnode);\n        continue;\n      }\n\n      childVnode.dom = createDomElement(childVnode.tag, childVnode.isSVG);\n      setAttributes(childVnode as VnodeWithDom);\n      childVnode.props.oncreate && childVnode.props.oncreate(childVnode);\n      oldChildVnode instanceof Vnode && callRemove(oldChildVnode);\n      newParentVnode.dom.replaceChild(childVnode.dom, oldChildVnode.dom);\n      patch(childVnode as VnodeWithDom);\n      continue;\n    }\n\n    if (childVnode === null || childVnode === undefined) {\n      newTree.splice(i--, 1);\n      continue;\n    }\n\n    if (Array.isArray(childVnode)) {\n      newTree.splice(i--, 1, ...childVnode);\n      continue;\n    }\n\n    if (childVnode instanceof VnodeComponent) {\n      current.component = childVnode.component;\n      newTree.splice(\n        i--,\n        1,\n        (childVnode.component.view ? childVnode.component.view.bind(childVnode.component) : childVnode.component.bind(childVnode.component))(\n          childVnode.props,\n          ...childVnode.children\n        )\n      );\n      continue;\n    }\n\n    // if (i > 0 && newTree[i - 1] instanceof VnodeText) {\n    //   newTree[i - 1].nodeValue += childVnode;\n    //   newTree[i - 1].dom.nodeValue += childVnode;\n    //   newTree.splice(i--, 1);\n    //   continue;\n    // }\n\n    if (childVnode instanceof VnodeText === false) {\n      newTree[i] = childVnode = new VnodeText(String(childVnode));\n    }\n\n    let oldChildVnode = oldTree[i];\n\n    if (!oldChildVnode) {\n      childVnode.dom = document.createTextNode(childVnode.nodeValue);\n      newParentVnode.dom.appendChild(childVnode.dom);\n      continue;\n    }\n\n    if (oldChildVnode instanceof VnodeText) {\n      childVnode.dom = oldChildVnode.dom;\n      // eslint-disable-next-line eqeqeq\n      if (childVnode.nodeValue != childVnode.dom.nodeValue) {\n        childVnode.dom.nodeValue = childVnode.nodeValue;\n      }\n      continue;\n    }\n\n    childVnode.dom = document.createTextNode(childVnode.nodeValue);\n    callRemove(oldChildVnode);\n    newParentVnode.dom.replaceChild(childVnode.dom, oldChildVnode.dom);\n  }\n\n  let newTreeLength = newTree.length;\n\n  // If new tree is empty, fast remove all old nodes\n  if (newTreeLength === 0) {\n    for (let i = oldTreeLength; i--; ) {\n      oldTree[i] instanceof Vnode && callRemove(oldTree[i]);\n    }\n    newParentVnode.dom.textContent = \"\";\n    return;\n  }\n\n  // For the rest of the children, we should remove them\n  for (let i = oldTreeLength - 1; i >= newTreeLength; --i) {\n    oldTree[i] instanceof Vnode && callRemove(oldTree[i]);\n    oldTree[i].dom.parentNode && oldTree[i].dom.parentNode.removeChild(oldTree[i].dom);\n  }\n}\n\nv.update = () => {\n  if (v.mainVnode) {\n    onCleanupList.length && callCallbackList(onCleanupList);\n    let oldMainVnode = v.mainVnode;\n    let newMainVnode = new Vnode(oldMainVnode.tag, oldMainVnode.props, [\n      v.component instanceof VnodeComponent ? v.component : v(v.component as Component, null)\n    ]) as VnodeWithDom;\n    newMainVnode.dom = oldMainVnode.dom;\n    newMainVnode.isSVG = oldMainVnode.isSVG;\n    v.mainVnode = newMainVnode;\n    patch(newMainVnode, oldMainVnode);\n    if (v.isMounted === false) {\n      onMountList.length && callCallbackList(onMountList);\n      v.isMounted = true;\n    } else {\n      onUpdateList.length && callCallbackList(onUpdateList);\n    }\n    if (v.isNodeJs) {\n      return (newMainVnode.dom as HTMLElement).innerHTML;\n    }\n  }\n};\n\nv.unmount = () => {\n  if (v.mainVnode) {\n    onCleanupList.length && callCallbackList(onCleanupList);\n    onUnmountList.length && callCallbackList(onUnmountList);\n    v.component = emptyComponent;\n    let result = v.update();\n    v.mainVnode = null;\n    v.component = null;\n    v.isMounted = false;\n    return result;\n  }\n};\n\nv.mount = (container, component) => {\n  if (v.isMounted) {\n    v.unmount();\n  }\n\n  let mainContainer;\n  if (v.isNodeJs) {\n    mainContainer = typeof container === \"string\" ? createDomElement(container, container === \"svg\") : container;\n  } else {\n    mainContainer = typeof container === \"string\" ? (document.querySelectorAll(container)[0] as DomElement) : container;\n  }\n\n  v.mainVnode = domToVnode(mainContainer);\n  v.mainVnode.isSVG = v.mainVnode.tag === \"svg\";\n  v.component = component;\n\n  return v.update();\n};\n\nconst plugins = new Map<Plugin, any>();\n\nv.use = (plugin: Plugin, options?: Record<string | number | symbol, any>): void | any => {\n  if (plugins.has(plugin)) {\n    return plugins.get(plugin);\n  }\n\n  let result = plugin(v, options);\n  plugins.set(plugin, result);\n  return result;\n};\n\nlet hideDirective = (test: boolean) => (bool: boolean, vnode: Vnode, oldnode?: Vnode | VnodeText) => {\n  let value = test ? bool : !bool;\n  if (value) {\n    let newdom = document.createTextNode(\"\");\n    if (oldnode && oldnode.dom && oldnode.dom.parentNode) {\n      oldnode instanceof Vnode && callRemove(oldnode);\n      oldnode.dom.parentNode.replaceChild(newdom, oldnode.dom);\n    }\n    vnode.tag = \"#text\";\n    vnode.children = [];\n    vnode.props = {};\n    vnode.dom = newdom as unknown as DomElement;\n    return false;\n  }\n};\n\nconst directives: Directives = {\n  \"v-if\": hideDirective(false),\n  \"v-unless\": hideDirective(true),\n  \"v-for\": (set: unknown[], vnode: VnodeWithDom) => {\n    vnode.children = set.map(vnode.children[0]);\n  },\n  \"v-show\": (bool: boolean, vnode: VnodeWithDom) => {\n    (vnode.dom as unknown as { style: { display: string } }).style.display = bool ? \"\" : \"none\";\n  },\n  \"v-class\": (classes: { [x: string]: boolean }, vnode: VnodeWithDom) => {\n    for (let name in classes) {\n      (vnode.dom as DomElement).classList.toggle(name, classes[name]);\n    }\n  },\n  \"v-html\": (html: string, vnode: VnodeWithDom) => {\n    vnode.children = [v.trust(html)];\n  },\n  \"v-model\": ([model, property, event]: any[], vnode: VnodeWithDom, oldVnode?: VnodeWithDom) => {\n    let value;\n    let handler;\n    if (vnode.tag === \"input\") {\n      event = event || \"oninput\";\n      switch (vnode.props.type) {\n        case \"checkbox\": {\n          if (Array.isArray(model[property])) {\n            handler = (e: Event) => {\n              let val = (e.target as DomElement & Record<string, any>).value;\n              let idx = model[property].indexOf(val);\n              if (idx === -1) {\n                model[property].push(val);\n              } else {\n                model[property].splice(idx, 1);\n              }\n            };\n            value = model[property].indexOf(vnode.dom.value) !== -1;\n          } else if (\"value\" in vnode.props) {\n            handler = () => {\n              if (model[property] === vnode.props.value) {\n                model[property] = null;\n              } else {\n                model[property] = vnode.props.value;\n              }\n            };\n            value = model[property] === vnode.props.value;\n          } else {\n            handler = () => (model[property] = !model[property]);\n            value = model[property];\n          }\n          setAttribute(\"checked\", value, vnode, oldVnode);\n          break;\n        }\n        case \"radio\": {\n          setAttribute(\"checked\", model[property] === vnode.dom.value, vnode, oldVnode);\n          break;\n        }\n        default: {\n          setAttribute(\"value\", model[property], vnode, oldVnode);\n        }\n      }\n    } else if (vnode.tag === \"select\") {\n      event = event || \"onclick\";\n      if (vnode.props.multiple) {\n        handler = (e: Event & Record<string, any>) => {\n          let val = (e.target as DomElement & Record<string, any>).value;\n          if (e.ctrlKey) {\n            let idx = model[property].indexOf(val);\n            if (idx === -1) {\n              model[property].push(val);\n            } else {\n              model[property].splice(idx, 1);\n            }\n          } else {\n            model[property].splice(0, model[property].length);\n            model[property].push(val);\n          }\n        };\n        vnode.children.forEach((child: Vnode) => {\n          if (child.tag === \"option\") {\n            let value = \"value\" in child.props ? child.props.value : child.children.join(\"\").trim();\n            child.props.selected = model[property].indexOf(value) !== -1;\n          }\n        });\n      } else {\n        vnode.children.forEach((child: Vnode) => {\n          if (child.tag === \"option\") {\n            let value = \"value\" in child.props ? child.props.value : child.children.join(\"\").trim();\n            child.props.selected = value === model[property];\n          }\n        });\n      }\n    } else if (vnode.tag === \"textarea\") {\n      event = event || \"oninput\";\n      vnode.children = [model[property]];\n    }\n\n    if (!vnode.props[event]) {\n      if (!handler) {\n        handler = (e: Event) => (model[property] = (e.target as DomElement & Record<string, any>).value);\n      }\n      setAttribute(event, handler, vnode, oldVnode);\n    }\n  }\n};\n\nv.directive = (name: string, directive: Directive) => {\n  let fullName = `v-${name}`;\n  directives[fullName] = directive;\n  reservedProps[fullName] = true;\n};\n\nv.isNodeJs = Boolean(typeof process !== \"undefined\" && process.versions && process.versions.node);\nv.isMounted = false;\n\nv.component = null;\nv.mainVnode = null;\n\nv.directives = directives;\nv.reservedProps = reservedProps;\nv.current = current;\n\nv.setAttribute = setAttribute;\n\nexport default v;\n"],"mappings":"MAoBA,IAAMA,EAAmB,CAAC,EACpBC,EAA4B,GAC5BC,EAA0B,GAC1BC,EAA2B,GAC3BC,EAA4B,GAC5BC,EAA4B,IAAM,GAElCC,EAA2C,CAAC,EAClD,SAAAC,EAAuBC,GACrB,IAAIC,EAAMD,EAAEE,OACRC,EAAO,OAAOH,EAAEI,OACpB,KAAOH,GAAK,CACV,GAAIA,EAAIE,GAKN,OAJAF,EAAIE,GAAMH,EAAGC,QACRD,EAAEK,kBACLC,EAAEC,UAINN,EAAMA,EAAIO,UACZ,CACF,CAEA,IAAMC,EAAsC,CAC1CC,KAAK,EACLC,OAAO,EACPC,UAAU,EACVC,UAAU,EACVC,UAAU,EACVC,cAAc,EACd,UAAU,EAGV,QAAQ,EACR,YAAY,EACZ,SAAS,EACT,UAAU,EACV,WAAW,EACX,UAAU,EACV,WAAW,GAGPC,EAA8C,CAAC,EAC/CC,EAAiD,CAAC,EAExD,SAAAC,EAA0BC,EAAaC,GAAiB,GAEtD,OAAIA,GACGH,EAAmBE,KACtBF,EAAmBE,GAAOE,SAASC,gBAAgB,6BAA8BH,IAG5EF,EAAmBE,GAAKI,WAAU,KAGtCP,EAAgBG,KACnBH,EAAgBG,GAAOE,SAASG,cAAcL,IAGzCH,EAAgBG,GAAKI,WAAU,GACxC,CAEA,IAAME,EAAQ,SAA4BN,EAAaO,EAAcC,GACnEC,KAAKT,IAAMA,EACXS,KAAKF,MAAQA,EACbE,KAAKD,SAAWA,CAClB,EAEME,EAAY,SAAoCC,GACpDF,KAAKE,UAAYA,CACnB,EAEMC,EAAiB,SAA8CC,EAA0CN,EAAcC,GAC3HC,KAAKI,UAAYA,EACjBJ,KAAKF,MAAQA,EACbE,KAAKD,SAAWA,CAClB,EAGA,SAAAM,EAAoBhC,GAClB,IAAI0B,EAAW,GACf,QAASO,EAAI,EAAGA,EAAIjC,EAAIkC,WAAWC,OAAQF,IAAK,CAC9C,IAAIG,EAAWpC,EAAIkC,WAAWD,GAC9B,GAA0B,IAAtBG,EAASC,SAOa,IAAtBD,EAASC,UACXX,EAASY,KAAKN,EAAWI,QAR3B,CACE,IAAIG,EAAQ,IAAIX,EAAUQ,EAASP,WACnCU,EAAMvC,IAAMoC,EACZV,EAASY,KAAKC,EAEhB,CAKF,CAEA,IAAId,EAAe,CAAC,EACpB,QAASQ,EAAI,EAAGA,EAAIjC,EAAIwC,WAAWL,OAAQF,IAAK,CAC9C,IAAIQ,EAAOzC,EAAIwC,WAAWP,GAC1BR,EAAMgB,EAAKC,UAAYD,EAAKZ,SAC9B,CAEA,IAAIc,EAAQ,IAAInB,EAAMxB,EAAI4C,QAAQC,cAAepB,EAAOC,GAExD,OADAiB,EAAM3C,IAAMA,EACL2C,CACT,CAEA,IAAMtC,EAAc,CAACyC,EAAgBrB,KAAUC,IACf,iBAAnBoB,EACF,IAAItB,EAAMsB,EAAgBrB,GAAS,CAAC,EAAGC,GAGzC,IAAII,EAAegB,EAAgBrB,GAAS,CAAC,EAAGC,GAmDzD,SAAAqB,EAA0BC,GACxB,QAASf,EAAI,EAAGA,EAAIe,EAAKb,OAAQF,IAC/Be,EAAKf,KAEPe,EAAKb,OAAS,CAChB,CAEA,SAAAc,EAA4BC,EAAcC,EAAwBC,GAChE,GAAI5C,EAAc0C,GAChB,OAAIG,EAAWH,GACNG,EAAWH,GAAMC,EAAS1B,MAAMyB,GAAOC,EAAUC,QAE1D,EAGF,IAAIE,EAAQH,EAAS1B,MAAMyB,GACvBlD,EAAMmD,EAASnD,IAEnB,GAAqB,mBAAVsD,EAMT,OALKzD,EAAmBqD,KACrB7C,EAAEkD,UAA2BvD,IAAIwD,iBAAiBN,EAAKO,MAAM,GAAI3D,GAClED,EAAmBqD,IAAQ,QAE7BlD,EAAI,KAAKkD,KAAUI,KAIjBJ,KAAQlD,IAAQmD,EAAShC,MASxBiC,GAAYE,IAAUF,EAAS3B,MAAMyB,MAC1B,IAAVI,EACFtD,EAAI0D,gBAAgBR,GAEpBlD,EAAI2D,aAAaT,EAAMI,IAXrBtD,EAAIkD,IAASI,IACftD,EAAIkD,GAAQI,EAalB,CAEA,SAAAK,EAAsBzD,EAAcoD,EAAYX,EAAcS,GAC5DT,EAAMlB,MAAMvB,GAAQoD,EACpBL,EAAmB/C,EAAMyC,EAAuBS,EAClD,CAEA,SAAAQ,EAAuBT,EAAwBC,GAC7C,QAASF,KAAQC,EAAS1B,MACxB,IAAqD,IAAjDwB,EAAmBC,EAAMC,EAAUC,GACrC,OAIJ,GAAIA,EACF,QAASlD,KAAQkD,EAAS3B,MACpBvB,KAAQiD,EAAS1B,QAAU,GAAyC,mBAAzB2B,EAAS3B,MAAMvB,IAAyBM,EAAcN,KAC/FA,KAAQiD,EAASnD,MAA0B,IAAnBmD,EAAShC,MACnCgC,EAASnD,IAAIE,GAAQ,KAErBiD,EAASnD,IAAI0D,gBAAgBxD,GAKvC,CApHAG,EAAEwD,SAAW,CAACpC,KAAiBqC,IACtBA,EAGTzD,EAAE0D,MAASC,IACT,IAAIC,EAAMhD,EAAiB,OAG3B,OAFAgD,EAAIC,UAAYF,EAAWG,OAEpB,GAAGC,IAAIC,KAAKJ,EAAI/B,WAAaoC,GAAStC,EAAWsC,GAAK,EAG/DjE,EAAEkE,QAAWC,GACJA,aAAkBhD,EAG3BnB,EAAEoE,iBAAoBD,GACbA,aAAkB1C,EAG3BzB,EAAEqE,oBAAuB3C,GAChB4C,QAAQ5C,GAAkC,iBAAdA,GAA0B,SAAUA,GAGzE1B,EAAEuE,YAAe7C,GACR4C,QAAS5C,GAAkC,mBAAdA,GAA6B1B,EAAEqE,oBAAoB3C,IAAc1B,EAAEoE,iBAAiB1C,IAG1H1B,EAAEwE,UAAaC,KAC2B,IAApCtF,EAAcuF,QAAQD,IACxBtF,EAAc8C,KAAKwC,EACrB,EAEFzE,EAAE2E,UAAaF,KAC2B,IAApCnF,EAAcoF,QAAQD,IACxBnF,EAAc2C,KAAKwC,EACrB,EAEFzE,EAAE4E,QAAWH,KAC2B,IAAlCrF,EAAYsF,QAAQD,IACtBrF,EAAY6C,KAAKwC,EACnB,EAEFzE,EAAE6E,SAAYJ,KAC2B,IAAnCpF,EAAaqF,QAAQD,IACvBpF,EAAa4C,KAAKwC,EACpB,EAyEF,IAAMK,EAAcxC,IAClB,QAASV,EAAI,EAAGmD,EAAIzC,EAAMjB,SAASS,OAAQF,EAAImD,EAAGnD,IAChDU,EAAMjB,SAASO,aAAcT,GAAS2D,EAAWxC,EAAMjB,SAASO,IAGlEU,EAAMlB,MAAMZ,UAAY8B,EAAMlB,MAAMZ,SAAS8B,EAAK,EAIpD,SAAA0C,EAAeC,EAA8BC,GAC3C,IAAIC,EAAUD,GAAgB7D,UAAY,GACtC+D,EAAUH,EAAe5D,SACzBgE,EAAgBF,EAAQrD,OAK5B,GAHA5C,EAAQoD,MAAQ2C,EAChB/F,EAAQ6D,SAAWmC,EAEfE,EAAQ,aAAcjE,GAASgE,EAAQ,aAAchE,GAAS,QAASiE,EAAQ,GAAGhE,OAAS,QAAS+D,EAAQ,GAAG/D,MAAO,CACxH,IAAIkE,EAAgBF,EAAQtD,OACxByD,EAA0C,CAAC,EAC/C,QAAS3D,EAAI,EAAGA,EAAIyD,EAAezD,IACjC2D,EAAaJ,EAAQvD,GAAGR,MAAMhB,KAAOwB,EAGvC,IAAI4D,EAA0C,CAAC,EAC/C,QAAS5D,EAAI,EAAGA,EAAI0D,EAAe1D,IACjC4D,EAAaJ,EAAQxD,GAAGR,MAAMhB,KAAOwB,EAGvC,QAASA,EAAI,EAAGA,EAAI0D,EAAe1D,IAAK,CACtC,IAAI6D,EAAaL,EAAQxD,GACrB8D,EAAgBP,EAAQI,EAAaE,EAAWrE,MAAMhB,MACtDuF,GAAc,EAEdD,GACFD,EAAW9F,IAAM+F,EAAc/F,IAC3B8F,EAAWrE,MAAM,WAAcqE,EAAWrE,MAAMX,eAA6E,IAA7DgF,EAAWrE,MAAMX,aAAagF,EAAYC,IAC5GD,EAAWpE,SAAWqE,EAAcrE,SACpCsE,GAAc,IAEdpC,EAAckC,EAAYC,GACtB1F,EAAE4F,UACJH,EAAWrE,MAAMb,UAAYkF,EAAWrE,MAAMb,SAASkF,EAAYC,GAEnED,EAAWrE,MAAMd,UAAYmF,EAAWrE,MAAMd,SAASmF,MAI3DA,EAAW9F,IAAMiB,EAAiB6E,EAAW5E,IAAK4E,EAAW3E,OAC7DyC,EAAckC,GACdA,EAAWrE,MAAMd,UAAYmF,EAAWrE,MAAMd,SAASmF,IAGpDR,EAAetF,IAAIkC,WAAWD,GAExBqD,EAAetF,IAAIkC,WAAWD,KAAO6D,EAAW9F,MACzDwF,EAAQvD,KAAO4D,EAAaL,EAAQvD,GAAGR,MAAMhB,MAAQ0E,EAAWK,EAAQvD,IACxEqD,EAAetF,IAAIkG,aAAaJ,EAAW9F,IAAKsF,EAAetF,IAAIkC,WAAWD,KAH9EqD,EAAetF,IAAImG,YAAYL,EAAW9F,KAM5CgG,GAAeX,EAAMS,EAAYC,EACnC,CAGA,QAAS9D,EAAI0D,EAAe1D,EAAIyD,EAAezD,IAC7C,IAAK4D,EAAaL,EAAQvD,GAAGR,MAAMhB,KAAM,CACvC,IAAIsF,EAAgBP,EAAQvD,GAC5BkD,EAAWY,GACXA,EAAc/F,IAAIO,YAAcwF,EAAc/F,IAAIO,WAAW6F,YAAYL,EAAc/F,IACzF,CAEF,MACF,CAGA,QAASiC,EAAI,EAAGA,EAAIwD,EAAQtD,OAAQF,IAAK,CACvC,IAAI6D,EAAaL,EAAQxD,GAEzB,GAAI6D,aAAsBtE,EAAO,CAC/B,IAAI6E,EAAgBb,EAAQvD,GAG5B,GAFA6D,EAAW3E,MAAQmE,EAAenE,OAA4B,QAAnB2E,EAAW5E,KAEjDmF,EAAe,CAClBP,EAAW9F,IAAMiB,EAAiB6E,EAAW5E,IAAK4E,EAAW3E,OAC7DyC,EAAckC,GACdA,EAAWrE,MAAMd,UAAYmF,EAAWrE,MAAMd,SAASmF,GACvDT,EAAMS,GACNR,EAAetF,IAAImG,YAAYL,EAAW9F,KAC1C,QACF,CAEA,GAAI8F,EAAW5E,MAAQmF,EAAcnF,IAAK,CAGxC,GAFA4E,EAAW9F,IAAMqG,EAAcrG,IAE3B8F,EAAWrE,MAAM,WAAcqE,EAAWrE,MAAMX,eAA6E,IAA7DgF,EAAWrE,MAAMX,aAAagF,EAAYO,GAA2B,CACvIP,EAAWpE,SAAW2E,EAAc3E,SACpC,QACF,CAEAkC,EAAckC,EAA4BO,GACtChG,EAAE4F,UACJH,EAAWrE,MAAMb,UAAYkF,EAAWrE,MAAMb,SAASkF,EAAYO,GAEnEP,EAAWrE,MAAMd,UAAYmF,EAAWrE,MAAMd,SAASmF,GAEzDT,EAAMS,EAA4BO,GAClC,QACF,CAEAP,EAAW9F,IAAMiB,EAAiB6E,EAAW5E,IAAK4E,EAAW3E,OAC7DyC,EAAckC,GACdA,EAAWrE,MAAMd,UAAYmF,EAAWrE,MAAMd,SAASmF,GACvDO,aAAyB7E,GAAS2D,EAAWkB,GAC7Cf,EAAetF,IAAIkG,aAAaJ,EAAW9F,IAAKqG,EAAcrG,KAC9DqF,EAAMS,GACN,QACF,CAEA,GAAIA,QAAiD,CACnDL,EAAQa,OAAOrE,IAAK,GACpB,QACF,CAEA,GAAIsE,MAAMC,QAAQV,GAAa,CAC7BL,EAAQa,OAAOrE,IAAK,KAAM6D,GAC1B,QACF,CAEA,GAAIA,aAAsBhE,EAAgB,CACxCvC,EAAQwC,UAAY+D,EAAW/D,UAC/B0D,EAAQa,OACNrE,IACA,GACC6D,EAAW/D,UAAU0E,KAAOX,EAAW/D,UAAU0E,KAAKC,KAAKZ,EAAW/D,WAAa+D,EAAW/D,UAAU2E,KAAKZ,EAAW/D,YACvH+D,EAAWrE,SACRqE,EAAWpE,WAGlB,QACF,CASIoE,aAAsBlE,IAAc,IACtC6D,EAAQxD,GAAK6D,EAAa,IAAIlE,EAAU+E,OAAOb,KAGjD,IAAIC,EAAgBP,EAAQvD,GAEvB8D,EAMDA,aAAyBnE,GAC3BkE,EAAW9F,IAAM+F,EAAc/F,IAE3B8F,EAAWjE,WAAaiE,EAAW9F,IAAI6B,YACzCiE,EAAW9F,IAAI6B,UAAYiE,EAAWjE,aAK1CiE,EAAW9F,IAAMoB,SAASwF,eAAed,EAAWjE,WACpDsD,EAAWY,GACXT,EAAetF,IAAIkG,aAAaJ,EAAW9F,IAAK+F,EAAc/F,OAhB5D8F,EAAW9F,IAAMoB,SAASwF,eAAed,EAAWjE,WACpDyD,EAAetF,IAAImG,YAAYL,EAAW9F,KAgB9C,CAEA,IAAI6G,EAAgBpB,EAAQtD,OAG5B,GAAsB,IAAlB0E,EASJ,QAAS5E,EAAIyD,EAAgB,EAAGzD,GAAK4E,IAAiB5E,EACpDuD,EAAQvD,aAAcT,GAAS2D,EAAWK,EAAQvD,IAClDuD,EAAQvD,GAAGjC,IAAIO,YAAciF,EAAQvD,GAAGjC,IAAIO,WAAW6F,YAAYZ,EAAQvD,GAAGjC,SAXhF,CACE,QAASiC,EAAIyD,EAAezD,KAC1BuD,EAAQvD,aAAcT,GAAS2D,EAAWK,EAAQvD,IAEpDqD,EAAetF,IAAI8G,YAAc,EAEnC,CAOF,CAEAzG,EAAEC,OAAS,KACT,GAAID,EAAEkD,UAAW,CACf/D,EAAc2C,QAAUY,EAAiBvD,GACzC,IAAIuH,EAAe1G,EAAEkD,UACjByD,EAAe,IAAIxF,EAAMuF,EAAa7F,IAAK6F,EAAatF,MAAO,CACjEpB,EAAE0B,qBAAqBD,EAAiBzB,EAAE0B,UAAY1B,EAAEA,EAAE0B,UAAwB,QAYpF,GAVAiF,EAAahH,IAAM+G,EAAa/G,IAChCgH,EAAa7F,MAAQ4F,EAAa5F,MAClCd,EAAEkD,UAAYyD,EACd3B,EAAM2B,EAAcD,IACA,IAAhB1G,EAAE4F,WACJxG,EAAY0C,QAAUY,EAAiBtD,GACvCY,EAAE4F,WAAY,GAEdvG,EAAayC,QAAUY,EAAiBrD,GAEtCW,EAAE4G,SACJ,OAAQD,EAAahH,IAAoBkE,SAE7C,GAGF7D,EAAE6G,QAAU,KACV,GAAI7G,EAAEkD,UAAW,CACf/D,EAAc2C,QAAUY,EAAiBvD,GACzCG,EAAcwC,QAAUY,EAAiBpD,GACzCU,EAAE0B,UAAYnC,EACd,IAAIuH,EAAS9G,EAAEC,SAIf,OAHAD,EAAEkD,UAAY,KACdlD,EAAE0B,UAAY,KACd1B,EAAE4F,WAAY,EACPkB,CACT,GAGF9G,EAAE+G,MAAQ,CAACC,EAAWtF,KAKpB,IAAIuF,EAWJ,OAfIjH,EAAE4F,WACJ5F,EAAE6G,UAKFI,EADEjH,EAAE4G,SACiC,iBAAdI,EAAyBpG,EAAiBoG,EAAyB,QAAdA,GAAuBA,EAE9D,iBAAdA,EAA0BjG,SAASmG,iBAAiBF,GAAW,GAAoBA,EAG5GhH,EAAEkD,UAAYvB,EAAWsF,GACzBjH,EAAEkD,UAAUpC,MAA4B,QAApBd,EAAEkD,UAAUrC,IAChCb,EAAE0B,UAAYA,EAEP1B,EAAEC,QAAO,EAGlB,IAAMkH,EAAU,IAAIC,IAEpBpH,EAAEqH,IAAM,CAACC,EAAgBC,KACvB,GAAIJ,EAAQK,IAAIF,GACd,OAAOH,EAAQM,IAAIH,GAGrB,IAAIR,EAASQ,EAAOtH,EAAGuH,GAEvB,OADAJ,EAAQO,IAAIJ,EAAQR,GACbA,CAAA,EAGT,IAAIa,EAAiBC,GAAkB,CAACC,EAAevF,EAAcwF,KAEnE,GADYF,EAAOC,GAAQA,EAChB,CACT,IAAIE,EAAShH,SAASwF,eAAe,IASrC,OARIuB,GAAWA,EAAQnI,KAAOmI,EAAQnI,IAAIO,aACxC4H,aAAmB3G,GAAS2D,EAAWgD,GACvCA,EAAQnI,IAAIO,WAAW2F,aAAakC,EAAQD,EAAQnI,MAEtD2C,EAAMzB,IAAM,QACZyB,EAAMjB,SAAW,GACjBiB,EAAMlB,MAAQ,CAAC,EACfkB,EAAM3C,IAAMoI,GACL,CACT,GAGI/E,EAAyB,CAC7B,OAAQ2E,GAAc,GACtB,WAAYA,GAAc,GAC1B,QAAS,CAACD,EAAgBpF,KACxBA,EAAMjB,SAAWqG,EAAI3D,IAAIzB,EAAMjB,SAAS,GAAE,EAE5C,SAAU,CAACwG,EAAevF,KACvBA,EAAM3C,IAAkDqI,MAAMC,QAAUJ,EAAO,GAAK,QAEvF,UAAW,CAACK,EAAmC5F,KAC7C,QAASzC,KAAQqI,EACd5F,EAAM3C,IAAmBwI,UAAUC,OAAOvI,EAAMqI,EAAQrI,GAC3D,EAEF,SAAU,CAACwI,EAAc/F,KACvBA,EAAMjB,SAAW,CAACrB,EAAE0D,MAAM2E,GAAK,EAEjC,UAAW,EAAEC,EAAOC,EAAUC,GAAelG,EAAqBS,KAChE,IAAIE,EACAwF,EACJ,GAAkB,UAAdnG,EAAMzB,IAER,OADA2H,EAAQA,GAAS,UACTlG,EAAMlB,MAAMtB,MAAA,IACb,WACCoG,MAAMC,QAAQmC,EAAMC,KACtBE,EAAW/I,IACT,IAAIgJ,EAAOhJ,EAAEE,OAA4CqD,MACrD0F,EAAML,EAAMC,GAAU7D,QAAQgE,IACtB,IAARC,EACFL,EAAMC,GAAUtG,KAAKyG,GAErBJ,EAAMC,GAAUtC,OAAO0C,EAAK,EAC9B,EAEF1F,GAAqD,IAA7CqF,EAAMC,GAAU7D,QAAQpC,EAAM3C,IAAIsD,QACjC,UAAWX,EAAMlB,OAC1BqH,EAAU,KACJH,EAAMC,KAAcjG,EAAMlB,MAAM6B,MAClCqF,EAAMC,GAAY,KAElBD,EAAMC,GAAYjG,EAAMlB,MAAM6B,KAChC,EAEFA,EAAQqF,EAAMC,KAAcjG,EAAMlB,MAAM6B,QAExCwF,EAAU,IAAOH,EAAMC,IAAaD,EAAMC,GAC1CtF,EAAQqF,EAAMC,IAEhBjF,EAAa,UAAWL,EAAOX,EAAOS,GACtC,MACF,IACK,QACHO,EAAa,UAAWgF,EAAMC,KAAcjG,EAAM3C,IAAIsD,MAAOX,EAAOS,GACpE,MACF,QAEEO,EAAa,QAASgF,EAAMC,GAAWjG,EAAOS,OAG3B,WAAdT,EAAMzB,KACf2H,EAAQA,GAAS,UACblG,EAAMlB,MAAMwH,UACdH,EAAW/I,IACT,IAAIgJ,EAAOhJ,EAAEE,OAA4CqD,MACzD,GAAIvD,EAAEmJ,QAAS,CACb,IAAIF,EAAML,EAAMC,GAAU7D,QAAQgE,IACtB,IAARC,EACFL,EAAMC,GAAUtG,KAAKyG,GAErBJ,EAAMC,GAAUtC,OAAO0C,EAAK,EAEhC,MACEL,EAAMC,GAAUtC,OAAO,EAAGqC,EAAMC,GAAUzG,QAC1CwG,EAAMC,GAAUtG,KAAKyG,EACvB,EAEFpG,EAAMjB,SAASyH,QAASC,IACtB,GAAkB,WAAdA,EAAMlI,IAAkB,CAC1B,IAAImI,EAAQ,UAAWD,EAAM3H,MAAQ2H,EAAM3H,MAAM6B,MAAQ8F,EAAM1H,SAAS4H,KAAK,IAAInF,OACjFiF,EAAM3H,MAAM8H,UAA8C,IAAnCZ,EAAMC,GAAU7D,QAAQsE,EACjD,KAGF1G,EAAMjB,SAASyH,QAASC,IACtB,GAAkB,WAAdA,EAAMlI,IAAkB,CAC1B,IAAImI,EAAQ,UAAWD,EAAM3H,MAAQ2H,EAAM3H,MAAM6B,MAAQ8F,EAAM1H,SAAS4H,KAAK,IAAInF,OACjFiF,EAAM3H,MAAM8H,SAAWF,IAAUV,EAAMC,EACzC,KAGmB,aAAdjG,EAAMzB,MACf2H,EAAQA,GAAS,UACjBlG,EAAMjB,SAAW,CAACiH,EAAMC,KAGrBjG,EAAMlB,MAAMoH,KACVC,IACHA,EAAW/I,GAAc4I,EAAMC,GAAa7I,EAAEE,OAA4CqD,OAE5FK,EAAakF,EAAOC,EAASnG,EAAOS,GACtC,GAIJ/C,EAAEmJ,UAAY,CAACtJ,EAAcsJ,KAC3B,IAAIC,EAAW,KAAKvJ,IACpBmD,EAAWoG,GAAYD,EACvBhJ,EAAciJ,IAAY,GAG5BpJ,EAAE4G,SAAWtC,QAA2B,oBAAZ+E,SAA2BA,QAAQC,UAAYD,QAAQC,SAASC,MAC5FvJ,EAAE4F,WAAY,EAEd5F,EAAE0B,UAAY,KACd1B,EAAEkD,UAAY,KAEdlD,EAAEgD,WAAaA,EACfhD,EAAEG,cAAgBA,EAClBH,EAAEd,QAAUA,EAEZc,EAAEsD,aAAeA,EAEjB,I,EAAetD,E"}