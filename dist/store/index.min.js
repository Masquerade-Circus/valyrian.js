(()=>{var t={update:()=>{}};function e(t,e,o){if(o in e==!1)throw new Error(`The ${t} "${o}" does not exists.`)}function o(t){if("object"==typeof t&&null!==t&&!Object.isFrozen(t)){if(Array.isArray(t))for(let e=0,r=t.length;e<r;e++)o(t[e]);else{let e=Reflect.ownKeys(t);for(let r=0,s=e.length;r<s;r++)o(t[e[r]])}Object.freeze(t)}return t}var r=function({state:r={},getters:s={},actions:n={},mutations:i={}}={}){let a=!0;function c(){if(a)throw new Error("You need to commit a mutation to change the state")}let f="function"==typeof r?r():r;this.state=new Proxy(f||{},{get:(t,e)=>o(t[e]),set:(t,e,o)=>(c(),t[e]=o,!0),deleteProperty:(t,e)=>(c(),Reflect.deleteProperty(t,e),!0)}),this.getters=new Proxy(s,{get:(t,e)=>{try{return t[e](this.state,this.getters)}catch(t){}}}),this.commit=(o,...r)=>{e("mutation",i,o),a=!1,i[o](this.state,...r),a=!0,t.update()},this.dispatch=(t,...o)=>(e("action",n,t),Promise.resolve(n[t](this,...o)))};var s={Store:r,plugin:function(e,o){return t=e,o&&(e.store=o instanceof r?o:new r(o),e.commit=e.store.commit.bind(e.store),e.dispatch=e.store.dispatch.bind(e.store),e.state=e.store.state,e.getters=e.store.getters),r}};"undefined"!=typeof module?module.exports=s:self.ValyrianStore=s})();//# sourceMappingURL=index.min.js.map