(()=>{var t,e={update:()=>{}};function o(t,e,o){if(o in e==!1)throw new Error(`The ${t} "${o}" does not exists.`)}function r(t){if("object"==typeof t&&null!==t&&!Object.isFrozen(t)){if(Array.isArray(t))for(let e=0,o=t.length;e<o;e++)r(t[e]);else{let e=Reflect.ownKeys(t);for(let o=0,s=e.length;o<s;o++)r(t[e[o]])}Object.freeze(t)}return t}var s=function({state:s={},getters:i={},actions:n={},mutations:a={}}={}){let c=!0;function u(){if(c)throw new Error("You need to commit a mutation to change the state")}let f="function"==typeof s?s():s;this.state=new Proxy(f||{},{get:(t,e)=>r(t[e]),set:(t,e,o)=>(u(),t[e]=o,!0),deleteProperty:(t,e)=>(u(),Reflect.deleteProperty(t,e),!0)}),this.getters=new Proxy(i,{get:(t,e)=>{try{return t[e](this.state,this.getters)}catch(t){}}}),this.commit=(r,...s)=>{o("mutation",a,r),c=!1,a[r](this.state,...s),c=!0,clearTimeout(t),t=setTimeout(e.update)},this.dispatch=(t,...e)=>(o("action",n,t),Promise.resolve(n[t](this,...e)))};var i={Store:s,plugin:function(t,o){return e=t,o&&(t.store=o instanceof s?o:new s(o),t.commit=t.store.commit.bind(t.store),t.dispatch=t.store.dispatch.bind(t.store),t.state=t.store.state,t.getters=t.store.getters),s}};"undefined"!=typeof module?module.exports=i:self.ValyrianStore=i})();//# sourceMappingURL=index.min.js.map