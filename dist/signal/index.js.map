{
  "version": 3,
  "sources": ["../../lib/signal/index.ts"],
  "sourcesContent": ["import { updateVnode, current, VnodeWithDom, onCleanup, POJOComponent, Component, onUnmount } from \"valyrian.js\";\n\ntype getter = () => any;\ntype setter = (newValue: any) => void;\ntype unsubscribe = () => void;\ntype subscribe = (callback: () => void) => unsubscribe;\ntype subscriptions = Set<() => void>;\ntype signal = [getter, setter, subscribe, subscriptions];\n\ntype SignalCalls = {\n  signals: signal[];\n  signal_calls: number;\n};\n\nconst componentToSignalsWeakMap = new WeakMap<Component | POJOComponent, SignalCalls>();\n\n// Signal is a generic function that creates a reactive state with a getter, setter, and subscribe mechanism.\nexport function Signal<T>(initialValue: T): signal {\n  if (current.component) {\n    if (componentToSignalsWeakMap.has(current.component) === false) {\n      const SignalCalls = { signals: [], signal_calls: -1 };\n      componentToSignalsWeakMap.set(current.component, SignalCalls);\n      onUnmount(() => componentToSignalsWeakMap.delete(current.component as Component | POJOComponent));\n    }\n\n    const SignalCalls = componentToSignalsWeakMap.get(current.component) as SignalCalls;\n    onCleanup(() => (SignalCalls.signal_calls = -1));\n\n    const signal = SignalCalls.signals[++SignalCalls.signal_calls];\n\n    if (signal) {\n      // Return the signal if it already exists.\n      // But without the subscribe function. This is to prevent the subscribe function from being called multiple times.\n      const fakeSubscribe = (() => {}) as unknown as subscribe;\n      return [signal[0], signal[1], fakeSubscribe, signal[3]];\n    }\n  }\n\n  // The current value of the signal is stored in a closure to maintain state.\n  let value: T = initialValue;\n  // Subscribers is a Set of functions to be called whenever the value changes.\n  const subscribers: subscriptions = new Set();\n\n  // subscribe is a function that allows a subscriber to listen to changes in the signal's value.\n  // It returns an unsubscribe function to stop listening to changes.\n  const subscribe = (callback: () => void) => {\n    subscribers.add(callback);\n    return () => subscribers.delete(callback);\n  };\n\n  const domToVnodesToUpdate: Map<Node, VnodeWithDom> = new Map();\n  const updateVnodes = () => domToVnodesToUpdate.forEach((vnode) => updateVnode(vnode));\n\n  // getValue is a function that returns the current value of the signal.\n  const getValue = () => {\n    if (current.vnode) {\n      const vnode = current.vnode as VnodeWithDom;\n      domToVnodesToUpdate.set(vnode.dom, vnode);\n      subscribe(updateVnodes);\n    }\n    return value;\n  };\n\n  // setValue is a function that updates the value of the signal and notifies subscribers.\n  const setValue = (newValue: any) => {\n    if (current.event) {\n      current.event.preventDefault();\n    }\n\n    if (value === newValue) {\n      return;\n    }\n    value = newValue;\n    // Notify all subscribers by invoking their callback functions.\n    subscribers.forEach((subscriber) => subscriber());\n  };\n\n  const signal: signal = [getValue, setValue, subscribe, subscribers];\n\n  if (current.component) {\n    const SignalCalls = componentToSignalsWeakMap.get(current.component) as SignalCalls;\n    SignalCalls.signals.push(signal);\n  }\n\n  return signal;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAmG;AAcnG,IAAM,4BAA4B,oBAAI,QAAgD;AAG/E,SAAS,OAAU,cAAyB;AACjD,MAAI,wBAAQ,WAAW;AACrB,QAAI,0BAA0B,IAAI,wBAAQ,SAAS,MAAM,OAAO;AAC9D,YAAMA,eAAc,EAAE,SAAS,CAAC,GAAG,cAAc,GAAG;AACpD,gCAA0B,IAAI,wBAAQ,WAAWA,YAAW;AAC5D,qCAAU,MAAM,0BAA0B,OAAO,wBAAQ,SAAsC,CAAC;AAAA,IAClG;AAEA,UAAM,cAAc,0BAA0B,IAAI,wBAAQ,SAAS;AACnE,mCAAU,MAAO,YAAY,eAAe,EAAG;AAE/C,UAAMC,UAAS,YAAY,QAAQ,EAAE,YAAY,YAAY;AAE7D,QAAIA,SAAQ;AAGV,YAAM,gBAAiB,MAAM;AAAA,MAAC;AAC9B,aAAO,CAACA,QAAO,CAAC,GAAGA,QAAO,CAAC,GAAG,eAAeA,QAAO,CAAC,CAAC;AAAA,IACxD;AAAA,EACF;AAGA,MAAI,QAAW;AAEf,QAAM,cAA6B,oBAAI,IAAI;AAI3C,QAAM,YAAY,CAAC,aAAyB;AAC1C,gBAAY,IAAI,QAAQ;AACxB,WAAO,MAAM,YAAY,OAAO,QAAQ;AAAA,EAC1C;AAEA,QAAM,sBAA+C,oBAAI,IAAI;AAC7D,QAAM,eAAe,MAAM,oBAAoB,QAAQ,CAAC,cAAU,6BAAY,KAAK,CAAC;AAGpF,QAAM,WAAW,MAAM;AACrB,QAAI,wBAAQ,OAAO;AACjB,YAAM,QAAQ,wBAAQ;AACtB,0BAAoB,IAAI,MAAM,KAAK,KAAK;AACxC,gBAAU,YAAY;AAAA,IACxB;AACA,WAAO;AAAA,EACT;AAGA,QAAM,WAAW,CAAC,aAAkB;AAClC,QAAI,wBAAQ,OAAO;AACjB,8BAAQ,MAAM,eAAe;AAAA,IAC/B;AAEA,QAAI,UAAU,UAAU;AACtB;AAAA,IACF;AACA,YAAQ;AAER,gBAAY,QAAQ,CAAC,eAAe,WAAW,CAAC;AAAA,EAClD;AAEA,QAAM,SAAiB,CAAC,UAAU,UAAU,WAAW,WAAW;AAElE,MAAI,wBAAQ,WAAW;AACrB,UAAM,cAAc,0BAA0B,IAAI,wBAAQ,SAAS;AACnE,gBAAY,QAAQ,KAAK,MAAM;AAAA,EACjC;AAEA,SAAO;AACT;",
  "names": ["SignalCalls", "signal"]
}
