{
  "version": 3,
  "sources": ["../../lib/translate/index.ts"],
  "sourcesContent": ["/* eslint-disable no-console */\nimport { get } from \"valyrian.js/utils\";\n\nconst translations: Record<string, Record<string, any>> = {};\nlet lang = \"es\";\n\ninterface TInterface {\n  (path: string, params?: Record<string, string>): string;\n}\nfunction t(path: string, params?: Record<string, string>): string {\n  const langDef = translations[lang];\n  const translation = get(langDef, path);\n\n  if (typeof translation !== \"string\") {\n    console.warn(`Translation not found for ${path}`);\n    return path;\n  }\n\n  if (!params) {\n    return translation;\n  }\n\n  return translation.replace(/{(\\w+)}/g, (_, key) => {\n    if (key in params) {\n      return params[key];\n    }\n    return `{${key}}`;\n  });\n}\n\nexport function setTranslations(\n  defaultTranslation: Record<string, any>,\n  newTranslations: Record<string, Record<string, any>>\n): TInterface {\n  for (const lang in translations) {\n    Reflect.deleteProperty(translations, lang);\n  }\n\n  for (const lang in newTranslations) {\n    translations[lang] = {\n      ...defaultTranslation,\n      ...newTranslations[lang]\n    };\n  }\n\n  return t;\n}\n\nexport function setLang(newLang: string): void {\n  if (typeof newLang !== \"string\") {\n    console.error(`Language ${newLang} not found`);\n    return;\n  }\n\n  const parsedLang = newLang.toLowerCase().split(\"-\").shift()?.split(\"_\").shift();\n\n  if (typeof parsedLang !== \"string\") {\n    console.error(`Language ${newLang} not found`);\n    return;\n  }\n\n  if (!translations[parsedLang]) {\n    console.error(`Language ${newLang} not found`);\n    return;\n  }\n\n  lang = parsedLang;\n}\n\nexport class NumberFormatter {\n  #value: number = 0;\n\n  get value(): number {\n    return this.#value;\n  }\n\n  public set(newValue: number | string, shiftDecimal = false) {\n    this.#value = this.clean(newValue, shiftDecimal);\n    return this;\n  }\n\n  private clean(value: string | number, shiftDecimal = false): number {\n    let stringNumber = String(value).replace(/[^0-9.-]+/g, \"\");\n\n    if (shiftDecimal) {\n      stringNumber = stringNumber.replace(/\\./g, \"\");\n    }\n\n    const number = Number(stringNumber);\n\n    return isNaN(number) ? 0 : number;\n  }\n\n  format(digits = 2): string {\n    const formatter = new Intl.NumberFormat(\"en-US\", {\n      style: \"currency\",\n      currency: \"USD\",\n      minimumFractionDigits: digits,\n      maximumFractionDigits: digits\n    });\n\n    return formatter.format(this.#value);\n  }\n\n  fromDecimalPlaces(decimalPlaces: number) {\n    const factor = Math.pow(10, decimalPlaces);\n    this.#value = Math.round(this.#value * factor);\n    return this;\n  }\n\n  toDecimalPlaces(decimalPlaces: number) {\n    const factor = Math.pow(10, decimalPlaces);\n    this.#value = this.#value / factor;\n    return this;\n  }\n\n  getDecimalPlaces(): number {\n    if (Math.floor(this.#value) === this.#value) {\n      return 0;\n    }\n\n    const stringValue = String(this.#value);\n    const decimalIndex = stringValue.indexOf(\".\");\n    return decimalIndex === -1 ? 0 : stringValue.length - decimalIndex - 1;\n  }\n\n  shiftDecimal() {\n    return this.fromDecimalPlaces(this.getDecimalPlaces());\n  }\n\n  static create(value: number | string = 0, shiftDecimal = false): NumberFormatter {\n    const formatter = new NumberFormatter();\n    return formatter.set(value, shiftDecimal);\n  }\n}\n"],
  "mappings": "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",
  "names": ["lang"]
}
