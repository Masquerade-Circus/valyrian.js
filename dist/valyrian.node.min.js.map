{"version":3,"file":"valyrian.node.min.js","sources":["../lib/node.js"],"sourcesContent":["import swTpl from './sw.tpl.js';\n\nif (typeof global !== undefined){\n    global.VNodeFactory = function(v){\n        let fs = require('fs');\n        let uncss = require('uncss');\n\n        let errorHandler = (resolve, reject) => err => {\n            if (err){\n                return reject(err);\n            }\n\n            resolve();\n        };\n    \n        function fileMethodFactory(){\n            let prop = '';\n            return function(file) {\n                if (!file){\n                    return prop;\n                }\n        \n                prop += fs.readFileSync(file,'utf8');\n            }\n        };\n    \n        v.inline = {\n            css: fileMethodFactory(),\n            js: fileMethodFactory(),\n            uncss(renderedHtml, options = {}){\n                options.raw = v.inline.css();\n                return Promise.all(renderedHtml)\n                    .then(html => {\n                        return new Promise((resolve, reject) => {\n                            uncss(html, options, (err, output) => {\n                                if (err){\n                                    reject(err);\n                                }\n                                resolve(output);\n                            });\n                        });\n                    });\n            }\n        };\n    \n        v.sw = {\n            generate(file, options = {}){\n                let opt = Object.assign({\n                    version: 'v1::',\n                    name: 'Valyrian.js',\n                    urls: ['/'],\n                    debug: false\n                }, options);\n    \n                let contents = swTpl\n                    .replace('v1::', 'v'+opt.version+'::')\n                    .replace('Valyrian.js', opt.name)\n                    .replace('[\\'/\\']', '[\"'+opt.urls.join('\",\"')+'\"]');\n    \n                if (!opt.debug){\n                    contents = contents.replace('console.log', '() => {}');\n                }\n    \n                return new Promise((resolve, reject) => {\n                    fs.writeFile(file,contents,'utf8', errorHandler(resolve, reject));\n                });\n            }\n        };\n\n\n        v.icons = {\n            options: {\n                iconsPath: null,                 // Path to the generated icons\n                linksViewPath: null,             // Path to the generated links file\n            \n                // favicons options\n                path: '',                       // Path for overriding default icons path. `string`\n                appName: null,                  // Your application's name. `string`\n                appDescription: null,           // Your application's description. `string`\n                developerName: null,            // Your (or your developer's) name. `string`\n                developerURL: null,\n                dir: 'auto',\n                lang: 'en-US',\n                background: '#fff',             // Background colour for flattened icons. `string`\n                theme_color: '#fff',\n                display: \"standalone\",          // Android display: \"browser\" or \"standalone\". `string`\n                orientation: \"any\",             // Android orientation: \"any\" \"portrait\" or \"landscape\". `string`\n                start_url: \"/\",                 // Android start application's URL. `string`\n                version: '1.0',                 // Your application's version number. `number`\n                logging: false,                 // Print logs to console? `boolean`\n                icons: {\n                    android: true,              // Create Android homescreen icon. `boolean`\n                    appleIcon: true,            // Create Apple touch icons. `boolean` or `{ offset: offsetInPercentage }`\n                    appleStartup: true,         // Create Apple startup images. `boolean`\n                    coast: false,               // Create Opera Coast icon with offset 25%. `boolean` or `{ offset: offsetInPercentage }`\n                    favicons: true,             // Create regular favicons. `boolean`\n                    firefox: false,             // Create Firefox OS icons. `boolean` or `{ offset: offsetInPercentage }`\n                    windows: true,              // Create Windows 8 tile icons. `boolean`\n                    yandex: false               // Create Yandex browser icon. `boolean`\n                }\n            },\n            generate(source, configuration = {}, callback = () => {}){\n                let favicons = require('favicons');\n                let html2hs = require('html2hs');\n                let options = Object.assign({}, v.icons.options, configuration);\n\n                if (options.iconsPath){\n                    options.iconsPath = options.iconsPath.replace(/\\/$/gi, '') + '/';\n                }\n\n                if (options.iconsPath){\n                    options.linksViewPath = options.linksViewPath.replace(/\\/$/gi, '') + '/';\n                }\n\n                return new Promise((resolve, reject) => {\n                    favicons(source, options, (err, response) => {\n                        if (err) {\n                            console.log(err.status);  // HTTP error code (e.g. `200`) or `null`\n                            console.log(err.name);    // Error name e.g. \"API Error\"\n                            console.log(err.message); // Error description e.g. \"An unknown error has occurred\"\n\n                            return reject(err);\n                        }\n\n                        let promises = [];\n\n                        if (options.iconsPath){\n                            for (let i in response.images) {\n                                promises.push(new Promise((resolve, reject) => {\n                                    fs.writeFile(options.iconsPath + response.images[i].name, response.images[i].contents, errorHandler(resolve, reject));\n                                }));\n                            }\n                \n                            for (let i in response.files) {\n                                promises.push(new Promise((resolve, reject) => {\n                                    fs.writeFile(options.iconsPath + response.files[i].name, response.files[i].contents, errorHandler(resolve, reject));\n                                }));\n                            }\n                        }\n\n                        if (options.linksViewPath){\n                            let html = 'export default { \\n    view(){ \\n        return [';\n                            for (let i in response.html) {\n                                html += '\\n            ' + html2hs(response.html[i]) + ',';\n                            }\n                            html = html.replace(/,$/gi, '').replace(/h\\(\"/gi, 'v(\"') + '\\n        ];\\n    }\\n};';\n                \n                            promises.push(new Promise((resolve, reject) => {\n                                fs.writeFile(`${options.linksViewPath}/links.js`, html, errorHandler(resolve, reject));\n                            }));\n                        }\n\n                        Promise.all(promises)\n                            .then(() => {\n                                resolve(response);\n                            })\n                            .catch(reject);\n                    });\n                });\n            }\n        }\n    }\n}\n"],"names":["global","VNodeFactory","v","let","fs","require","uncss","errorHandler","resolve","reject","err","fileMethodFactory","prop","file","readFileSync","inline","css","js","renderedHtml","options","raw","Promise","all","then","html","output","sw","generate","opt","Object","assign","version","name","urls","debug","contents","replace","join","writeFile","icons","iconsPath","linksViewPath","path","appName","appDescription","developerName","developerURL","dir","lang","background","theme_color","display","orientation","start_url","logging","android","appleIcon","appleStartup","coast","favicons","firefox","windows","yandex","source","configuration","callback","html2hs","response","console","log","status","message","promises","push","images","i","files","catch"],"mappings":"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"}