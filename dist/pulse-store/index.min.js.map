//# sourceMappingURL=data:application/json;charset=utf-8;base64,{"version":3,"names":["pulse_store_exports","__export","createEffect","createMutableStore","createPulseStore","__EXPORTS__","import_valyrian","require","import_utils","effectStack","createStore","initialState","pulses","immutable","subscribers","Set","vnodesToUpdate","WeakSet","localState","isMutable","Error","proxyState","Proxy","get","state","prop","currentEffect","length","has","add","currentVnode","current","vnode","subscription","dom","delete","updateVnode","set","value","Reflect","deleteProperty","syncState","newState","key","deepFreeze","setState","hasChanged","forEach","subscriber","getPulseMethod","args","currentState","deepCloneUnfreeze","pulse","Promise","then","catch","error","console","boundPulses","pulsesProxy","warn","effect","runEffect","push","pop"],"sources":["../../lib/pulse-store/index.ts"],"sourcesContent":["/* eslint-disable no-console */\nimport { updateVnode, Vnode, VnodeWithDom, current } from \"valyrian.js\";\nimport { deepCloneUnfreeze, deepFreeze, hasChanged } from \"valyrian.js/utils\";\n\ntype State = Record<string, any>;\n\n// An action or pulse type definition\nexport type Pulse<StateType> = (state: StateType, ...args: any[]) => void | Promise<void>;\n\n// A collection of pulses\nexport type Pulses<StateType> = {\n  [key: string]: Pulse<StateType>;\n};\n\n// A proxy state\n// This is a state that is proxied to automatically subscribe to changes\n// And is used internally to update the vnode when the state changes\ntype ProxyState<StateType> = StateType & {\n  [key: string]: any;\n};\n\n// The effect stack\nconst effectStack: Function[] = [];\n\n// Creates the store\n// eslint-disable-next-line sonarjs/cognitive-complexity\nfunction createStore<StateType extends State, PulsesType extends Pulses<StateType>>(\n  initialState: StateType | (() => StateType),\n  pulses: PulsesType,\n  immutable = false\n): () => [ProxyState<StateType>, PulsesType] {\n  const subscribers = new Set<Function>();\n  const vnodesToUpdate = new WeakSet<Vnode>();\n\n  // Initialize the localState for this store\n  const localState = (typeof initialState === \"function\" ? initialState() : initialState) || {};\n\n  function isMutable() {\n    if (immutable) {\n      throw new Error(\"You need to call a pulse to modify the state\");\n    }\n  }\n\n  // We create a proxy for the state\n  const proxyState = new Proxy(localState || {}, {\n    get: (state, prop: string) => {\n      const currentEffect = effectStack[effectStack.length - 1];\n      if (currentEffect && !subscribers.has(currentEffect)) {\n        subscribers.add(currentEffect);\n      }\n\n      const currentVnode = current.vnode as VnodeWithDom;\n      if (currentVnode && !vnodesToUpdate.has(currentVnode)) {\n        const subscription = () => {\n          if (!currentVnode.dom) {\n            subscribers.delete(subscription);\n            vnodesToUpdate.delete(currentVnode);\n            return;\n          }\n\n          updateVnode(currentVnode);\n        };\n\n        subscribers.add(subscription);\n        vnodesToUpdate.add(currentVnode);\n      }\n\n      return state[prop];\n    },\n    // If the user tries to set directly it will throw an error\n    set: (state, prop: string, value: any) => {\n      isMutable();\n      Reflect.set(state, prop, value);\n      return true;\n    },\n    // If the user tries to delete directly it will throw an error\n    deleteProperty: (state, prop: string) => {\n      isMutable();\n      Reflect.deleteProperty(state, prop);\n      return true;\n    }\n  });\n\n  function syncState(newState: StateType) {\n    for (const key in newState) {\n      localState[key] = immutable ? deepFreeze(newState[key]) : newState[key];\n    }\n\n    for (const key in localState) {\n      if (!(key in newState)) {\n        Reflect.deleteProperty(localState, key);\n      }\n    }\n  }\n\n  function setState(newState: StateType) {\n    if (!hasChanged(localState, newState)) {\n      return;\n    }\n\n    syncState(newState);\n\n    subscribers.forEach((subscriber) => subscriber());\n  }\n\n  function getPulseMethod(key: string) {\n    return (...args: any[]) => {\n      const currentState = deepCloneUnfreeze(localState);\n      const pulse = pulses[key](currentState, ...args);\n\n      if (pulse instanceof Promise) {\n        return pulse\n          .then(() => setState(currentState))\n          .catch((error) => {\n            console.error(\"Error in pulse:\", error);\n          });\n      }\n\n      setState(currentState);\n    };\n  }\n\n  const boundPulses: Record<string, Pulse<StateType>> = {};\n  for (const key in pulses) {\n    if (typeof pulses[key] !== \"function\") {\n      throw new Error(`Pulse '${key}' must be a function`);\n    }\n    boundPulses[key] = getPulseMethod(key);\n  }\n\n  const pulsesProxy = new Proxy(boundPulses, {\n    get: (pulses, prop: string) => {\n      if (!(prop in pulses)) {\n        throw new Error(`Pulse '${prop}' does not exist`);\n      }\n      return pulses[prop];\n    }\n  });\n\n  function usePulseStore(): [ProxyState<StateType>, PulsesType] {\n    return [proxyState, pulsesProxy as PulsesType];\n  }\n\n  syncState(localState);\n\n  return usePulseStore;\n}\n\n// Creates a pulse store with an immutable state by default\nexport function createPulseStore<StateType extends State, PulsesType extends Pulses<StateType>>(\n  initialState: StateType,\n  pulses: PulsesType\n): () => [ProxyState<StateType>, PulsesType] {\n  return createStore(initialState, pulses, true);\n}\n\n// Creates a mutable store, useful for performance, but not recommended\nexport function createMutableStore<StateType extends State, PulsesType extends Pulses<StateType>>(\n  initialState: StateType,\n  pulses: PulsesType\n): () => [ProxyState<StateType>, PulsesType] {\n  console.warn(\n    \"Warning: You are working with a mutable state. This can lead to unpredictable behavior. All state changes made outside of a pulse will not trigger a re-render.\"\n  );\n  return createStore(initialState, pulses, false);\n}\n\n// Creates an effect\nexport function createEffect(effect: Function) {\n  const runEffect = () => {\n    try {\n      effectStack.push(runEffect);\n      effect();\n    } finally {\n      effectStack.pop();\n    }\n  };\n\n  runEffect();\n}\n"],"mappings":"gJAAAA,EAAA,G,yDAAAC,CAAAD,EAAA,CAAAE,aAAA,IAAAA,EAAAC,mBAAA,IAAAA,EAAAC,iBAAA,IAAAA,IAAA,I,EAAAC,G,EAAAL,E,0MACAM,EAA0DC,QAAA,eAC1DC,EAA0DD,QAAA,qBAoBpDE,EAA0B,GAIhC,SAASC,EACPC,EACAC,EACAC,GAAY,GAEZ,MAAMC,EAAc,IAAIC,IAClBC,EAAiB,IAAIC,QAGrBC,GAAsC,mBAAjBP,EAA8BA,IAAiBA,IAAiB,CAAC,EAE5F,SAASQ,IACP,GAAIN,EACF,MAAM,IAAIO,MAAM,+CAEpB,CAGA,MAAMC,EAAa,IAAIC,MAAMJ,GAAc,CAAC,EAAG,CAC7CK,IAAK,CAACC,EAAOC,KACX,MAAMC,EAAgBjB,EAAYA,EAAYkB,OAAS,GACnDD,IAAkBZ,EAAYc,IAAIF,IACpCZ,EAAYe,IAAIH,GAGlB,MAAMI,EAAexB,EAAAyB,QAAQC,MAC7B,GAAIF,IAAiBd,EAAeY,IAAIE,GAAe,CACrD,MAAMG,EAAe,KACnB,IAAKH,EAAaI,IAGhB,OAFApB,EAAYqB,OAAOF,QACnBjB,EAAemB,OAAOL,IAIxB,EAAAxB,EAAA8B,aAAYN,EAAY,EAG1BhB,EAAYe,IAAII,GAChBjB,EAAea,IAAIC,EACrB,CAEA,OAAON,EAAMC,EAAI,EAGnBY,IAAK,CAACb,EAAOC,EAAca,KACzBnB,IACAoB,QAAQF,IAAIb,EAAOC,EAAMa,IAClB,GAGTE,eAAgB,CAAChB,EAAOC,KACtBN,IACAoB,QAAQC,eAAehB,EAAOC,IACvB,KAIX,SAASgB,EAAUC,GACjB,UAAWC,KAAOD,EAChBxB,EAAWyB,GAAO9B,GAAA,EAAYL,EAAAoC,YAAWF,EAASC,IAAQD,EAASC,GAGrE,UAAWA,KAAOzB,EACVyB,KAAOD,GACXH,QAAQC,eAAetB,EAAYyB,EAGzC,CAEA,SAASE,EAASH,IACZ,EAAClC,EAAAsC,YAAW5B,EAAYwB,KAI5BD,EAAUC,GAEV5B,EAAYiC,QAASC,GAAeA,KACtC,CAEA,SAASC,EAAeN,GACtB,MAAO,IAAIO,KACT,MAAMC,GAAA,EAAe3C,EAAA4C,mBAAkBlC,GACjCmC,EAAQzC,EAAO+B,GAAKQ,KAAiBD,GAE3C,GAAIG,aAAiBC,QACnB,OAAOD,EACJE,KAAK,IAAMV,EAASM,IACpBK,MAAOC,IACNC,QAAQD,MAAM,kBAAmBA,EAAK,GAI5CZ,EAASM,EAAY,CAEzB,CAEA,MAAMQ,EAAgD,CAAC,EACvD,UAAWhB,KAAO/B,EAAQ,CACxB,GAA2B,mBAAhBA,EAAO+B,GAChB,MAAM,IAAIvB,MAAM,UAAUuB,yBAE5BgB,EAAYhB,GAAOM,EAAeN,EACpC,CAEA,MAAMiB,EAAc,IAAItC,MAAMqC,EAAa,CACzCpC,IAAK,CAACX,EAAQa,KACZ,KAAMA,KAAQb,GACZ,MAAM,IAAIQ,MAAM,UAAUK,qBAE5B,OAAOb,EAAOa,EAAI,IAUtB,OAFAgB,EAAUvB,GAJV,WACE,MAAO,CAACG,EAAYuC,EACtB,CAKF,CAGO,SAASxD,EACdO,EACAC,GAEA,OAAOF,EAAYC,EAAcC,GAAQ,EAC3C,CAGO,SAAST,EACdQ,EACAC,GAKA,OAHA8C,QAAQG,KACN,mKAEKnD,EAAYC,EAAcC,GAAQ,EAC3C,CAGO,SAASV,EAAa4D,GAC3B,MAAMC,EAAY,KAChB,IACEtD,EAAYuD,KAAKD,GACjBD,GACF,SACErD,EAAYwD,KACd,GAGFF,GACF,C"}