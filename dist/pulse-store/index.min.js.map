//# sourceMappingURL=data:application/json;charset=utf-8;base64,{"version":3,"names":["pulse_store_exports","__export","createEffect","createMutableStore","createPulseStore","__EXPORTS__","import_valyrian","require","import_utils","effectStack","createStore","initialState","pulses","immutable","subscribers","Set","domWithVnodesToUpdate","WeakSet","boundPulses","key","Error","getPulseMethod","localState","isMutable","currentState","pulseCallCount","proxyState","Proxy","get","state","prop","currentEffect","length","has","add","currentVnode","current","vnode","dom","hasParent","parent","parentElement","subscription","updateVnode","delete","set","value","Reflect","deleteProperty","syncState","newState","deepFreeze","debounceTimeout","setState","hasChanged","clearTimeout","setTimeout","forEach","subscriber","args","deepCloneUnfreeze","pulseResult","Promise","then","resolvedValue","catch","error","console","warn","effect","runEffect","push","pop"],"sources":["../../lib/pulse-store/index.ts"],"sourcesContent":["/* eslint-disable no-console */\nimport { updateVnode, VnodeWithDom, current, DomElement } from \"valyrian.js\";\nimport { deepCloneUnfreeze, deepFreeze, hasChanged } from \"valyrian.js/utils\";\n\ntype State = Record<string, any>;\n\nexport type Pulse<StateType, TReturn = unknown> = (state: StateType, ...args: any[]) => TReturn | Promise<TReturn>;\n\nexport type Pulses<StateType> = Record<string, Pulse<StateType, any>>;\n\ntype ProxyState<StateType> = StateType & {\n  [key: string]: any;\n};\n\nconst effectStack: Function[] = [];\n\ntype StorePulses<PulsesType extends Pulses<any>> = {\n  [K in keyof PulsesType]: PulsesType[K] extends (state: any, ...args: infer Args) => infer R\n    ? (...args: Args) => R\n    : never;\n};\n\n// Crea la tienda\nfunction createStore<StateType extends State, PulsesType extends Pulses<StateType>>(\n  initialState: StateType | (() => StateType) | null,\n  pulses: PulsesType,\n  immutable = false\n): StorePulses<PulsesType> & { state: ProxyState<StateType> } {\n  const subscribers = new Set<Function>();\n  const domWithVnodesToUpdate = new WeakSet<DomElement>();\n\n  const boundPulses: Record<string, Pulse<StateType, any>> = {};\n  for (const key in pulses) {\n    if (typeof pulses[key] !== \"function\") {\n      throw new Error(`Pulse '${key}' must be a function`);\n    }\n    if (key === \"state\") {\n      throw new Error(`A pulse cannot be named 'state'`);\n    }\n    boundPulses[key] = getPulseMethod(key);\n  }\n\n  const localState: StateType =\n    (typeof initialState === \"function\" ? initialState() : initialState) || ({} as StateType);\n\n  function isMutable() {\n    if (immutable) {\n      throw new Error(\"You need to call a pulse to modify the state\");\n    }\n  }\n\n  let currentState: StateType | null = null;\n  let pulseCallCount = 0;\n\n  const proxyState = new Proxy(localState, {\n    get: (state, prop: string) => {\n      // If there is a current state, return the value from it\n      // because we are inside a pulse\n      if (currentState) {\n        return currentState[prop];\n      }\n\n      const currentEffect = effectStack[effectStack.length - 1];\n      if (currentEffect && !subscribers.has(currentEffect)) {\n        subscribers.add(currentEffect);\n      }\n\n      const currentVnode = current.vnode as VnodeWithDom;\n      if (currentVnode && !domWithVnodesToUpdate.has(currentVnode.dom)) {\n        let hasParent = false;\n        let parent = currentVnode.dom.parentElement as DomElement;\n        while (parent) {\n          if (domWithVnodesToUpdate.has(parent)) {\n            hasParent = true;\n            break;\n          }\n          parent = parent.parentElement as DomElement;\n        }\n\n        if (hasParent) {\n          return state[prop];\n        }\n\n        const dom = currentVnode.dom;\n        const subscription = () => {\n          updateVnode(dom.vnode);\n          if (!dom.parentElement) {\n            subscribers.delete(subscription);\n            domWithVnodesToUpdate.delete(dom);\n          }\n        };\n\n        subscribers.add(subscription);\n        domWithVnodesToUpdate.add(dom);\n      }\n\n      return state[prop];\n    },\n    set: (state, prop: string, value: any) => {\n      isMutable();\n      Reflect.set(state, prop, value);\n      return true;\n    },\n    deleteProperty: (state, prop: string) => {\n      isMutable();\n      Reflect.deleteProperty(state, prop);\n      return true;\n    }\n  });\n\n  function syncState(newState: StateType) {\n    for (const key in newState) {\n      localState[key] = immutable ? deepFreeze(newState[key]) : newState[key];\n    }\n\n    for (const key in localState) {\n      if (!(key in newState)) {\n        Reflect.deleteProperty(localState, key);\n      }\n    }\n  }\n\n  let debounceTimeout: ReturnType<typeof setTimeout> | null = null;\n  function debouncedUpdate() {\n    if (debounceTimeout) {\n      clearTimeout(debounceTimeout);\n    }\n\n    debounceTimeout = setTimeout(() => subscribers.forEach((subscriber) => subscriber()), 0);\n  }\n\n  function setState(newState: StateType) {\n    pulseCallCount--;\n\n    if (!hasChanged(localState, newState)) {\n      return;\n    }\n\n    if (pulseCallCount > 0) {\n      return;\n    }\n\n    syncState(newState);\n    currentState = null;\n    debouncedUpdate();\n  }\n\n  function getPulseMethod(key: string) {\n    return (...args: any[]) => {\n      pulseCallCount++;\n\n      if (currentState === null) {\n        currentState = deepCloneUnfreeze(localState);\n      }\n\n      try {\n        const pulseResult = pulses[key](currentState, ...args);\n\n        if (pulseResult instanceof Promise) {\n          return pulseResult\n            .then((resolvedValue) => {\n              setState(currentState as StateType);\n              return resolvedValue;\n            })\n            .catch((error) => {\n              console.error(`Error in pulse '${key}':`, error);\n              throw error;\n            });\n        } else {\n          setState(currentState);\n          return pulseResult;\n        }\n      } catch (error) {\n        console.error(`Error in pulse '${key}':`, error);\n        throw error;\n      }\n    };\n  }\n\n  syncState(localState);\n\n  const pulsesProxy = new Proxy(boundPulses, {\n    get: (pulses, prop: string) => {\n      if (prop === \"state\") {\n        return proxyState;\n      }\n\n      if (!(prop in pulses)) {\n        throw new Error(`Pulse '${prop}' does not exist`);\n      }\n      return pulses[prop];\n    }\n  });\n\n  return pulsesProxy as StorePulses<PulsesType> & { state: ProxyState<StateType> };\n}\n\n// Create a immutable store with an unfrozen state, balance between security and flexibility\nexport function createPulseStore<StateType extends State, PulsesType extends Pulses<StateType>>(\n  initialState: StateType,\n  pulses: PulsesType\n): StorePulses<PulsesType> & { state: ProxyState<StateType> } {\n  return createStore(initialState, pulses, true);\n}\n\n// Create a mutable store with a unfrozen state to allow more flexibility\nexport function createMutableStore<StateType extends State, PulsesType extends Pulses<StateType>>(\n  initialState: StateType,\n  pulses: PulsesType\n): StorePulses<PulsesType> & { state: ProxyState<StateType> } {\n  console.warn(\n    \"Warning: You are working with a mutable state. This can lead to unpredictable behavior. All state changes made outside of a pulse will not trigger a re-render.\"\n  );\n  return createStore(initialState, pulses, false);\n}\n\nexport function createEffect(effect: Function) {\n  const runEffect = () => {\n    try {\n      effectStack.push(runEffect);\n      effect();\n    } finally {\n      effectStack.pop();\n    }\n  };\n\n  runEffect();\n}\n"],"mappings":"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"}