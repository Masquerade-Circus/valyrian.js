{
  "version": 3,
  "sources": ["../../lib/pulse-store/index.ts"],
  "sourcesContent": ["/* eslint-disable no-console */\nimport { updateVnode, Vnode, VnodeWithDom, current, DomElement } from \"valyrian.js\";\nimport { deepCloneUnfreeze, deepFreeze, hasChanged } from \"valyrian.js/utils\";\n\ntype State = Record<string, any>;\n\n// Tipo de acci\u00F3n o pulso\nexport type Pulse<StateType> = (state: StateType, ...args: any[]) => void | Promise<void>;\n\n// Colecci\u00F3n de pulsos\nexport type Pulses<StateType> = {\n  [key: string]: Pulse<StateType>;\n};\n\n// Estado proxy que observar\u00E1 el acceso y las mutaciones del estado\ntype ProxyState<StateType> = StateType & {\n  [key: string]: any;\n};\n\n// Pila de efectos\nconst effectStack: Function[] = [];\n\ntype StorePulses<PulsesType> = {\n  [K in keyof PulsesType]: PulsesType[K] extends (state: any, ...args: infer Args) => infer R\n    ? (...args: Args) => R\n    : never;\n};\n\n// Crea la tienda\nfunction createStore<StateType extends State, PulsesType extends Pulses<StateType>>(\n  initialState: StateType | (() => StateType) | null,\n  pulses: PulsesType,\n  immutable = false\n): StorePulses<PulsesType> & { state: ProxyState<StateType> } {\n  const subscribers = new Set<Function>();\n  const domWithVnodesToUpdate = new WeakSet<DomElement>();\n\n  const boundPulses: Record<string, Pulse<StateType>> = {};\n  for (const key in pulses) {\n    if (typeof pulses[key] !== \"function\") {\n      throw new Error(`Pulse '${key}' must be a function`);\n    }\n    if (key === \"state\") {\n      throw new Error(`A pulse cannot be named 'state'`);\n    }\n    boundPulses[key] = getPulseMethod(key);\n  }\n\n  const localState: StateType =\n    (typeof initialState === \"function\" ? initialState() : initialState) || ({} as StateType);\n\n  function isMutable() {\n    if (immutable) {\n      throw new Error(\"You need to call a pulse to modify the state\");\n    }\n  }\n\n  const proxyState = new Proxy(localState, {\n    get: (state, prop: string) => {\n      const currentEffect = effectStack[effectStack.length - 1];\n      if (currentEffect && !subscribers.has(currentEffect)) {\n        subscribers.add(currentEffect);\n      }\n\n      const currentVnode = current.vnode as VnodeWithDom;\n      if (currentVnode && !domWithVnodesToUpdate.has(currentVnode.dom)) {\n        const dom = currentVnode.dom;\n        const subscription = () => {\n          if (!dom.parentNode) {\n            subscribers.delete(subscription);\n            domWithVnodesToUpdate.delete(dom);\n            return;\n          }\n          updateVnode(dom.vnode);\n        };\n\n        subscribers.add(subscription);\n        domWithVnodesToUpdate.add(dom);\n      }\n\n      return state[prop];\n    },\n    set: (state, prop: string, value: any) => {\n      isMutable();\n      Reflect.set(state, prop, value);\n      return true;\n    },\n    deleteProperty: (state, prop: string) => {\n      isMutable();\n      Reflect.deleteProperty(state, prop);\n      return true;\n    }\n  });\n\n  function syncState(newState: StateType) {\n    for (const key in newState) {\n      localState[key] = immutable ? deepFreeze(newState[key]) : newState[key];\n    }\n\n    for (const key in localState) {\n      if (!(key in newState)) {\n        Reflect.deleteProperty(localState, key);\n      }\n    }\n  }\n\n  let debounceTimeout: any = null;\n  function debouncedUpdate() {\n    clearTimeout(debounceTimeout);\n    debounceTimeout = setTimeout(() => subscribers.forEach((subscriber) => subscriber()), 0);\n  }\n\n  function setState(newState: StateType) {\n    if (!hasChanged(localState, newState)) {\n      return;\n    }\n\n    syncState(newState);\n    debouncedUpdate();\n  }\n\n  function getPulseMethod(key: string) {\n    return (...args: any[]) => {\n      const currentState = deepCloneUnfreeze(localState);\n      const pulse = pulses[key](currentState, ...args);\n\n      if (pulse instanceof Promise) {\n        return pulse\n          .then(() => setState(currentState))\n          .catch((error) => {\n            console.error(\"Error in pulse:\", error);\n          });\n      }\n\n      setState(currentState);\n    };\n  }\n\n  syncState(localState);\n\n  const pulsesProxy = new Proxy(boundPulses, {\n    get: (pulses, prop: string) => {\n      if (prop === \"state\") {\n        return proxyState;\n      }\n\n      if (!(prop in pulses)) {\n        throw new Error(`Pulse '${prop}' does not exist`);\n      }\n      return pulses[prop];\n    }\n  });\n\n  return pulsesProxy as StorePulses<PulsesType> & { state: ProxyState<StateType> };\n}\n\n// Crea una tienda inmutable\nexport function createPulseStore<StateType extends State, PulsesType extends Pulses<StateType>>(\n  initialState: StateType,\n  pulses: PulsesType\n): StorePulses<PulsesType> & { state: ProxyState<StateType> } {\n  return createStore(initialState, pulses, true);\n}\n\n// Crea una tienda mutable\nexport function createMutableStore<StateType extends State, PulsesType extends Pulses<StateType>>(\n  initialState: StateType,\n  pulses: PulsesType\n): StorePulses<PulsesType> & { state: ProxyState<StateType> } {\n  console.warn(\n    \"Warning: You are working with a mutable state. This can lead to unpredictable behavior. All state changes made outside of a pulse will not trigger a re-render.\"\n  );\n  return createStore(initialState, pulses, false);\n}\n\nconst effectDeps = new WeakMap<Function, any[]>();\n\nexport function createEffect(effect: Function, dependencies?: any[]) {\n  const runEffect = () => {\n    try {\n      effectStack.push(runEffect);\n      effect();\n    } finally {\n      effectStack.pop();\n    }\n  };\n\n  runEffect();\n}\n"],
  "mappings": "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",
  "names": ["pulses"]
}
