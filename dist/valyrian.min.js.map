{"version":3,"file":"valyrian.min.js","sources":["../lib/index.js"],"sourcesContent":["\n//eslint-disable-next-line max-lines-per-function\nfunction valyrian() {\n  let UND = void 0;\n  let oncreate = 'oncreate';\n  let onupdate = 'onupdate';\n  let onremove = 'onremove';\n  let onbeforeupdate = 'onbeforeupdate';\n  let functionstr = 'function';\n  let once = 'v-once';\n  let isArray = Array.isArray;\n  let mainNode;\n  let oldMainNode;\n  let mountedComponent;\n  let directives = {};\n\n  function Vnode(name, props, children) {\n    this.props = props || {};\n    this.children = children;\n    this.name = name;\n  };\n\n  function TextVnode(dom) {\n    this.dom = dom;\n  }\n  TextVnode.prototype = {\n    props: {},\n    children: []\n  };\n\n  let emptyNode = new TextVnode();\n\n  function createElement(tag, isSVG) {\n    return isSVG ?\n      document.createElementNS('http://www.w3.org/2000/svg', tag) :\n      document.createElement(tag);\n  }\n\n  function lifecycleCall(vnode, methodName, oldNode) {\n    if (vnode.props[methodName]) {\n      return vnode.props[methodName](vnode, oldNode);\n    }\n  }\n\n  function callRemove(vnode) {\n    if (vnode instanceof Vnode) {\n      for (let i = 0, l = vnode.children.length; i < l; i++) {\n        callRemove(vnode.children[i]);\n      }\n\n      vnode.props[onremove] && vnode.props[onremove](vnode);\n    }\n  }\n\n\n  function v(tagOrComponent, props, ...children) {\n    return new Vnode(tagOrComponent, props, children);\n  };\n\n  v.isNode = typeof window === 'undefined';\n\n  // Hydrates the current dom before mount\n  v.domToVnode = dom => {\n    if (dom.nodeType === 3) {\n      return new TextVnode(dom);\n    }\n\n    if (dom.nodeType === 1) {\n      let props = {};\n      [].forEach.call(dom.attributes, (prop) => props[prop.nodeName] = prop.nodeValue);\n\n      let vnode = new Vnode(\n        dom.nodeName,\n        props,\n        []\n      );\n      vnode.dom = dom;\n\n      for (let i = 0, l = dom.childNodes.length; i < l; i++) {\n        let childVnode = v.domToVnode(dom.childNodes[i]);\n        childVnode && vnode.children.push(childVnode);\n      }\n      return vnode;\n    }\n  };\n\n  v.trust = (htmlString) => {\n    let div = createElement('div');\n    div.innerHTML = htmlString.trim();\n\n    return [].map.call(div.childNodes, (item) => v.domToVnode(item));\n  };\n\n  // Plugin system\n  let plugins = new Map();\n  v.usePlugin = (plugin, options) => !plugins.has(plugin) && plugins.set(plugin, true) && plugin(v, options);\n\n  v.reservedWords = [\n    \"key\",\n    once,\n    oncreate,\n    onbeforeupdate,\n    onupdate,\n    onremove,\n    \"data\"\n  ];\n\n  let attachedListeners = {};\n  function eventListener(e) {\n    let dom = e.target;\n    let name = `__on${e.type}`;\n    while (dom) {\n      if (dom[name]) {\n        dom[name](e, dom);\n        if (!e.defaultPrevented) {\n          v.update();\n        }\n        return;\n      }\n      dom = dom.parentNode;\n    }\n  };\n\n  v.updateProperty = (name, newNode, oldNode) => {\n    if (name in newNode.props) {\n      let value = newNode.props[name];\n      if (v.reservedWords.indexOf(name) !== -1) {\n        if (directives[name]) {\n          directives[name](value, newNode, oldNode);\n        }\n      } else if (typeof value === functionstr) {\n        name = `__${name}`;\n        if (!attachedListeners[name]) {\n          document.addEventListener(name.slice(4), eventListener);\n          attachedListeners[name] = true;\n        };\n        newNode.dom[name] = value;\n      } else if (name in newNode.dom && !newNode.isSVG) {\n        if (newNode.dom[name] !== value) {\n          newNode.dom[name] = value;\n        }\n      } else if (!oldNode || value !== oldNode.props[name]) {\n        newNode.dom.setAttribute(name, value);\n      }\n    }\n  };\n\n  function updateProps(newNode, oldNode) {\n    for (let name in newNode.props) {\n      v.updateProperty(name, newNode, oldNode);\n    }\n  }\n\n  function removeProps(newNode, oldNode) {\n    for (let name in oldNode.props) {\n      if (v.reservedWords.indexOf(name) === -1 && name in newNode.props === false && typeof oldNode.props[name] !== functionstr) {\n        if (name in newNode.dom) {\n          newNode.dom[name] = UND;\n        } else {\n          newNode.dom.removeAttribute(name);\n        }\n      }\n    }\n  }\n\n  function moveDom(dom, $parent, oldDom) {\n    if (dom !== oldDom) {\n      oldDom ?\n        $parent.replaceChild(dom, oldDom) :\n        $parent.appendChild(dom);\n    }\n  }\n\n  function removeVnode(vnode) {\n    callRemove(vnode);\n    vnode.dom && vnode.dom.parentNode && vnode.dom.parentNode.removeChild(vnode.dom);\n  }\n\n  function updateKeyedNode($parent, newNode, compareNode, newIndex) {\n    let oldDom = $parent.childNodes[newIndex];\n    // Moved or updated\n    if (compareNode.dom) {\n      newNode.dom = compareNode.dom;\n      if (newNode.props[once] || lifecycleCall(newNode, onbeforeupdate, compareNode) === false) {\n        newNode.children = compareNode.children;\n        moveDom(newNode.dom, $parent, oldDom);\n      } else {\n        removeProps(newNode, compareNode);\n        updateProps(newNode, compareNode);\n        moveDom(newNode.dom, $parent, oldDom);\n        lifecycleCall(newNode, v.isMounted ? onupdate : oncreate, compareNode);\n        patch(newNode, compareNode);\n      }\n    } else {\n      newNode.dom = createElement(newNode.name, newNode.isSVG);\n      updateProps(newNode);\n      moveDom(newNode.dom, $parent, oldDom);\n      lifecycleCall(newNode, oncreate);\n      patch(newNode, emptyNode);\n    }\n  }\n\n  let vnodesToCleanup = [];\n\n  v.onCleanup = callback => {\n    let parentVnode = v.current.parentVnode;\n    if (!parentVnode.onCleanup) {\n      parentVnode.onCleanup = [];\n    }\n\n    parentVnode.onCleanup.push(callback);\n\n    if (vnodesToCleanup.indexOf(parentVnode) === -1) {\n      vnodesToCleanup.push(parentVnode);\n    }\n  };\n\n  function cleanupVnodes() {\n    for (let l = vnodesToCleanup.length; l--;) {\n      for (let callback of vnodesToCleanup[l].onCleanup) {\n        callback();\n      }\n    }\n    vnodesToCleanup = [];\n  }\n\n  v.current = {\n    parentVnode: UND,\n    oldParentVnode: UND,\n    component: UND\n  };\n\n  // eslint-disable-next-line complexity,sonarjs/cognitive-complexity\n  function patch(parentNode, oldParentNode) {\n    let newTree = isArray(parentNode.children) ? parentNode.children : [parentNode.children];\n    let oldTree = oldParentNode.children;\n    v.current.parentVnode = parentNode;\n    v.current.oldParentVnode = oldParentNode;\n\n    // Flatten children\n    for (let i = 0; i < newTree.length; i++) {\n      let childVnode = newTree[i];\n\n      if (isArray(childVnode)) {\n        newTree.splice(i--, 1, ...childVnode);\n      } else if (childVnode instanceof Vnode) {\n        if (typeof childVnode.name === 'string') {\n          childVnode.isSVG = parentNode.isSVG || childVnode.name === 'svg';\n        } else {\n          v.current.component = childVnode;\n          newTree.splice(i--, 1, ...[(childVnode.name.view || childVnode.name).call(childVnode.name, childVnode.props, ...childVnode.children)]);\n        }\n      } else if (childVnode === null || childVnode === UND) {\n        newTree.splice(i--, 1);\n      }\n    }\n\n    if (newTree.length === 0) {\n      if (oldTree.length > 0) {\n        let i = oldTree.length;\n        while (i--) {\n          callRemove(oldTree[i]);\n        }\n        parentNode.dom.textContent = '';\n      }\n\n    // Is keyed list\n    } else if (oldTree.length && newTree[0] instanceof Vnode && newTree[0].props.key) {\n      let oldKeys = oldTree.map(vnode => vnode.props.key);\n      let newKeys = newTree.map(vnode => vnode.props.key);\n\n      for (let i = 0, l = newKeys.length; i < l; i++) {\n        let key = newKeys[i];\n        let newNode = newTree[i];\n\n        // Updated: Same key\n        if (key === oldKeys[i]) {\n          oldTree[i].processed = true;\n          updateKeyedNode(parentNode.dom, newNode, oldTree[i], i);\n        } else {\n          let oldIndex = oldKeys.indexOf(key);\n          let newIndex = i >= oldKeys.length ? UND : i;\n\n          // Moved: Key exists in old keys\n          if (oldIndex !== -1) {\n            oldTree[oldIndex].processed = true;\n            updateKeyedNode(parentNode.dom, newNode, oldTree[oldIndex], newIndex);\n          // Added: Key does not exists in old keys\n          } else {\n            updateKeyedNode(parentNode.dom, newNode, emptyNode, newIndex);\n          }\n        }\n      }\n\n      // Delete unprocessed old keys\n      let l = oldTree.length;\n\n      while (l--) {\n        !oldTree[l].processed && removeVnode(oldTree[l]);\n      }\n\n    // Not keyed list or first render so use the simple algorithm\n    } else {\n      let i = oldTree.length;\n      let l = newTree.length;\n\n      // Remove deleted nodes\n      while (i-- > l) {\n        removeVnode(oldTree[i]);\n      }\n\n      for (i = 0; i < l; i++) {\n        let newNode = newTree[i];\n        let oldNode = oldTree[i];\n        // Is vnode\n        if (newNode instanceof Vnode) {\n          if (!oldNode) {\n            newNode.dom = createElement(newNode.name, newNode.isSVG);\n            updateProps(newNode);\n            parentNode.dom.appendChild(newNode.dom);\n            lifecycleCall(newNode, oncreate);\n            patch(newNode, emptyNode);\n          } else {\n            if (newNode.name === oldNode.name) {\n              newNode.dom = oldNode.dom;\n              if (newNode.props[once] || lifecycleCall(newNode, onbeforeupdate, oldNode) === false) {\n                newNode.children = oldNode.children;\n              } else {\n                removeProps(newNode, oldNode);\n                updateProps(newNode, oldNode);\n                lifecycleCall(newNode, v.isMounted ? onupdate : oncreate, oldNode);\n                patch(newNode, oldNode);\n              }\n            } else {\n              callRemove(oldNode);\n              newNode.dom = createElement(newNode.name, newNode.isSVG);\n              updateProps(newNode);\n              parentNode.dom.replaceChild(newNode.dom, parentNode.dom.childNodes[i]);\n              lifecycleCall(newNode, oncreate);\n              patch(newNode, emptyNode);\n            }\n          }\n\n        } else {\n          let dom;\n\n          // If we are getting a TextVnode could be from the domToVnode method\n          let value = newNode.dom ? newNode.dom.nodeValue : String(newNode);\n\n          if (oldNode instanceof TextVnode) {\n            dom = oldNode.dom;\n            if (value !== dom.nodeValue) {\n              dom.nodeValue = value;\n            }\n          } else {\n            dom = document.createTextNode(value);\n            if (!oldNode) {\n              parentNode.dom.appendChild(dom);\n            } else {\n              callRemove(oldNode);\n              parentNode.dom.replaceChild(dom, oldNode.dom);\n            }\n          }\n          newTree[i] = new TextVnode(dom);\n        }\n      }\n    }\n\n    parentNode.children = newTree;\n  };\n\n  v.update = (props, ...children) => {\n    if (mainNode) {\n      if (mountedComponent) {\n        cleanupVnodes();\n        oldMainNode = mainNode;\n        mainNode = new Vnode(mainNode.name, mainNode.props, [v(mountedComponent, props, ...children)]);\n        mainNode.dom = oldMainNode.dom;\n        mainNode.isSVG = mainNode.name === 'svg';\n        patch(mainNode, oldMainNode);\n        v.isMounted = true;\n      }\n\n      return v.isNode && mainNode.dom.innerHTML;\n    }\n  };\n\n  v.mount = (container, component, props, ...children) => {\n    let mainContainer = v.isNode\n      ? createElement('div')\n      : typeof container === 'string'\n        ? document.querySelectorAll(container)[0]\n        : container;\n\n    mainNode = v.domToVnode(mainContainer);\n    mountedComponent = component;\n\n    return v.update(props, ...children);\n  };\n\n  v.unMount = () => {\n    mountedComponent = () => '';\n    let result = v.update();\n    mountedComponent = UND;\n    v.isMounted = false;\n    return result;\n  };\n\n  v.directive = (directive, handler) => {\n    let directiveName = `v-${directive}`;\n    if (v.reservedWords.indexOf(directiveName) === -1) {\n      v.reservedWords.push(directiveName);\n      directives[directiveName] = handler;\n    }\n  };\n\n  let hideDirective = (test) => (bool, vnode, oldnode) => {\n    let value = test ? bool : !bool;\n    if (value) {\n      let newdom = document.createTextNode('');\n      if (oldnode && oldnode.dom && oldnode.dom.parentNode) {\n        callRemove(oldnode);\n        oldnode.dom.parentNode.replaceChild(newdom, oldnode.dom);\n      }\n      vnode.name = '';\n      vnode.children = [];\n      vnode.props = {};\n      vnode.dom = newdom;\n    }\n  };\n\n  v.directive('if', hideDirective(false));\n  v.directive('unless', hideDirective(true));\n  v.directive('for', (set, vnode) => vnode.children = set.map(vnode.children[0]));\n  v.directive('show', (bool, vnode) => vnode.dom.style.display = bool ? '' : 'none');\n  v.directive('class', (classes, vnode) => {\n    for (let name in classes) {\n      vnode.dom.classList.toggle(name, classes[name]);\n    }\n  });\n  v.directive('html', (html, vnode) => vnode.children = v.trust(html));\n\n  return v;\n}\n\nconst v = valyrian();\nv.newInstance = valyrian;\n\n(v.isNode ? global : window).v = v;\n"],"names":["valyrian","mainNode","oldMainNode","mountedComponent","UND","oncreate","onupdate","onremove","onbeforeupdate","functionstr","once","isArray","Array","directives","Vnode","name","props","children","this","TextVnode","dom","prototype","emptyNode","createElement","tag","isSVG","document","createElementNS","lifecycleCall","vnode","methodName","oldNode","callRemove","i","l","length","v","tagOrComponent","isNode","window","domToVnode","nodeType","forEach","call","attributes","prop","nodeName","nodeValue","childNodes","childVnode","push","trust","htmlString","div","innerHTML","trim","map","item","plugins","Map","usePlugin","plugin","options","has","set","reservedWords","attachedListeners","eventListener","e","target","type","defaultPrevented","update","parentNode","updateProps","newNode","updateProperty","removeProps","indexOf","removeAttribute","moveDom","$parent","oldDom","replaceChild","appendChild","removeVnode","removeChild","updateKeyedNode","compareNode","newIndex","isMounted","patch","value","addEventListener","slice","setAttribute","vnodesToCleanup","oldParentNode","newTree","oldTree","current","parentVnode","oldParentVnode","splice","component","view","textContent","key","oldKeys","newKeys","processed","oldIndex","String","createTextNode","onCleanup","callback","cleanupVnodes","mount","container","mainContainer","querySelectorAll","unMount","result","directive","handler","directiveName","hideDirective","test","bool","oldnode","newdom","style","display","classes","classList","toggle","html","newInstance","global"],"mappings":"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"}