//# sourceMappingURL=data:application/json;charset=utf-8;base64,{"version":3,"sources":["../lib/index.ts"],"names":["p","constructor","a","f","h","this","props","children","name","M","nodeValue","L","component","U","window","global","O","d","document","createElementNS","createElement","w","V","c","E","nodeName","toLowerCase","v","attributes","length","childNodes","nodeType","push","k","dom","D","F","innerHTML","trim","map","call","H","e","o","t","isMounted","isNode","reservedWords","trust","parentVnode","oldParentVnode","current","Map","usePlugin","has","set","onCleanup","indexOf","$","target","type","defaultPrevented","update","parentNode","G","S","addEventListener","slice","isSVG","removeAttribute","setAttribute","x","P","updateProperty","y","onremove","N","l","b","i","n","splice","Array","isArray","view","String","C","textContent","r","key","m","Math","max","s","g","A","processed","onbeforeupdate","onupdate","oncreate","appendChild","replaceChild","removeChild","createTextNode","u","T","unMount","mount","querySelectorAll","directive","R","style","display","classList","toggle","newInstance"],"mappings":"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","sourcesContent":["/* eslint-disable complexity */\n/* eslint-disable sonarjs/cognitive-complexity */\n/* eslint-disable no-use-before-define */\n/* eslint-disable no-unused-vars */\n\ntype VnodeOrUnknown = VnodeComponent | Vnode | TextVnode | any;\n\ntype DomAttribute = { nodeName: string; nodeValue: string };\n\ntype DomElement = (HTMLElement | SVGElement) & Record<string, any>;\n\ntype Props = {\n  key?: string | number;\n  data?: string;\n  oncreate?: { (vnode: Vnode): never };\n  onupdate?: { (vnode: Vnode, oldVnode: Vnode | TextVnode): never };\n  onremove?: { (oldVnode: Vnode): never };\n  onbeforeupdate?: { (vnode: Vnode, oldVnode: Vnode | TextVnode): undefined | boolean };\n} & Record<string, any>;\n\ntype Component = (props?: Record<string, any> | null, children?: VnodeOrUnknown) => VnodeOrUnknown | VnodeOrUnknown[];\n\ntype ValyrianComponent =\n  | Component\n  | (Record<string, any> & {\n      view: Component;\n    });\n\ntype Current = { parentVnode?: Vnode; oldParentVnode?: Vnode; component?: VnodeComponent };\n\ninterface Plugin {\n  (v: Valyrian, options?: Record<string, any>): never;\n}\n\ninterface Directive {\n  (value: any, vnode: Vnode, oldVnode?: Vnode | TextVnode): void | boolean;\n}\n\ninterface ValyrianEventHandler {\n  (a: Event, dom: DomElement): void;\n}\n\ninterface Vnode {\n  name: string;\n  props: Props;\n  children: VnodeOrUnknown[];\n  dom?: DomElement;\n  onCleanup?: FunctionConstructor[];\n  isSVG?: boolean;\n  processed?: boolean;\n}\n\nclass Vnode implements Vnode {\n  name: string;\n  props: Props;\n  children: VnodeOrUnknown[];\n  dom?: DomElement;\n  onCleanup?: FunctionConstructor[];\n  isSVG?: boolean;\n  processed?: boolean;\n\n  constructor(name: string, props: Props, children: VnodeOrUnknown) {\n    this.props = props;\n    this.children = children;\n    this.name = name;\n  }\n}\n\ninterface TextVnode {\n  dom?: Text;\n  nodeValue: string;\n}\n\nclass TextVnode implements TextVnode {\n  dom?: Text;\n  nodeValue: string;\n\n  constructor(nodeValue: string) {\n    this.nodeValue = nodeValue;\n  }\n}\n\ninterface VnodeComponent {\n  component: ValyrianComponent;\n  props: Props;\n  children: VnodeOrUnknown[];\n}\n\nclass VnodeComponent implements VnodeComponent {\n  component: ValyrianComponent;\n  props: Props;\n  children: VnodeOrUnknown[];\n\n  constructor(component: ValyrianComponent, props: Props, children: VnodeOrUnknown[]) {\n    this.props = props;\n    this.children = children;\n    this.component = component;\n  }\n}\n\ninterface Valyrian {\n  (tagOrComponent: string | ValyrianComponent, props?: Props | null, children?: VnodeOrUnknown): Vnode | VnodeComponent;\n  isMounted: boolean;\n  isNode: boolean;\n  reservedWords: string[];\n  current: Current;\n  trust: (htmlString: string) => Vnode[];\n  usePlugin: (plugin: Plugin, options: Record<string, any>) => void;\n  onCleanup: (callback: typeof Function) => void;\n  updateProperty: (name: string, newVnode: Vnode & { dom: DomElement }, oldNode: Vnode & { dom: DomElement }) => void;\n  update: (props?: Props | null, ...children: VnodeOrUnknown) => string | void;\n  mount: (container: string | DomElement, component: ValyrianComponent, props?: Props | null, ...children: VnodeOrUnknown[]) => string | void;\n  unMount: () => string | boolean | void;\n  directive: (directive: string, handler: Directive) => void;\n  newInstance: () => Valyrian;\n  [x: string]: any;\n}\n\nlet isNode = typeof window === \"undefined\" || typeof global !== \"undefined\";\n\n// Create Node element\nfunction createElement(tagName: string, isSVG: boolean = false): DomElement {\n  return isSVG ? document.createElementNS(\"http://www.w3.org/2000/svg\", tagName) : document.createElement(tagName);\n}\n\n// Transforms a DOM node to a VNode\nfunction domToVnode(dom: DomElement): Vnode & { dom: DomElement } {\n  const el = dom;\n  const nodeName = el.nodeName.toLowerCase();\n  const props: Props = {};\n  const children: VnodeOrUnknown[] = [];\n  let i: number;\n  let childNode;\n  let attr: Attr;\n\n  // attributes\n  for (i = 0; i < el.attributes.length; i++) {\n    attr = el.attributes[i];\n    props[attr.nodeName] = attr.nodeValue;\n  }\n\n  // children\n  for (i = 0; i < el.childNodes.length; i++) {\n    childNode = el.childNodes[i];\n    if (childNode.nodeType === 1) {\n      children.push(domToVnode(childNode as DomElement));\n    } else if (childNode.nodeType === 3) {\n      let textVnode = new TextVnode(childNode.nodeValue || \"\");\n      textVnode.dom = childNode as Text;\n      children.push(textVnode);\n    }\n  }\n\n  let newNode = new Vnode(nodeName, props, children);\n  newNode.dom = dom;\n  return newNode as Vnode & { dom: DomElement };\n}\n\nconst trust = (htmlString: string) => {\n  let div = createElement(\"div\");\n  div.innerHTML = htmlString.trim();\n\n  return [].map.call(div.childNodes, (item) => domToVnode(item)) as Vnode[];\n};\n\n// eslint-disable-next-line max-lines-per-function\nfunction valyrian(): Valyrian {\n  const v: Valyrian = (tagOrComponent, props, ...children) => {\n    if (typeof tagOrComponent === \"string\") {\n      return new Vnode(tagOrComponent, props || {}, children);\n    } else {\n      return new VnodeComponent(tagOrComponent, props || {}, children);\n    }\n  };\n\n  v.isMounted = false;\n  v.isNode = isNode;\n  const reservedWords = [\"key\", \"data\", \"v-once\", \"oncreate\", \"onupdate\", \"onremove\", \"onbeforeupdate\"];\n  v.reservedWords = reservedWords;\n  v.trust = trust;\n\n  const current: Current = {\n    parentVnode: undefined,\n    oldParentVnode: undefined,\n    component: undefined\n  };\n  v.current = current;\n\n  const plugins = new Map();\n\n  v.usePlugin = (plugin: Plugin, options: Record<string, any> = {}) => !plugins.has(plugin) && plugins.set(plugin, true) && plugin(v as Valyrian, options);\n\n  let vnodesToCleanup: Vnode[] = [];\n\n  v.onCleanup = (callback: FunctionConstructor) => {\n    let parentVnode = v.current.parentVnode as Vnode;\n    if (!parentVnode.onCleanup) {\n      parentVnode.onCleanup = [] as FunctionConstructor[];\n    }\n\n    parentVnode.onCleanup.push(callback);\n\n    if (vnodesToCleanup.indexOf(parentVnode) === -1) {\n      vnodesToCleanup.push(parentVnode);\n    }\n  };\n\n  let cleanupVnodes = () => {\n    for (let l = vnodesToCleanup.length; l--; ) {\n      for (let callback of vnodesToCleanup[l].onCleanup as FunctionConstructor[]) {\n        callback();\n      }\n    }\n    vnodesToCleanup = [];\n  };\n\n  let mainContainer: DomElement | null = null;\n  let emptyComponent: ValyrianComponent = () => \"\";\n  let mountedComponent: ValyrianComponent = emptyComponent;\n\n  const attachedListeners: string[] = [];\n  function eventListener(e: Event) {\n    let dom = e.target as DomElement;\n    let name = `v-on${e.type}`;\n    while (dom) {\n      if (dom[name]) {\n        (dom[name] as ValyrianEventHandler)(e, dom);\n        if (!e.defaultPrevented) {\n          v.update();\n        }\n        return;\n      }\n      dom = dom.parentNode as DomElement;\n    }\n  }\n\n  function updateProperty(prop: string, newVnode: Vnode & { dom: DomElement }, oldVnode?: Vnode): void | boolean {\n    if (reservedWords.indexOf(prop) !== -1) {\n      if (prop in directives) {\n        return directives[prop](newVnode.props[prop], newVnode, oldVnode);\n      }\n    } else if (typeof newVnode.props[prop] === \"function\" && newVnode.dom[`v-${prop}`] === undefined) {\n      if (attachedListeners.indexOf(prop) === -1) {\n        (mainContainer as DomElement).addEventListener(prop.slice(2), eventListener);\n        attachedListeners.push(prop);\n      }\n\n      newVnode.dom[`v-${prop}`] = newVnode.props[prop];\n    } else if (prop in newVnode.dom && !newVnode.isSVG) {\n      // eslint-disable-next-line eqeqeq\n      if (newVnode.dom[prop] != newVnode.props[prop]) {\n        newVnode.dom[prop] = newVnode.props[prop];\n      }\n    } else if (oldVnode === undefined || newVnode.props[prop] !== oldVnode.props[prop]) {\n      if (newVnode.props[prop] === false) {\n        newVnode.dom.removeAttribute(prop);\n      } else {\n        newVnode.dom.setAttribute(prop, newVnode.props[prop]);\n      }\n    }\n  }\n  v.updateProperty = updateProperty;\n\n  // Update a Vnode.dom HTMLElement with new Vnode props that are different from old Vnode props\n  function updateProperties(newVnode: Vnode & { dom: DomElement }, oldVnode?: Vnode): void {\n    for (let prop in newVnode.props) {\n      if (updateProperty(prop, newVnode, oldVnode) === false) {\n        return;\n      }\n    }\n  }\n\n  function removeProperties(newVnode: Vnode & { dom: DomElement }, oldVnode: Vnode) {\n    for (let name in oldVnode.props) {\n      if (reservedWords.indexOf(name) === -1 && name in newVnode.props === false && typeof oldVnode.props[name] !== \"function\") {\n        if (name in newVnode.dom) {\n          newVnode.dom[name] = null;\n        } else {\n          newVnode.dom.removeAttribute(name);\n        }\n      }\n    }\n  }\n\n  const callRemove = (vnode: Vnode) => {\n    for (let i = 0, l = vnode.children.length; i < l; i++) {\n      vnode.children[i] instanceof Vnode && callRemove(vnode.children[i]);\n    }\n\n    vnode.props.onremove && vnode.props.onremove(vnode);\n  };\n  // Patch a DOM node with a new VNode tree\n  function patch(newParentVnode: Vnode & { dom: DomElement }, oldParentVnode?: Vnode & { dom: DomElement }): void {\n    let oldTree = oldParentVnode?.children || [];\n    let newTree = newParentVnode.children;\n    let oldTreeLength = oldTree.length;\n\n    current.parentVnode = newParentVnode;\n    current.oldParentVnode = oldParentVnode;\n\n    // Flat newTree\n    for (let i = 0; i < newTree.length; i++) {\n      let childVnode = newTree[i];\n\n      if (childVnode instanceof Vnode) {\n        childVnode.isSVG = newParentVnode.isSVG || childVnode.name === \"svg\";\n      } else if (childVnode === null || childVnode === undefined) {\n        newTree.splice(i--, 1);\n      } else if (Array.isArray(childVnode)) {\n        newTree.splice(i--, 1, ...childVnode);\n      } else if (childVnode instanceof VnodeComponent) {\n        v.current.component = childVnode;\n        newTree.splice(\n          i--,\n          1,\n          ...[\n            \"view\" in childVnode.component\n              ? childVnode.component.view.call(childVnode.component, childVnode.props, childVnode.children)\n              : (childVnode.component as Component).call(childVnode.component, childVnode.props, childVnode.children)\n          ]\n        );\n      } else {\n        if (i > 0 && newTree[i - 1].nodeValue) {\n          newTree[i - 1].nodeValue += childVnode;\n          newTree.splice(i--, 1);\n        } else if (childVnode instanceof TextVnode === false) {\n          newTree[i] = new TextVnode(String(childVnode));\n        }\n      }\n    }\n\n    let newTreeLength = newTree.length;\n\n    // if newTree is empty, remove it\n    if (newTreeLength === 0) {\n      if (oldTreeLength > 0) {\n        for (let i = oldTreeLength; i--; ) {\n          oldTree[i] instanceof Vnode && callRemove(oldTree[i]);\n        }\n        // Fast node remove by setting textContent\n        newParentVnode.dom.textContent = \"\";\n      }\n      // If the tree is keyed list and is not first render\n    } else if (oldTreeLength && newTree[0] instanceof Vnode && \"key\" in newTree[0].props) {\n      // 1. Mutate the old key list to match the new key list\n      let oldKeyedList;\n\n      // if the oldTree does not have a keyed list fast remove all nodes\n      if (oldTree[0] instanceof Vnode === false || \"key\" in oldTree[0].props === false) {\n        for (let i = oldTreeLength; i--; ) {\n          oldTree[i] instanceof Vnode && callRemove(oldTree[i]);\n        }\n        // Fast node remove by setting textContent\n        newParentVnode.dom.textContent = \"\";\n        oldKeyedList = [];\n      } else {\n        oldKeyedList = oldTree.map((vnode) => vnode.props.key);\n      }\n\n      // 2. Obtain the max length of both lists\n      let newKeyedList = newTree.map((vnode) => vnode.props.key);\n      const maxListLength = Math.max(newTreeLength, oldKeyedList.length);\n\n      // 3. Cycle over all the elements of the list until the max length\n      for (let i = 0; i < maxListLength; i++) {\n        if (i < newTreeLength) {\n          let childVnode = newTree[i];\n          let oldChildVnode = oldKeyedList[i] === newKeyedList[i] ? oldTree[i] : oldTree[oldKeyedList.indexOf(childVnode.props.key)];\n          let shouldPatch = true;\n\n          if (oldChildVnode) {\n            childVnode.dom = oldChildVnode.dom;\n            oldChildVnode.processed = true;\n            if (\"v-once\" in childVnode.props || (childVnode.props.onbeforeupdate && childVnode.props.onbeforeupdate(childVnode, oldChildVnode) === false)) {\n              // skip this patch\n              childVnode.children = oldChildVnode.children;\n              shouldPatch = false;\n            } else {\n              removeProperties(childVnode as Vnode & { dom: DomElement }, oldChildVnode);\n              updateProperties(childVnode as Vnode & { dom: DomElement }, oldChildVnode);\n              if (v.isMounted) {\n                childVnode.props.onupdate && childVnode.props.onupdate(childVnode, oldChildVnode);\n              } else {\n                childVnode.props.oncreate && childVnode.props.oncreate(childVnode);\n              }\n            }\n          } else {\n            childVnode.dom = createElement(childVnode.name, childVnode.isSVG);\n            updateProperties(childVnode as Vnode & { dom: DomElement });\n            childVnode.props.oncreate && childVnode.props.oncreate(childVnode);\n          }\n\n          if (newParentVnode.dom.childNodes[i] === undefined) {\n            newParentVnode.dom.appendChild(childVnode.dom);\n          } else if (newParentVnode.dom.childNodes[i] !== childVnode.dom) {\n            oldTree[i] instanceof Vnode && !oldTree[i].processed && newKeyedList.indexOf(oldTree[i].props.key) === -1 && callRemove(oldTree[i]);\n            newParentVnode.dom.replaceChild(childVnode.dom, newParentVnode.dom.childNodes[i]);\n          }\n\n          shouldPatch && patch(childVnode as Vnode & { dom: DomElement }, oldChildVnode);\n        } else {\n          if (!oldTree[i].processed) {\n            oldTree[i] instanceof Vnode && callRemove(oldTree[i]);\n            oldTree[i].dom.parentNode && newParentVnode.dom.removeChild(oldTree[i].dom);\n          }\n        }\n      }\n    } else {\n      for (let i = 0; i < newTreeLength; i++) {\n        let childVnode = newTree[i];\n        let oldChildVnode = oldTree[i];\n\n        // if oldChildVnode is undefined, it's a new node, append it\n        if (oldChildVnode === undefined) {\n          if (childVnode instanceof Vnode) {\n            childVnode.dom = createElement(childVnode.name, childVnode.isSVG);\n            updateProperties(childVnode as Vnode & { dom: DomElement });\n            childVnode.props.oncreate && childVnode.props.oncreate(childVnode);\n            patch(childVnode as Vnode & { dom: DomElement });\n          } else {\n            childVnode.dom = document.createTextNode(childVnode.nodeValue);\n          }\n          newParentVnode.dom.appendChild(childVnode.dom);\n        } else {\n          // if childVnode is Vnode, replace it with its DOM node\n          if (childVnode instanceof Vnode) {\n            if (childVnode.name === oldChildVnode.name) {\n              childVnode.dom = oldChildVnode.dom;\n\n              if (\"v-once\" in childVnode.props || (childVnode.props.onbeforeupdate && childVnode.props.onbeforeupdate(childVnode, oldChildVnode) === false)) {\n                // skip this patch\n                childVnode.children = oldChildVnode.children;\n                continue;\n              }\n\n              removeProperties(childVnode as Vnode & { dom: DomElement }, oldChildVnode);\n              updateProperties(childVnode as Vnode & { dom: DomElement }, oldChildVnode);\n              if (v.isMounted) {\n                childVnode.props.onupdate && childVnode.props.onupdate(childVnode, oldChildVnode);\n              } else {\n                childVnode.props.oncreate && childVnode.props.oncreate(childVnode);\n              }\n              patch(childVnode as Vnode & { dom: DomElement }, oldChildVnode);\n            } else {\n              childVnode.dom = createElement(childVnode.name, childVnode.isSVG);\n              updateProperties(childVnode as Vnode & { dom: DomElement });\n              childVnode.props.oncreate && childVnode.props.oncreate(childVnode);\n              oldChildVnode instanceof Vnode && callRemove(oldChildVnode);\n              newParentVnode.dom.replaceChild(childVnode.dom, oldChildVnode.dom);\n              patch(childVnode as Vnode & { dom: DomElement }, oldChildVnode);\n            }\n          } else {\n            if (oldChildVnode instanceof Vnode) {\n              childVnode.dom = document.createTextNode(childVnode.nodeValue);\n              callRemove(oldChildVnode);\n              newParentVnode.dom.replaceChild(childVnode.dom, oldChildVnode.dom as DomElement);\n            } else {\n              childVnode.dom = oldChildVnode.dom;\n              // eslint-disable-next-line eqeqeq\n              if (childVnode.nodeValue != childVnode.dom.nodeValue) {\n                childVnode.dom.nodeValue = childVnode.nodeValue;\n              }\n            }\n          }\n        }\n      }\n\n      // For remaining old children: remove from DOM, garbage collect\n      for (let i = oldTreeLength - 1; i >= newTreeLength; --i) {\n        oldTree[i] instanceof Vnode && callRemove(oldTree[i]);\n        oldTree[i].dom.parentNode && newParentVnode.dom.removeChild(oldTree[i].dom);\n      }\n    }\n\n    newParentVnode.children = newTree;\n  }\n\n  let mainVnode: Vnode | null = null;\n  let oldMainVnode: Vnode | null = null;\n\n  v.unMount = () => {\n    mountedComponent = emptyComponent;\n    let result = v.update();\n    v.isMounted = false;\n    mainContainer = null;\n    return result;\n  };\n\n  v.update = (props, ...children) => {\n    if (mainVnode) {\n      cleanupVnodes();\n      oldMainVnode = mainVnode;\n      mainVnode = new Vnode(mainVnode.name, mainVnode.props, [v(mountedComponent, props, ...children)]);\n      mainVnode.dom = oldMainVnode.dom;\n      mainVnode.isSVG = oldMainVnode.isSVG;\n      patch(mainVnode as Vnode & { dom: Node }, oldMainVnode as Vnode & { dom: Node });\n      v.isMounted = true;\n      if (v.isNode) {\n        return (mainVnode.dom as HTMLElement).innerHTML;\n      }\n    }\n  };\n\n  v.mount = (container, component, props, ...children) => {\n    if (v.isMounted) {\n      v.unMount();\n    }\n\n    if (isNode) {\n      mainContainer = typeof container === \"string\" ? createElement(container, container === \"svg\") : container;\n    } else {\n      mainContainer = typeof container === \"string\" ? (document.querySelectorAll(container)[0] as DomElement) : container;\n    }\n\n    if (mainContainer !== null) {\n      mainVnode = domToVnode(mainContainer);\n      mainVnode.isSVG = mainVnode.name === \"svg\";\n      oldMainVnode = mainVnode;\n      mountedComponent = component;\n    }\n\n    return v.update(props, ...children);\n  };\n\n  let directives: Record<string, Directive> = {};\n\n  v.directive = (name: string, directive: Directive) => {\n    let fullName = `v-${name}`;\n    if (reservedWords.indexOf(fullName) === -1) {\n      reservedWords.push(fullName);\n      directives[fullName] = directive;\n    }\n  };\n\n  let hideDirective = (test: boolean) => (bool: boolean, vnode: Vnode, oldnode?: Vnode | TextVnode) => {\n    let value = test ? bool : !bool;\n    if (value) {\n      let newdom = document.createTextNode(\"\");\n      if (oldnode && oldnode.dom && oldnode.dom.parentNode) {\n        oldnode instanceof Vnode && callRemove(oldnode);\n        oldnode.dom.parentNode.replaceChild(newdom, oldnode.dom);\n      }\n      vnode.name = \"#text\";\n      vnode.children = [];\n      vnode.props = {};\n      vnode.dom = newdom as unknown as DomElement;\n      return false;\n    }\n  };\n\n  v.directive(\"if\", hideDirective(false));\n  v.directive(\"unless\", hideDirective(true));\n  v.directive(\"for\", (set: unknown[], vnode: Vnode) => {\n    vnode.children = set.map(vnode.children[0] as (value: unknown) => Function);\n  });\n  v.directive(\"show\", (bool: boolean, vnode: Vnode) => {\n    (vnode.dom as { style: { display: string } }).style.display = bool ? \"\" : \"none\";\n  });\n  v.directive(\"class\", (classes: { [x: string]: boolean }, vnode: Vnode) => {\n    for (let name in classes) {\n      (vnode.dom as DomElement).classList.toggle(name, classes[name]);\n    }\n  });\n  v.directive(\"html\", (html: string, vnode: Vnode) => {\n    vnode.children = [trust(html)];\n  });\n\n  v.newInstance = valyrian;\n\n  return v;\n}\n\n((isNode ? global : window) as unknown as { v: Valyrian }).v = valyrian();\n"]}