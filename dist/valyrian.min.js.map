//# sourceMappingURL=data:application/json;charset=utf-8;base64,{"version":3,"sources":["../lib/index.ts"],"names":["p","[object Object]","a","u","c","this","props","children","name","x","nodeValue","M","component","S","window","global","b","d","document","createElementNS","createElement","U","forEach","call","attributes","nodeName","toLowerCase","dom","y","childNodes","length","nodeType","push","N","F","innerHTML","trim","map","v","H","e","o","t","fragment","isMounted","isNode","reservedWords","trust","parentVnode","oldParentVnode","current","Map","usePlugin","has","set","onCleanup","indexOf","g","w","T","L","W","target","type","defaultPrevented","update","parentNode","G","O","addEventListener","slice","isSVG","removeAttribute","setAttribute","E","P","updateProperty","V","onremove","D","l","C","r","n","splice","Array","isArray","view","String","textContent","i","key","m","Math","max","s","h","A","processed","onbeforeupdate","onupdate","oncreate","appendChild","replaceChild","removeChild","createTextNode","f","k","unMount","mount","querySelectorAll","directive","R","style","display","classList","toggle","newInstance"],"mappings":"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","sourcesContent":["/* eslint-disable complexity */\n/* eslint-disable sonarjs/cognitive-complexity */\n/* eslint-disable no-use-before-define */\n/* eslint-disable no-unused-vars */\n\ntype VnodeOrUnknown = VnodeComponent | Vnode | TextVnode | any;\n\ntype DomAttribute = { nodeName: string; nodeValue: string };\n\ntype DomElement = (HTMLElement | SVGElement) & Record<string, any>;\n\ntype Props = {\n  key?: string | number;\n  data?: string;\n  oncreate?: { (vnode: Vnode): never };\n  onupdate?: { (vnode: Vnode, oldVnode: Vnode | TextVnode): never };\n  onremove?: { (oldVnode: Vnode): never };\n  onbeforeupdate?: { (vnode: Vnode, oldVnode: Vnode | TextVnode): undefined | boolean };\n} & Record<string, any>;\n\ntype Component = (props?: Record<string, any> | null, children?: VnodeOrUnknown) => VnodeOrUnknown | VnodeOrUnknown[];\n\ntype ValyrianComponent =\n  | Component\n  | (Record<string, any> & {\n      view: Component;\n    });\n\ntype Current = { parentVnode?: Vnode; oldParentVnode?: Vnode; component?: VnodeComponent };\n\ninterface Plugin {\n  (v: Valyrian, options?: Record<string, any>): never;\n}\n\ninterface Directive {\n  (value: any, vnode: Vnode, oldVnode?: Vnode | TextVnode): void | boolean;\n}\n\ninterface ValyrianEventHandler {\n  (a: Event, dom: DomElement): void;\n}\n\ninterface Vnode {\n  name: string;\n  props: Props;\n  children: VnodeOrUnknown[];\n  dom?: DomElement;\n  onCleanup?: FunctionConstructor[];\n  isSVG?: boolean;\n  processed?: boolean;\n}\n\nclass Vnode implements Vnode {\n  name: string;\n  props: Props;\n  children: VnodeOrUnknown[];\n  dom?: DomElement;\n  onCleanup?: FunctionConstructor[];\n  isSVG?: boolean;\n  processed?: boolean;\n\n  constructor(name: string, props: Props, children: VnodeOrUnknown) {\n    this.props = props;\n    this.children = children;\n    this.name = name;\n  }\n}\n\ninterface TextVnode {\n  dom?: Text;\n  nodeValue: string;\n}\n\nclass TextVnode implements TextVnode {\n  dom?: Text;\n  nodeValue: string;\n\n  constructor(nodeValue: string) {\n    this.nodeValue = nodeValue;\n  }\n}\n\ninterface VnodeComponent {\n  component: ValyrianComponent;\n  props: Props;\n  children: VnodeOrUnknown[];\n}\n\nclass VnodeComponent implements VnodeComponent {\n  component: ValyrianComponent;\n  props: Props;\n  children: VnodeOrUnknown[];\n\n  constructor(component: ValyrianComponent, props: Props, children: VnodeOrUnknown[]) {\n    this.props = props;\n    this.children = children;\n    this.component = component;\n  }\n}\n\ninterface Valyrian {\n  (tagOrComponent: string | ValyrianComponent, props?: Props | null, children?: VnodeOrUnknown): Vnode | VnodeComponent;\n  fragment: (props: Props, children: VnodeOrUnknown[]) => VnodeOrUnknown[];\n  isMounted: boolean;\n  isNode: boolean;\n  reservedWords: string[];\n  current: Current;\n  trust: (htmlString: string) => Vnode[];\n  usePlugin: (plugin: Plugin, options: Record<string, any>) => void;\n  onCleanup: (callback: typeof Function) => void;\n  updateProperty: (name: string, newVnode: Vnode & { dom: DomElement }, oldNode: Vnode & { dom: DomElement }) => void;\n  update: (props?: Props | null, ...children: VnodeOrUnknown) => string | void;\n  mount: (container: string | DomElement, component: ValyrianComponent, props?: Props | null, ...children: VnodeOrUnknown[]) => string | void;\n  unMount: () => string | boolean | void;\n  directive: (directive: string, handler: Directive) => void;\n  newInstance: () => Valyrian;\n  [x: string]: any;\n}\n\nlet isNode = typeof window === \"undefined\" || typeof global !== \"undefined\";\n\n// Create Node element\nfunction createElement(tagName: string, isSVG: boolean = false): DomElement {\n  return isSVG ? document.createElementNS(\"http://www.w3.org/2000/svg\", tagName) : document.createElement(tagName);\n}\n\n// Transforms a DOM node to a VNode\nfunction domToVnode(dom: DomElement): Vnode {\n  let props: Props = {};\n  [].forEach.call(dom.attributes, (prop: Attr) => (props[prop.nodeName] = prop.nodeValue));\n\n  let vnode: Vnode = new Vnode(dom.nodeName.toLowerCase(), props, []);\n  vnode.dom = dom;\n\n  for (let i = 0, l = dom.childNodes.length; i < l; i++) {\n    if (dom.childNodes[i].nodeType === 1) {\n      vnode.children.push(domToVnode(dom.childNodes[i] as DomElement));\n    } else if (dom.childNodes[i].nodeType === 3) {\n      let textVnode = new TextVnode(dom.childNodes[i].nodeValue || \"\");\n      textVnode.dom = dom.childNodes[i] as unknown as Text;\n      vnode.children.push(textVnode);\n    }\n  }\n  return vnode;\n}\n\nconst trust = (htmlString: string) => {\n  let div = createElement(\"div\");\n  div.innerHTML = htmlString.trim();\n\n  return [].map.call(div.childNodes, (item) => domToVnode(item)) as Vnode[];\n};\n\n// eslint-disable-next-line max-lines-per-function\nfunction valyrian(): Valyrian {\n  const v: Valyrian = (tagOrComponent, props, ...children) => {\n    if (typeof tagOrComponent === \"string\") {\n      return new Vnode(tagOrComponent, props || {}, children);\n    } else {\n      return new VnodeComponent(tagOrComponent, props || {}, children);\n    }\n  };\n\n  v.fragment = (props: Props, vnodes: VnodeOrUnknown[]) => {\n    return vnodes;\n  };\n\n  v.isMounted = false;\n  v.isNode = isNode;\n  const reservedWords = [\"key\", \"data\", \"v-once\", \"oncreate\", \"onupdate\", \"onremove\", \"onbeforeupdate\"];\n  v.reservedWords = reservedWords;\n  v.trust = trust;\n\n  const current: Current = {\n    parentVnode: undefined,\n    oldParentVnode: undefined,\n    component: undefined\n  };\n  v.current = current;\n\n  const plugins = new Map();\n\n  v.usePlugin = (plugin: Plugin, options: Record<string, any> = {}) => !plugins.has(plugin) && plugins.set(plugin, true) && plugin(v as Valyrian, options);\n\n  let vnodesToCleanup: Vnode[] = [];\n\n  v.onCleanup = (callback: FunctionConstructor) => {\n    let parentVnode = v.current.parentVnode as Vnode;\n    if (!parentVnode.onCleanup) {\n      parentVnode.onCleanup = [] as FunctionConstructor[];\n    }\n\n    parentVnode.onCleanup.push(callback);\n\n    if (vnodesToCleanup.indexOf(parentVnode) === -1) {\n      vnodesToCleanup.push(parentVnode);\n    }\n  };\n\n  let cleanupVnodes = () => {\n    for (let l = vnodesToCleanup.length; l--; ) {\n      for (let callback of vnodesToCleanup[l].onCleanup as FunctionConstructor[]) {\n        callback();\n      }\n    }\n    vnodesToCleanup = [];\n  };\n\n  let mainContainer: DomElement | null = null;\n  let emptyComponent: ValyrianComponent = () => \"\";\n  let mountedComponent: ValyrianComponent = emptyComponent;\n\n  const attachedListeners: string[] = [];\n  function eventListener(e: Event) {\n    let dom = e.target as DomElement;\n    let name = `v-on${e.type}`;\n    while (dom) {\n      if (dom[name]) {\n        (dom[name] as ValyrianEventHandler)(e, dom);\n        if (!e.defaultPrevented) {\n          v.update();\n        }\n        return;\n      }\n      dom = dom.parentNode as DomElement;\n    }\n  }\n\n  function updateProperty(prop: string, newVnode: Vnode & { dom: DomElement }, oldVnode?: Vnode): void | boolean {\n    if (reservedWords.indexOf(prop) !== -1) {\n      if (prop in directives) {\n        return directives[prop](newVnode.props[prop], newVnode, oldVnode);\n      }\n    } else if (typeof newVnode.props[prop] === \"function\") {\n      if (attachedListeners.indexOf(prop) === -1) {\n        (mainContainer as DomElement).addEventListener(prop.slice(2), eventListener);\n        attachedListeners.push(prop);\n      }\n      newVnode.dom[`v-${prop}`] = newVnode.props[prop];\n    } else if (prop in newVnode.dom && !newVnode.isSVG) {\n      // eslint-disable-next-line eqeqeq\n      if (newVnode.dom[prop] != newVnode.props[prop]) {\n        newVnode.dom[prop] = newVnode.props[prop];\n      }\n    } else if (oldVnode === undefined || newVnode.props[prop] !== oldVnode.props[prop]) {\n      if (newVnode.props[prop] === false) {\n        newVnode.dom.removeAttribute(prop);\n      } else {\n        newVnode.dom.setAttribute(prop, newVnode.props[prop]);\n      }\n    }\n  }\n  v.updateProperty = updateProperty;\n\n  // Update a Vnode.dom HTMLElement with new Vnode props that are different from old Vnode props\n  function updateProperties(newVnode: Vnode & { dom: DomElement }, oldVnode?: Vnode): void {\n    for (let prop in newVnode.props) {\n      if (updateProperty(prop, newVnode, oldVnode) === false) {\n        return;\n      }\n    }\n  }\n\n  function removeProperties(newVnode: Vnode & { dom: DomElement }, oldVnode: Vnode) {\n    for (let name in oldVnode.props) {\n      if (name in newVnode.props === false && typeof oldVnode.props[name] !== \"function\" && reservedWords.indexOf(name) === -1) {\n        if (name in newVnode.dom) {\n          newVnode.dom[name] = null;\n        } else {\n          newVnode.dom.removeAttribute(name);\n        }\n      }\n    }\n  }\n\n  const callRemove = (vnode: Vnode) => {\n    for (let i = 0, l = vnode.children.length; i < l; i++) {\n      vnode.children[i] instanceof Vnode && callRemove(vnode.children[i]);\n    }\n\n    vnode.props.onremove && vnode.props.onremove(vnode);\n  };\n  // Patch a DOM node with a new VNode tree\n  function patch(newParentVnode: Vnode & { dom: DomElement }, oldParentVnode?: Vnode & { dom: DomElement }): void {\n    let oldTree = oldParentVnode?.children || [];\n    let newTree = newParentVnode.children;\n    let oldTreeLength = oldTree.length;\n\n    current.parentVnode = newParentVnode;\n    current.oldParentVnode = oldParentVnode;\n\n    // Flat newTree\n    for (let i = 0; i < newTree.length; i++) {\n      let childVnode = newTree[i];\n\n      if (childVnode instanceof Vnode) {\n        childVnode.isSVG = newParentVnode.isSVG || childVnode.name === \"svg\";\n      } else if (childVnode === null || childVnode === undefined) {\n        newTree.splice(i--, 1);\n      } else if (Array.isArray(childVnode)) {\n        newTree.splice(i--, 1, ...childVnode);\n      } else if (childVnode instanceof VnodeComponent) {\n        v.current.component = childVnode;\n        newTree.splice(\n          i--,\n          1,\n          ...[\n            \"view\" in childVnode.component\n              ? childVnode.component.view.call(childVnode.component, childVnode.props, childVnode.children)\n              : (childVnode.component as Component).call(childVnode.component, childVnode.props, childVnode.children)\n          ]\n        );\n      } else {\n        if (i > 0 && newTree[i - 1].nodeValue) {\n          newTree[i - 1].nodeValue += childVnode;\n          newTree.splice(i--, 1);\n        } else if (childVnode instanceof TextVnode === false) {\n          newTree[i] = new TextVnode(String(childVnode));\n        }\n      }\n    }\n\n    let newTreeLength = newTree.length;\n\n    // if newTree is empty, remove it\n    if (newTreeLength === 0) {\n      if (oldTreeLength > 0) {\n        for (let i = oldTreeLength; i--; ) {\n          oldTree[i] instanceof Vnode && callRemove(oldTree[i]);\n        }\n        // Fast node remove by setting textContent\n        newParentVnode.dom.textContent = \"\";\n      }\n      // If the tree is keyed list and is not first render\n    } else if (oldTreeLength && newTree[0] instanceof Vnode && \"key\" in newTree[0].props) {\n      // 1. Mutate the old key list to match the new key list\n      let oldKeyedList;\n\n      // if the oldTree does not have a keyed list fast remove all nodes\n      if (oldTree[0] instanceof Vnode === false || \"key\" in oldTree[0].props === false) {\n        for (let i = oldTreeLength; i--; ) {\n          oldTree[i] instanceof Vnode && callRemove(oldTree[i]);\n        }\n        // Fast node remove by setting textContent\n        newParentVnode.dom.textContent = \"\";\n        oldKeyedList = [];\n      } else {\n        oldKeyedList = oldTree.map((vnode) => vnode.props.key);\n      }\n\n      // 2. Obtain the max length of both lists\n      let newKeyedList = newTree.map((vnode) => vnode.props.key);\n      const maxListLength = Math.max(newTreeLength, oldKeyedList.length);\n\n      // 3. Cycle over all the elements of the list until the max length\n      for (let i = 0; i < maxListLength; i++) {\n        if (i < newTreeLength) {\n          let childVnode = newTree[i];\n          let oldChildVnode = oldKeyedList[i] === newKeyedList[i] ? oldTree[i] : oldTree[oldKeyedList.indexOf(childVnode.props.key)];\n          let shouldPatch = true;\n\n          if (oldChildVnode) {\n            childVnode.dom = oldChildVnode.dom;\n            oldChildVnode.processed = true;\n            if (\"v-once\" in childVnode.props || (childVnode.props.onbeforeupdate && childVnode.props.onbeforeupdate(childVnode, oldChildVnode) === false)) {\n              // skip this patch\n              childVnode.children = oldChildVnode.children;\n              shouldPatch = false;\n            } else {\n              removeProperties(childVnode as Vnode & { dom: DomElement }, oldChildVnode);\n              updateProperties(childVnode as Vnode & { dom: DomElement }, oldChildVnode);\n              if (v.isMounted) {\n                childVnode.props.onupdate && childVnode.props.onupdate(childVnode, oldChildVnode);\n              } else {\n                childVnode.props.oncreate && childVnode.props.oncreate(childVnode);\n              }\n            }\n          } else {\n            childVnode.dom = createElement(childVnode.name, childVnode.isSVG);\n            updateProperties(childVnode as Vnode & { dom: DomElement });\n            childVnode.props.oncreate && childVnode.props.oncreate(childVnode);\n          }\n\n          if (newParentVnode.dom.childNodes[i] === undefined) {\n            newParentVnode.dom.appendChild(childVnode.dom);\n          } else if (newParentVnode.dom.childNodes[i] !== childVnode.dom) {\n            oldTree[i] instanceof Vnode && !oldTree[i].processed && newKeyedList.indexOf(oldTree[i].props.key) === -1 && callRemove(oldTree[i]);\n            newParentVnode.dom.replaceChild(childVnode.dom, newParentVnode.dom.childNodes[i]);\n          }\n\n          shouldPatch && patch(childVnode as Vnode & { dom: DomElement }, oldChildVnode);\n        } else {\n          if (!oldTree[i].processed) {\n            oldTree[i] instanceof Vnode && callRemove(oldTree[i]);\n            oldTree[i].dom.parentNode && newParentVnode.dom.removeChild(oldTree[i].dom);\n          }\n        }\n      }\n    } else {\n      for (let i = 0; i < newTreeLength; i++) {\n        let childVnode = newTree[i];\n        let oldChildVnode = oldTree[i];\n\n        // if oldChildVnode is undefined, it's a new node, append it\n        if (oldChildVnode === undefined) {\n          if (childVnode instanceof Vnode) {\n            childVnode.dom = createElement(childVnode.name, childVnode.isSVG);\n            updateProperties(childVnode as Vnode & { dom: DomElement });\n            childVnode.props.oncreate && childVnode.props.oncreate(childVnode);\n            patch(childVnode as Vnode & { dom: DomElement });\n          } else {\n            childVnode.dom = document.createTextNode(childVnode.nodeValue);\n          }\n          newParentVnode.dom.appendChild(childVnode.dom);\n        } else {\n          // if childVnode is Vnode, replace it with its DOM node\n          if (childVnode instanceof Vnode) {\n            if (childVnode.name === oldChildVnode.name) {\n              childVnode.dom = oldChildVnode.dom;\n\n              if (\"v-once\" in childVnode.props || (childVnode.props.onbeforeupdate && childVnode.props.onbeforeupdate(childVnode, oldChildVnode) === false)) {\n                // skip this patch\n                childVnode.children = oldChildVnode.children;\n                continue;\n              }\n\n              removeProperties(childVnode as Vnode & { dom: DomElement }, oldChildVnode);\n              updateProperties(childVnode as Vnode & { dom: DomElement }, oldChildVnode);\n              if (v.isMounted) {\n                childVnode.props.onupdate && childVnode.props.onupdate(childVnode, oldChildVnode);\n              } else {\n                childVnode.props.oncreate && childVnode.props.oncreate(childVnode);\n              }\n              patch(childVnode as Vnode & { dom: DomElement }, oldChildVnode);\n            } else {\n              childVnode.dom = createElement(childVnode.name, childVnode.isSVG);\n              updateProperties(childVnode as Vnode & { dom: DomElement });\n              childVnode.props.oncreate && childVnode.props.oncreate(childVnode);\n              oldChildVnode instanceof Vnode && callRemove(oldChildVnode);\n              newParentVnode.dom.replaceChild(childVnode.dom, oldChildVnode.dom);\n              patch(childVnode as Vnode & { dom: DomElement });\n            }\n          } else {\n            if (oldChildVnode instanceof Vnode) {\n              childVnode.dom = document.createTextNode(childVnode.nodeValue);\n              callRemove(oldChildVnode);\n              newParentVnode.dom.replaceChild(childVnode.dom, oldChildVnode.dom as DomElement);\n            } else {\n              childVnode.dom = oldChildVnode.dom;\n              // eslint-disable-next-line eqeqeq\n              if (childVnode.nodeValue != childVnode.dom.nodeValue) {\n                childVnode.dom.nodeValue = childVnode.nodeValue;\n              }\n            }\n          }\n        }\n      }\n\n      // For remaining old children: remove from DOM, garbage collect\n      for (let i = oldTreeLength - 1; i >= newTreeLength; --i) {\n        oldTree[i] instanceof Vnode && callRemove(oldTree[i]);\n        oldTree[i].dom.parentNode && newParentVnode.dom.removeChild(oldTree[i].dom);\n      }\n    }\n\n    newParentVnode.children = newTree;\n  }\n\n  let mainVnode: Vnode | null = null;\n  let oldMainVnode: Vnode | null = null;\n\n  v.unMount = () => {\n    mountedComponent = emptyComponent;\n    let result = v.update();\n    v.isMounted = false;\n    mainContainer = null;\n    return result;\n  };\n\n  v.update = (props, ...children) => {\n    if (mainVnode) {\n      cleanupVnodes();\n      oldMainVnode = mainVnode;\n      mainVnode = new Vnode(mainVnode.name, mainVnode.props, [v(mountedComponent, props, ...children)]);\n      mainVnode.dom = oldMainVnode.dom;\n      mainVnode.isSVG = oldMainVnode.isSVG;\n      patch(mainVnode as Vnode & { dom: Node }, oldMainVnode as Vnode & { dom: Node });\n      v.isMounted = true;\n      if (v.isNode) {\n        return (mainVnode.dom as HTMLElement).innerHTML;\n      }\n    }\n  };\n\n  v.mount = (container, component, props, ...children) => {\n    if (v.isMounted) {\n      v.unMount();\n    }\n\n    if (isNode) {\n      mainContainer = typeof container === \"string\" ? createElement(container, container === \"svg\") : container;\n    } else {\n      mainContainer = typeof container === \"string\" ? (document.querySelectorAll(container)[0] as DomElement) : container;\n    }\n\n    if (mainContainer !== null) {\n      mainVnode = domToVnode(mainContainer);\n      mainVnode.isSVG = mainVnode.name === \"svg\";\n      oldMainVnode = mainVnode;\n      mountedComponent = component;\n    }\n\n    return v.update(props, ...children);\n  };\n\n  let directives: Record<string, Directive> = {};\n\n  v.directive = (name: string, directive: Directive) => {\n    let fullName = `v-${name}`;\n    if (reservedWords.indexOf(fullName) === -1) {\n      reservedWords.push(fullName);\n      directives[fullName] = directive;\n    }\n  };\n\n  let hideDirective = (test: boolean) => (bool: boolean, vnode: Vnode, oldnode?: Vnode | TextVnode) => {\n    let value = test ? bool : !bool;\n    if (value) {\n      let newdom = document.createTextNode(\"\");\n      if (oldnode && oldnode.dom && oldnode.dom.parentNode) {\n        oldnode instanceof Vnode && callRemove(oldnode);\n        oldnode.dom.parentNode.replaceChild(newdom, oldnode.dom);\n      }\n      vnode.name = \"#text\";\n      vnode.children = [];\n      vnode.props = {};\n      vnode.dom = newdom as unknown as DomElement;\n      return false;\n    }\n  };\n\n  v.directive(\"if\", hideDirective(false));\n  v.directive(\"unless\", hideDirective(true));\n  v.directive(\"for\", (set: unknown[], vnode: Vnode) => {\n    vnode.children = set.map(vnode.children[0] as (value: unknown) => Function);\n  });\n  v.directive(\"show\", (bool: boolean, vnode: Vnode) => {\n    (vnode.dom as { style: { display: string } }).style.display = bool ? \"\" : \"none\";\n  });\n  v.directive(\"class\", (classes: { [x: string]: boolean }, vnode: Vnode) => {\n    for (let name in classes) {\n      (vnode.dom as DomElement).classList.toggle(name, classes[name]);\n    }\n  });\n  v.directive(\"html\", (html: string, vnode: Vnode) => {\n    vnode.children = [trust(html)];\n  });\n\n  v.newInstance = valyrian;\n\n  return v;\n}\n\n((isNode ? global : window) as unknown as { v: Valyrian }).v = valyrian();\n"]}