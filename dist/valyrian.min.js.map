//# sourceMappingURL=data:application/json;charset=utf-8;base64,{"version":3,"sources":["../lib/index.ts"],"names":["p","constructor","a","u","c","this","props","children","name","x","nodeValue","M","component","S","window","global","N","d","document","createElementNS","createElement","L","forEach","call","attributes","nodeName","toLowerCase","dom","y","childNodes","length","nodeType","push","k","F","innerHTML","trim","map","v","H","e","o","t","isMounted","isNode","reservedWords","trust","parentVnode","oldParentVnode","current","Map","usePlugin","has","set","onCleanup","indexOf","g","U","T","G","$","target","type","defaultPrevented","update","parentNode","w","O","addEventListener","slice","isSVG","removeAttribute","setAttribute","E","P","updateProperty","V","onremove","D","l","C","i","n","splice","Array","isArray","view","String","textContent","r","key","m","Math","max","s","h","A","processed","onbeforeupdate","onupdate","oncreate","appendChild","replaceChild","removeChild","createTextNode","f","b","unMount","mount","querySelectorAll","directive","R","style","display","classList","toggle","newInstance"],"mappings":"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","sourcesContent":["/* eslint-disable complexity */\n/* eslint-disable sonarjs/cognitive-complexity */\n/* eslint-disable no-use-before-define */\n/* eslint-disable no-unused-vars */\n\ntype VnodeOrUnknown = VnodeComponent | Vnode | TextVnode | any;\n\ntype DomAttribute = { nodeName: string; nodeValue: string };\n\ntype DomElement = (HTMLElement | SVGElement) & Record<string, any>;\n\ntype Props = {\n  key?: string | number;\n  data?: string;\n  oncreate?: { (vnode: Vnode): never };\n  onupdate?: { (vnode: Vnode, oldVnode: Vnode | TextVnode): never };\n  onremove?: { (oldVnode: Vnode): never };\n  onbeforeupdate?: { (vnode: Vnode, oldVnode: Vnode | TextVnode): undefined | boolean };\n} & Record<string, any>;\n\ntype Component = (props?: Record<string, any> | null, children?: VnodeOrUnknown) => VnodeOrUnknown | VnodeOrUnknown[];\n\ntype ValyrianComponent =\n  | Component\n  | (Record<string, any> & {\n      view: Component;\n    });\n\ntype Current = { parentVnode?: Vnode; oldParentVnode?: Vnode; component?: VnodeComponent };\n\ninterface Plugin {\n  (v: Valyrian, options?: Record<string, any>): never;\n}\n\ninterface Directive {\n  (value: any, vnode: Vnode, oldVnode?: Vnode | TextVnode): void | boolean;\n}\n\ninterface ValyrianEventHandler {\n  (a: Event, dom: DomElement): void;\n}\n\ninterface Vnode {\n  name: string;\n  props: Props;\n  children: VnodeOrUnknown[];\n  dom?: DomElement;\n  onCleanup?: FunctionConstructor[];\n  isSVG?: boolean;\n  processed?: boolean;\n}\n\nclass Vnode implements Vnode {\n  name: string;\n  props: Props;\n  children: VnodeOrUnknown[];\n  dom?: DomElement;\n  onCleanup?: FunctionConstructor[];\n  isSVG?: boolean;\n  processed?: boolean;\n\n  constructor(name: string, props: Props, children: VnodeOrUnknown) {\n    this.props = props;\n    this.children = children;\n    this.name = name;\n  }\n}\n\ninterface TextVnode {\n  dom?: Text;\n  nodeValue: string;\n}\n\nclass TextVnode implements TextVnode {\n  dom?: Text;\n  nodeValue: string;\n\n  constructor(nodeValue: string) {\n    this.nodeValue = nodeValue;\n  }\n}\n\ninterface VnodeComponent {\n  component: ValyrianComponent;\n  props: Props;\n  children: VnodeOrUnknown[];\n}\n\nclass VnodeComponent implements VnodeComponent {\n  component: ValyrianComponent;\n  props: Props;\n  children: VnodeOrUnknown[];\n\n  constructor(component: ValyrianComponent, props: Props, children: VnodeOrUnknown[]) {\n    this.props = props;\n    this.children = children;\n    this.component = component;\n  }\n}\n\ninterface Valyrian {\n  (tagOrComponent: string | ValyrianComponent, props?: Props | null, children?: VnodeOrUnknown): Vnode | VnodeComponent;\n  isMounted: boolean;\n  isNode: boolean;\n  reservedWords: string[];\n  current: Current;\n  trust: (htmlString: string) => Vnode[];\n  usePlugin: (plugin: Plugin, options: Record<string, any>) => void;\n  onCleanup: (callback: typeof Function) => void;\n  updateProperty: (name: string, newVnode: Vnode & { dom: DomElement }, oldNode: Vnode & { dom: DomElement }) => void;\n  update: (props?: Props | null, ...children: VnodeOrUnknown) => string | void;\n  mount: (container: string | DomElement, component: ValyrianComponent, props?: Props | null, ...children: VnodeOrUnknown[]) => string | void;\n  unMount: () => string | boolean | void;\n  directive: (directive: string, handler: Directive) => void;\n  newInstance: () => Valyrian;\n  [x: string]: any;\n}\n\nlet isNode = typeof window === \"undefined\" || typeof global !== \"undefined\";\n\n// Create Node element\nfunction createElement(tagName: string, isSVG: boolean = false): DomElement {\n  return isSVG ? document.createElementNS(\"http://www.w3.org/2000/svg\", tagName) : document.createElement(tagName);\n}\n\n// Transforms a DOM node to a VNode\nfunction domToVnode(dom: DomElement): Vnode {\n  let props: Props = {};\n  [].forEach.call(dom.attributes, (prop: Attr) => (props[prop.nodeName] = prop.nodeValue));\n\n  let vnode: Vnode = new Vnode(dom.nodeName.toLowerCase(), props, []);\n  vnode.dom = dom;\n\n  for (let i = 0, l = dom.childNodes.length; i < l; i++) {\n    if (dom.childNodes[i].nodeType === 1) {\n      vnode.children.push(domToVnode(dom.childNodes[i] as DomElement));\n    } else if (dom.childNodes[i].nodeType === 3) {\n      let textVnode = new TextVnode(dom.childNodes[i].nodeValue || \"\");\n      textVnode.dom = dom.childNodes[i] as unknown as Text;\n      vnode.children.push(textVnode);\n    }\n  }\n  return vnode;\n}\n\nconst trust = (htmlString: string) => {\n  let div = createElement(\"div\");\n  div.innerHTML = htmlString.trim();\n\n  return [].map.call(div.childNodes, (item) => domToVnode(item)) as Vnode[];\n};\n\n// eslint-disable-next-line max-lines-per-function\nfunction valyrian(): Valyrian {\n  const v: Valyrian = (tagOrComponent, props, ...children) => {\n    if (typeof tagOrComponent === \"string\") {\n      return new Vnode(tagOrComponent, props || {}, children);\n    } else {\n      return new VnodeComponent(tagOrComponent, props || {}, children);\n    }\n  };\n\n  v.isMounted = false;\n  v.isNode = isNode;\n  const reservedWords = [\"key\", \"data\", \"v-once\", \"oncreate\", \"onupdate\", \"onremove\", \"onbeforeupdate\"];\n  v.reservedWords = reservedWords;\n  v.trust = trust;\n\n  const current: Current = {\n    parentVnode: undefined,\n    oldParentVnode: undefined,\n    component: undefined\n  };\n  v.current = current;\n\n  const plugins = new Map();\n\n  v.usePlugin = (plugin: Plugin, options: Record<string, any> = {}) => !plugins.has(plugin) && plugins.set(plugin, true) && plugin(v as Valyrian, options);\n\n  let vnodesToCleanup: Vnode[] = [];\n\n  v.onCleanup = (callback: FunctionConstructor) => {\n    let parentVnode = v.current.parentVnode as Vnode;\n    if (!parentVnode.onCleanup) {\n      parentVnode.onCleanup = [] as FunctionConstructor[];\n    }\n\n    parentVnode.onCleanup.push(callback);\n\n    if (vnodesToCleanup.indexOf(parentVnode) === -1) {\n      vnodesToCleanup.push(parentVnode);\n    }\n  };\n\n  let cleanupVnodes = () => {\n    for (let l = vnodesToCleanup.length; l--; ) {\n      for (let callback of vnodesToCleanup[l].onCleanup as FunctionConstructor[]) {\n        callback();\n      }\n    }\n    vnodesToCleanup = [];\n  };\n\n  let mainContainer: DomElement | null = null;\n  let emptyComponent: ValyrianComponent = () => \"\";\n  let mountedComponent: ValyrianComponent = emptyComponent;\n\n  const attachedListeners: string[] = [];\n  function eventListener(e: Event) {\n    let dom = e.target as DomElement;\n    let name = `v-on${e.type}`;\n    while (dom) {\n      if (dom[name]) {\n        (dom[name] as ValyrianEventHandler)(e, dom);\n        if (!e.defaultPrevented) {\n          v.update();\n        }\n        return;\n      }\n      dom = dom.parentNode as DomElement;\n    }\n  }\n\n  function updateProperty(prop: string, newVnode: Vnode & { dom: DomElement }, oldVnode?: Vnode): void | boolean {\n    if (reservedWords.indexOf(prop) !== -1) {\n      if (prop in directives) {\n        return directives[prop](newVnode.props[prop], newVnode, oldVnode);\n      }\n    } else if (typeof newVnode.props[prop] === \"function\") {\n      if (newVnode.dom[`v-${prop}`] === undefined && attachedListeners.indexOf(prop) === -1) {\n        (mainContainer as DomElement).addEventListener(prop.slice(2), eventListener);\n        attachedListeners.push(prop);\n      }\n      newVnode.dom[`v-${prop}`] = newVnode.props[prop];\n    } else if (prop in newVnode.dom && !newVnode.isSVG) {\n      // eslint-disable-next-line eqeqeq\n      if (newVnode.dom[prop] != newVnode.props[prop]) {\n        newVnode.dom[prop] = newVnode.props[prop];\n      }\n    } else if (oldVnode === undefined || newVnode.props[prop] !== oldVnode.props[prop]) {\n      if (newVnode.props[prop] === false) {\n        newVnode.dom.removeAttribute(prop);\n      } else {\n        newVnode.dom.setAttribute(prop, newVnode.props[prop]);\n      }\n    }\n  }\n  v.updateProperty = updateProperty;\n\n  // Update a Vnode.dom HTMLElement with new Vnode props that are different from old Vnode props\n  function updateProperties(newVnode: Vnode & { dom: DomElement }, oldVnode?: Vnode): void {\n    for (let prop in newVnode.props) {\n      if (updateProperty(prop, newVnode, oldVnode) === false) {\n        return;\n      }\n    }\n  }\n\n  function removeProperties(newVnode: Vnode & { dom: DomElement }, oldVnode: Vnode) {\n    for (let name in oldVnode.props) {\n      if (reservedWords.indexOf(name) === -1 && name in newVnode.props === false && typeof oldVnode.props[name] !== \"function\") {\n        if (name in newVnode.dom) {\n          newVnode.dom[name] = null;\n        } else {\n          newVnode.dom.removeAttribute(name);\n        }\n      }\n    }\n  }\n\n  const callRemove = (vnode: Vnode) => {\n    for (let i = 0, l = vnode.children.length; i < l; i++) {\n      vnode.children[i] instanceof Vnode && callRemove(vnode.children[i]);\n    }\n\n    vnode.props.onremove && vnode.props.onremove(vnode);\n  };\n  // Patch a DOM node with a new VNode tree\n  function patch(newParentVnode: Vnode & { dom: DomElement }, oldParentVnode?: Vnode & { dom: DomElement }): void {\n    let oldTree = oldParentVnode?.children || [];\n    let newTree = newParentVnode.children;\n    let oldTreeLength = oldTree.length;\n\n    current.parentVnode = newParentVnode;\n    current.oldParentVnode = oldParentVnode;\n\n    // Flat newTree\n    for (let i = 0; i < newTree.length; i++) {\n      let childVnode = newTree[i];\n\n      if (childVnode instanceof Vnode) {\n        childVnode.isSVG = newParentVnode.isSVG || childVnode.name === \"svg\";\n      } else if (childVnode === null || childVnode === undefined) {\n        newTree.splice(i--, 1);\n      } else if (Array.isArray(childVnode)) {\n        newTree.splice(i--, 1, ...childVnode);\n      } else if (childVnode instanceof VnodeComponent) {\n        v.current.component = childVnode;\n        newTree.splice(\n          i--,\n          1,\n          ...[\n            \"view\" in childVnode.component\n              ? childVnode.component.view.call(childVnode.component, childVnode.props, childVnode.children)\n              : (childVnode.component as Component).call(childVnode.component, childVnode.props, childVnode.children)\n          ]\n        );\n      } else {\n        if (i > 0 && newTree[i - 1].nodeValue) {\n          newTree[i - 1].nodeValue += childVnode;\n          newTree.splice(i--, 1);\n        } else if (childVnode instanceof TextVnode === false) {\n          newTree[i] = new TextVnode(String(childVnode));\n        }\n      }\n    }\n\n    let newTreeLength = newTree.length;\n\n    // if newTree is empty, remove it\n    if (newTreeLength === 0) {\n      if (oldTreeLength > 0) {\n        for (let i = oldTreeLength; i--; ) {\n          oldTree[i] instanceof Vnode && callRemove(oldTree[i]);\n        }\n        // Fast node remove by setting textContent\n        newParentVnode.dom.textContent = \"\";\n      }\n      // If the tree is keyed list and is not first render\n    } else if (oldTreeLength && newTree[0] instanceof Vnode && \"key\" in newTree[0].props) {\n      // 1. Mutate the old key list to match the new key list\n      let oldKeyedList;\n\n      // if the oldTree does not have a keyed list fast remove all nodes\n      if (oldTree[0] instanceof Vnode === false || \"key\" in oldTree[0].props === false) {\n        for (let i = oldTreeLength; i--; ) {\n          oldTree[i] instanceof Vnode && callRemove(oldTree[i]);\n        }\n        // Fast node remove by setting textContent\n        newParentVnode.dom.textContent = \"\";\n        oldKeyedList = [];\n      } else {\n        oldKeyedList = oldTree.map((vnode) => vnode.props.key);\n      }\n\n      // 2. Obtain the max length of both lists\n      let newKeyedList = newTree.map((vnode) => vnode.props.key);\n      const maxListLength = Math.max(newTreeLength, oldKeyedList.length);\n\n      // 3. Cycle over all the elements of the list until the max length\n      for (let i = 0; i < maxListLength; i++) {\n        if (i < newTreeLength) {\n          let childVnode = newTree[i];\n          let oldChildVnode = oldKeyedList[i] === newKeyedList[i] ? oldTree[i] : oldTree[oldKeyedList.indexOf(childVnode.props.key)];\n          let shouldPatch = true;\n\n          if (oldChildVnode) {\n            childVnode.dom = oldChildVnode.dom;\n            oldChildVnode.processed = true;\n            if (\"v-once\" in childVnode.props || (childVnode.props.onbeforeupdate && childVnode.props.onbeforeupdate(childVnode, oldChildVnode) === false)) {\n              // skip this patch\n              childVnode.children = oldChildVnode.children;\n              shouldPatch = false;\n            } else {\n              removeProperties(childVnode as Vnode & { dom: DomElement }, oldChildVnode);\n              updateProperties(childVnode as Vnode & { dom: DomElement }, oldChildVnode);\n              if (v.isMounted) {\n                childVnode.props.onupdate && childVnode.props.onupdate(childVnode, oldChildVnode);\n              } else {\n                childVnode.props.oncreate && childVnode.props.oncreate(childVnode);\n              }\n            }\n          } else {\n            childVnode.dom = createElement(childVnode.name, childVnode.isSVG);\n            updateProperties(childVnode as Vnode & { dom: DomElement });\n            childVnode.props.oncreate && childVnode.props.oncreate(childVnode);\n          }\n\n          if (newParentVnode.dom.childNodes[i] === undefined) {\n            newParentVnode.dom.appendChild(childVnode.dom);\n          } else if (newParentVnode.dom.childNodes[i] !== childVnode.dom) {\n            oldTree[i] instanceof Vnode && !oldTree[i].processed && newKeyedList.indexOf(oldTree[i].props.key) === -1 && callRemove(oldTree[i]);\n            newParentVnode.dom.replaceChild(childVnode.dom, newParentVnode.dom.childNodes[i]);\n          }\n\n          shouldPatch && patch(childVnode as Vnode & { dom: DomElement }, oldChildVnode);\n        } else {\n          if (!oldTree[i].processed) {\n            oldTree[i] instanceof Vnode && callRemove(oldTree[i]);\n            oldTree[i].dom.parentNode && newParentVnode.dom.removeChild(oldTree[i].dom);\n          }\n        }\n      }\n    } else {\n      for (let i = 0; i < newTreeLength; i++) {\n        let childVnode = newTree[i];\n        let oldChildVnode = oldTree[i];\n\n        // if oldChildVnode is undefined, it's a new node, append it\n        if (oldChildVnode === undefined) {\n          if (childVnode instanceof Vnode) {\n            childVnode.dom = createElement(childVnode.name, childVnode.isSVG);\n            updateProperties(childVnode as Vnode & { dom: DomElement });\n            childVnode.props.oncreate && childVnode.props.oncreate(childVnode);\n            patch(childVnode as Vnode & { dom: DomElement });\n          } else {\n            childVnode.dom = document.createTextNode(childVnode.nodeValue);\n          }\n          newParentVnode.dom.appendChild(childVnode.dom);\n        } else {\n          // if childVnode is Vnode, replace it with its DOM node\n          if (childVnode instanceof Vnode) {\n            if (childVnode.name === oldChildVnode.name) {\n              childVnode.dom = oldChildVnode.dom;\n\n              if (\"v-once\" in childVnode.props || (childVnode.props.onbeforeupdate && childVnode.props.onbeforeupdate(childVnode, oldChildVnode) === false)) {\n                // skip this patch\n                childVnode.children = oldChildVnode.children;\n                continue;\n              }\n\n              removeProperties(childVnode as Vnode & { dom: DomElement }, oldChildVnode);\n              updateProperties(childVnode as Vnode & { dom: DomElement }, oldChildVnode);\n              if (v.isMounted) {\n                childVnode.props.onupdate && childVnode.props.onupdate(childVnode, oldChildVnode);\n              } else {\n                childVnode.props.oncreate && childVnode.props.oncreate(childVnode);\n              }\n              patch(childVnode as Vnode & { dom: DomElement }, oldChildVnode);\n            } else {\n              childVnode.dom = createElement(childVnode.name, childVnode.isSVG);\n              updateProperties(childVnode as Vnode & { dom: DomElement });\n              childVnode.props.oncreate && childVnode.props.oncreate(childVnode);\n              oldChildVnode instanceof Vnode && callRemove(oldChildVnode);\n              newParentVnode.dom.replaceChild(childVnode.dom, oldChildVnode.dom);\n              patch(childVnode as Vnode & { dom: DomElement });\n            }\n          } else {\n            if (oldChildVnode instanceof Vnode) {\n              childVnode.dom = document.createTextNode(childVnode.nodeValue);\n              callRemove(oldChildVnode);\n              newParentVnode.dom.replaceChild(childVnode.dom, oldChildVnode.dom as DomElement);\n            } else {\n              childVnode.dom = oldChildVnode.dom;\n              // eslint-disable-next-line eqeqeq\n              if (childVnode.nodeValue != childVnode.dom.nodeValue) {\n                childVnode.dom.nodeValue = childVnode.nodeValue;\n              }\n            }\n          }\n        }\n      }\n\n      // For remaining old children: remove from DOM, garbage collect\n      for (let i = oldTreeLength - 1; i >= newTreeLength; --i) {\n        oldTree[i] instanceof Vnode && callRemove(oldTree[i]);\n        oldTree[i].dom.parentNode && newParentVnode.dom.removeChild(oldTree[i].dom);\n      }\n    }\n\n    newParentVnode.children = newTree;\n  }\n\n  let mainVnode: Vnode | null = null;\n  let oldMainVnode: Vnode | null = null;\n\n  v.unMount = () => {\n    mountedComponent = emptyComponent;\n    let result = v.update();\n    v.isMounted = false;\n    mainContainer = null;\n    return result;\n  };\n\n  v.update = (props, ...children) => {\n    if (mainVnode) {\n      cleanupVnodes();\n      oldMainVnode = mainVnode;\n      mainVnode = new Vnode(mainVnode.name, mainVnode.props, [v(mountedComponent, props, ...children)]);\n      mainVnode.dom = oldMainVnode.dom;\n      mainVnode.isSVG = oldMainVnode.isSVG;\n      patch(mainVnode as Vnode & { dom: Node }, oldMainVnode as Vnode & { dom: Node });\n      v.isMounted = true;\n      if (v.isNode) {\n        return (mainVnode.dom as HTMLElement).innerHTML;\n      }\n    }\n  };\n\n  v.mount = (container, component, props, ...children) => {\n    if (v.isMounted) {\n      v.unMount();\n    }\n\n    if (isNode) {\n      mainContainer = typeof container === \"string\" ? createElement(container, container === \"svg\") : container;\n    } else {\n      mainContainer = typeof container === \"string\" ? (document.querySelectorAll(container)[0] as DomElement) : container;\n    }\n\n    if (mainContainer !== null) {\n      mainVnode = domToVnode(mainContainer);\n      mainVnode.isSVG = mainVnode.name === \"svg\";\n      oldMainVnode = mainVnode;\n      mountedComponent = component;\n    }\n\n    return v.update(props, ...children);\n  };\n\n  let directives: Record<string, Directive> = {};\n\n  v.directive = (name: string, directive: Directive) => {\n    let fullName = `v-${name}`;\n    if (reservedWords.indexOf(fullName) === -1) {\n      reservedWords.push(fullName);\n      directives[fullName] = directive;\n    }\n  };\n\n  let hideDirective = (test: boolean) => (bool: boolean, vnode: Vnode, oldnode?: Vnode | TextVnode) => {\n    let value = test ? bool : !bool;\n    if (value) {\n      let newdom = document.createTextNode(\"\");\n      if (oldnode && oldnode.dom && oldnode.dom.parentNode) {\n        oldnode instanceof Vnode && callRemove(oldnode);\n        oldnode.dom.parentNode.replaceChild(newdom, oldnode.dom);\n      }\n      vnode.name = \"#text\";\n      vnode.children = [];\n      vnode.props = {};\n      vnode.dom = newdom as unknown as DomElement;\n      return false;\n    }\n  };\n\n  v.directive(\"if\", hideDirective(false));\n  v.directive(\"unless\", hideDirective(true));\n  v.directive(\"for\", (set: unknown[], vnode: Vnode) => {\n    vnode.children = set.map(vnode.children[0] as (value: unknown) => Function);\n  });\n  v.directive(\"show\", (bool: boolean, vnode: Vnode) => {\n    (vnode.dom as { style: { display: string } }).style.display = bool ? \"\" : \"none\";\n  });\n  v.directive(\"class\", (classes: { [x: string]: boolean }, vnode: Vnode) => {\n    for (let name in classes) {\n      (vnode.dom as DomElement).classList.toggle(name, classes[name]);\n    }\n  });\n  v.directive(\"html\", (html: string, vnode: Vnode) => {\n    vnode.children = [trust(html)];\n  });\n\n  v.newInstance = valyrian;\n\n  return v;\n}\n\n((isNode ? global : window) as unknown as { v: Valyrian }).v = valyrian();\n"]}