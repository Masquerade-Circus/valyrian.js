{"version":3,"file":"valyrian.min.js","sources":["../lib/index.js"],"sourcesContent":["let UND = void 0;\nlet oncreate = 'v-create';\nlet onupdate = 'v-update';\nlet onremove = 'v-remove';\nlet onbeforeupdate = 'v-beforeupdate';\nlet functionstr = 'function';\nlet list = 'v-list';\nlet noop = 'v-noop';\nlet processed = 'processed';\nlet mainNode;\nlet oldMainNode;\nlet mountedComponent;\nlet FALSE = false;\nlet TRUE = true;\nlet NIL = null;\nlet emptyObject = Object.create(NIL);\nlet emptyArray = [];\n\nfunction Vnode(name, props, children) {\n  this.props = props || emptyObject;\n  this.children = children;\n  this.name = name;\n};\n\nfunction TextVnode(dom) {\n  this.dom = dom;\n}\nTextVnode.prototype = {\n  props: emptyObject,\n  children: emptyArray\n};\n\nlet emptyNode = new TextVnode();\n\nfunction createElement(tag, isSVG) {\n  return isSVG ?\n    document.createElementNS('http://www.w3.org/2000/svg', tag) :\n    document.createElement(tag);\n}\n\nfunction v(tagOrComponent, props, ...children) {\n  return new Vnode(tagOrComponent, props, children);\n};\n\nv.isNode = typeof window === 'undefined';\n\n// This could be extended to do a deep clone\n// This mutates the component\nv.addState = (component, state) => Object.assign(component, state);\n\n// Hydrates the current dom before mount\nv.dom2vnode = function (dom) {\n  if (dom.nodeType === 3) {\n    return new TextVnode(dom);\n  }\n\n  if (dom.nodeType === 1) {\n    let props = {};\n    emptyArray.forEach.call(dom.attributes, (prop) => props[prop.nodeName] = prop.nodeValue);\n\n    let vnode = new Vnode(\n      dom.nodeName,\n      props,\n      []\n    );\n    vnode.dom = dom;\n\n    for (let i = 0, l = dom.childNodes.length; i < l; i++) {\n      let childVnode = v.dom2vnode(dom.childNodes[i]);\n      childVnode && vnode.children.push(childVnode);\n    }\n    return vnode;\n  }\n};\n\nv.trust = (htmlString) => {\n  let div = createElement('div');\n  div.innerHTML = htmlString.trim();\n\n  return emptyArray.map.call(div.childNodes, (item) => v.dom2vnode(item));\n};\n\n// Plugin system\nlet plugins = new Map();\nv.usePlugin = (plugin, options) => !plugins.has(plugin) && plugins.set(plugin, TRUE) && plugin(v, options);\n\nv.reservedWords = {\n  key: NIL,\n  [list]: NIL,\n  [noop]: NIL,\n  [oncreate]: NIL,\n  [onbeforeupdate]: NIL,\n  [onupdate]: NIL,\n  [onremove]: NIL\n};\n\nlet attachedListeners = {};\nfunction eventListener(e) {\n  let dom = e.target;\n  let name = `__on${e.type}`;\n  while (dom) {\n    if (name in dom) {\n      dom[name](e);\n      if (e.defaultPrevented === FALSE) {\n        v.update();\n      }\n      return;\n    }\n    dom = dom.parentNode;\n  }\n};\n\nfunction lifecycleCall(vnode, methodName, oldNode) {\n  if (methodName === onremove) {\n    cleanupVnode(vnode);\n    for (let i = 0, l = vnode.children.length; i < l; i++) {\n      lifecycleCall(vnode.children[i], onremove);\n    }\n  }\n\n  if (methodName in vnode.props) {\n    return vnode.props[methodName](vnode, oldNode);\n  }\n}\n\nv.updateProperty = (name, newNode, oldNode, isSVG) => {\n  let value = newNode.props[name];\n  if (name in v.reservedWords) {\n    if (typeof v.reservedWords[name] === functionstr) {\n      v.reservedWords[name](value, newNode, oldNode, isSVG);\n    }\n  } else if (typeof value === functionstr) {\n    name = `__${name}`;\n    if (name in attachedListeners === FALSE) {\n      document.addEventListener(name.slice(4), eventListener);\n      attachedListeners[name] = TRUE;\n    };\n    newNode.dom[name] = value;\n  } else if (name in newNode.dom && !isSVG) {\n    if (newNode.dom[name] !== value) {\n      newNode.dom[name] = value;\n    }\n  } else if (value !== oldNode.props[name]) {\n    newNode.dom.setAttribute(name, value);\n  }\n};\n\nfunction updateProps(newNode, oldNode, isSVG) {\n  for (let name in newNode.props) {\n    v.updateProperty(name, newNode, oldNode, isSVG);\n  }\n}\n\nfunction createNode(newNode, isSVG) {\n  newNode.dom = createElement(newNode.name, isSVG);\n  updateProps(newNode, emptyNode, isSVG);\n  lifecycleCall(newNode, oncreate);\n  patch(newNode, emptyNode, isSVG);\n}\n\nfunction updateNode(newNode, oldNode, isSVG) {\n  newNode.dom = oldNode.dom;\n  if (noop in newNode.props || lifecycleCall(newNode, onbeforeupdate, oldNode) === FALSE) {\n    newNode.children = oldNode.children;\n  } else {\n    for (let name in oldNode.props) {\n      if (name in v.reservedWords === FALSE && name in newNode.props === FALSE && typeof oldNode.props[name] !== functionstr) {\n        if (name in newNode.dom) {\n          newNode.dom[name] = UND;\n        } else {\n          newNode.dom.removeAttribute(name);\n        }\n      }\n    }\n    updateProps(newNode, oldNode, isSVG);\n    lifecycleCall(newNode, !v.isMounted ? oncreate : onupdate, oldNode);\n    patch(newNode, oldNode, isSVG);\n  }\n}\n\nfunction updateKeyedNode($parent, newNode, compareNode, isSVG, newIndex) {\n  // Moved or updated\n  compareNode.dom ?\n    updateNode(newNode, compareNode, isSVG) :\n    createNode(newNode, isSVG);\n\n  if (newNode.dom !== $parent.childNodes[newIndex]) {\n    $parent.childNodes[newIndex] !== UND ?\n      $parent.replaceChild(newNode.dom, $parent.childNodes[newIndex]) :\n      $parent.appendChild(newNode.dom);\n  }\n}\n\nv.onCleanup = function (callback) {\n  if (v.current.parentVnode.onCleanup === UND) {\n    v.current.parentVnode.onCleanup = [];\n    v.current.parentVnode.cleanUp = TRUE;\n  }\n  v.current.parentVnode.onCleanup.push(callback);\n};\n\nfunction cleanupVnode(vnode) {\n  if (vnode.cleanUp) {\n    for (let callback of vnode.onCleanup) {\n      callback();\n    }\n  }\n}\n\nv.current = {\n  parentVnode: NIL,\n  oldParentVnode: NIL,\n  component: NIL\n};\n\nlet isArray = Array.isArray;\n\n// eslint-disable-next-line complexity,sonarjs/cognitive-complexity\nfunction patch(parentNode, oldParentNode, isSVG) {\n  let {dom: $parent, children: newTree} = parentNode;\n  let oldTree = oldParentNode.children;\n  v.current.parentVnode = parentNode;\n  v.current.oldParentVnode = oldParentNode;\n  cleanupVnode(oldParentNode);\n\n  if (isArray(newTree) === FALSE) {\n    newTree = [newTree];\n  }\n\n  // Flatten children\n  for (let i = 0; i < newTree.length; i++) {\n    let childVnode = newTree[i];\n\n    if (childVnode instanceof Vnode) {\n      if (typeof childVnode.name !== 'string') {\n        v.current.component = childVnode;\n        let viewMethod = 'view' in childVnode.name ? childVnode.name.view : childVnode.name;\n        newTree.splice(i--, 1, ...[viewMethod.call(viewMethod, childVnode.props, ...childVnode.children)]);\n      } else {\n        if (childVnode.name === 'svg') {\n          childVnode.isSVG = TRUE;\n        }\n      }\n    } else if (isArray(childVnode)) {\n      newTree.splice(i--, 1, ...childVnode);\n    }\n  }\n\n  // New tree is empty so just remove all old nodes\n  if (newTree.length === 0) {\n    let l = oldTree.length;\n    while (l--) {\n      lifecycleCall(oldTree[l], onremove);\n    }\n\n    $parent.textContent = '';\n  } else {\n    // Is keyed list\n    if (oldTree.length > 0 && list in parentNode.props) {\n      let oldKeys = oldTree.map(vnode => vnode.props.key);\n      let newKeys = newTree.map(vnode => vnode.props.key);\n\n      for (let i = 0, l = newKeys.length; i < l; i++) {\n        let key = newKeys[i];\n        let newNode = newTree[i];\n        isSVG = isSVG || newNode.isSVG;\n\n        // Updated: Same key\n        if (key === oldKeys[i]) {\n          oldTree[i][processed] = TRUE;\n          updateKeyedNode($parent, newNode, oldTree[i], isSVG, i);\n        } else {\n          let oldIndex = oldKeys.indexOf(key);\n          let newIndex = i >= oldKeys.length ? UND : i;\n\n          // Moved: Key exists in old keys\n          if (oldIndex !== -1) {\n            oldTree[oldIndex][processed] = TRUE;\n            updateKeyedNode($parent, newNode, oldTree[oldIndex], isSVG, newIndex);\n            // Added: Key does not exists in old keys\n          } else {\n            updateKeyedNode($parent, newNode, emptyNode, isSVG, newIndex);\n          }\n        }\n      }\n\n      // Delete unprocessed old keys\n      let l = oldTree.length;\n\n      while (l--) {\n        if (processed in oldTree[l] === FALSE) {\n          lifecycleCall(oldTree[l], onremove);\n          oldTree[l].dom.parentNode && $parent.removeChild(oldTree[l].dom);\n        }\n      }\n\n      // Not keyed list or first render so use the simple algorithm\n    } else {\n      // Remove deleted nodes\n      let i = oldTree.length;\n      let l = newTree.length;\n\n      while (i-- > l) {\n        lifecycleCall(oldTree[i], onremove);\n        $parent.removeChild(oldTree[i].dom);\n      }\n\n      for (i = 0; i < l; i++) {\n        let newNode = newTree[i];\n        let oldNode = oldTree[i];\n        // Is vnode\n        if (newNode instanceof Vnode) {\n          isSVG = isSVG || newNode.isSVG;\n\n          if (oldNode === UND) {\n            createNode(newNode, isSVG);\n            $parent.appendChild(newNode.dom);\n          } else {\n            if (newNode.name === oldNode.name) {\n              updateNode(newNode, oldNode, isSVG);\n            } else {\n              createNode(newNode, isSVG);\n              lifecycleCall(oldNode, onremove);\n              $parent.replaceChild(newNode.dom, oldNode.dom);\n            }\n          }\n\n        } else if (oldNode instanceof TextVnode) {\n          newNode = String(newNode);\n          if (newNode !== oldNode.dom.nodeValue) {\n            oldNode.dom.nodeValue = newNode;\n          }\n          newTree[i] = oldNode;\n        } else {\n          let dom = document.createTextNode(newNode);\n          if (oldNode === UND) {\n            $parent.appendChild(dom);\n          } else {\n            lifecycleCall(oldNode, onremove);\n            $parent.replaceChild(dom, oldNode.dom);\n          }\n\n          newTree[i] = new TextVnode(dom);\n        }\n      }\n    }\n  }\n\n  parentNode.children = newTree;\n};\n\nv.update = (props, ...children) => {\n  if (mainNode) {\n    if (mountedComponent) {\n      oldMainNode = mainNode;\n      mainNode = new Vnode(mainNode.name, mainNode.props, v(mountedComponent, props, ...children));\n      mainNode.dom = oldMainNode.dom;\n      patch(mainNode, oldMainNode, mainNode.isSVG);\n      v.isMounted = TRUE;\n    }\n\n    return v.isNode && mainNode.dom.innerHTML;\n  }\n};\n\nv.mount = (container, component, props, ...children) => {\n  let mainContainer = v.isNode\n    ? createElement('div')\n    : typeof container === 'string'\n      ? document.querySelectorAll(container)[0]\n      : container;\n\n  mainNode = v.dom2vnode(mainContainer);\n  mountedComponent = component;\n\n  return v.update(props, ...children);\n};\n\nv.unmount = () => {\n  mountedComponent = () => '';\n  let result = v.update();\n  mountedComponent = UND;\n  v.isMounted = FALSE;\n  return result;\n};\n\nv.directive = (directive, handler) => directive in v.reservedWords === FALSE && (v.reservedWords[directive] = handler);\nv.directive('v-for', (set, vnode) => vnode.children = set.map(vnode.children[0]));\n\nlet hideDirective = (test) => (bool, vnode, oldnode) => {\n  if (bool === test) {\n    let newdom = document.createTextNode('');\n    if (oldnode.dom && oldnode.dom.parentNode) {\n      lifecycleCall(oldnode, onremove);\n      oldnode.dom.parentNode.replaceChild(newdom, oldnode.dom);\n    }\n    vnode.name = '';\n    vnode.children = emptyArray;\n    vnode.props = emptyObject;\n    vnode.dom = newdom;\n  }\n};\n\nv.directive('v-if', hideDirective(FALSE));\nv.directive('v-unless', hideDirective(TRUE));\nv.directive('v-show', (bool, vnode) => vnode.dom.style.display = bool ? '' : 'none');\n\n(v.isNode ? global : window).v = v;\n"],"names":["mainNode","oldMainNode","mountedComponent","UND","NIL","emptyObject","Object","create","emptyArray","Vnode","name","props","children","this","TextVnode","dom","prototype","emptyNode","createElement","tag","isSVG","document","createElementNS","v","tagOrComponent","isNode","window","addState","component","state","assign","dom2vnode","nodeType","forEach","call","attributes","prop","nodeName","nodeValue","vnode","i","l","childNodes","length","childVnode","push","trust","htmlString","div","innerHTML","trim","map","item","plugins","Map","usePlugin","plugin","options","has","set","reservedWords","key","v-list","v-noop","v-create","v-beforeupdate","v-update","v-remove","attachedListeners","eventListener","e","target","type","defaultPrevented","update","parentNode","lifecycleCall","methodName","oldNode","cleanupVnode","updateProps","newNode","updateProperty","createNode","patch","updateNode","removeAttribute","isMounted","updateKeyedNode","$parent","compareNode","newIndex","replaceChild","appendChild","cleanUp","callback","onCleanup","value","addEventListener","slice","setAttribute","current","parentVnode","oldParentVnode","isArray","Array","oldParentNode","newTree","oldTree","viewMethod","view","splice","textContent","oldKeys","newKeys","oldIndex","indexOf","removeChild","String","createTextNode","mount","container","mainContainer","querySelectorAll","unmount","result","directive","handler","hideDirective","test","bool","oldnode","newdom","style","display","global"],"mappings":"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"}