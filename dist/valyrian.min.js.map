{"version":3,"file":"valyrian.min.js","sources":["../lib/index.js"],"sourcesContent":["let UND = void 0;\nlet oncreate = 'oncreate';\nlet onupdate = 'onupdate';\nlet onremove = 'onremove';\nlet onbeforeupdate = 'onbeforeupdate';\nlet functionstr = 'function';\nlet list = 'v-list';\nlet noop = 'v-noop';\nlet mainNode;\nlet oldMainNode;\nlet mountedComponent;\n\nfunction Vnode(name, props, children) {\n  this.props = props || {};\n  this.children = children;\n  this.name = name;\n};\n\nfunction TextVnode(dom) {\n  this.dom = dom;\n}\nTextVnode.prototype = {\n  props: {},\n  children: []\n};\n\nlet emptyNode = new TextVnode();\n\nfunction createElement(tag, isSVG) {\n  return isSVG ?\n    document.createElementNS('http://www.w3.org/2000/svg', tag) :\n    document.createElement(tag);\n}\n\nfunction v(tagOrComponent, props, ...children) {\n  return new Vnode(tagOrComponent, props, children);\n};\n\nv.isNode = typeof window === 'undefined';\n\n// Hydrates the current dom before mount\nv.dom2vnode = dom => {\n  if (dom.nodeType === 3) {\n    return new TextVnode(dom);\n  }\n\n  if (dom.nodeType === 1) {\n    let props = {};\n    [].forEach.call(dom.attributes, (prop) => props[prop.nodeName] = prop.nodeValue);\n\n    let vnode = new Vnode(\n      dom.nodeName,\n      props,\n      []\n    );\n    vnode.dom = dom;\n\n    for (let i = 0, l = dom.childNodes.length; i < l; i++) {\n      let childVnode = v.dom2vnode(dom.childNodes[i]);\n      childVnode && vnode.children.push(childVnode);\n    }\n    return vnode;\n  }\n};\n\nv.trust = (htmlString) => {\n  let div = createElement('div');\n  div.innerHTML = htmlString.trim();\n\n  return [].map.call(div.childNodes, (item) => v.dom2vnode(item));\n};\n\n// Plugin system\nlet plugins = new Map();\nv.usePlugin = (plugin, options) => !plugins.has(plugin) && plugins.set(plugin, true) && plugin(v, options);\n\nv.reservedWords = {\n  key: true,\n  [list]: true,\n  [noop]: true,\n  [oncreate]: true,\n  [onbeforeupdate]: true,\n  [onupdate]: true,\n  [onremove]: true,\n  model: true\n};\n\nlet attachedListeners = {};\nfunction eventListener(e) {\n  let dom = e.target;\n  let name = `__on${e.type}`;\n  while (dom) {\n    if (dom[name]) {\n      dom[name](e);\n      if (!e.defaultPrevented) {\n        v.update();\n      }\n      return;\n    }\n    dom = dom.parentNode;\n  }\n};\n\nfunction lifecycleCall(vnode, methodName, oldNode) {\n  if (vnode instanceof Vnode) {\n    if (methodName === onremove) {\n      for (let i = 0, l = vnode.children.length; i < l; i++) {\n        lifecycleCall(vnode.children[i], onremove);\n      }\n    }\n\n    if (vnode.props[methodName]) {\n      return vnode.props[methodName](vnode, oldNode);\n    }\n  }\n}\n\nv.updateProperty = (name, newNode, oldNode) => {\n  if (name in newNode.props) {\n    let value = newNode.props[name];\n    if (v.reservedWords[name]) {\n      if (typeof v.reservedWords[name] === functionstr) {\n        v.reservedWords[name](value, newNode, oldNode);\n      }\n    } else if (typeof value === functionstr) {\n      name = `__${name}`;\n      if (!attachedListeners[name]) {\n        document.addEventListener(name.slice(4), eventListener);\n        attachedListeners[name] = true;\n      };\n      newNode.dom[name] = value;\n    } else if (name in newNode.dom && !newNode.isSVG) {\n      if (newNode.dom[name] !== value) {\n        newNode.dom[name] = value;\n      }\n    } else if (value !== oldNode.props[name]) {\n      newNode.dom.setAttribute(name, value);\n    }\n  }\n};\n\nfunction updateProps(newNode, oldNode) {\n  for (let name in newNode.props) {\n    v.updateProperty(name, newNode, oldNode);\n  }\n}\n\nfunction removeProps(newNode, oldNode) {\n  for (let name in oldNode.props) {\n    if (!v.reservedWords[name] && name in newNode.props === false && typeof oldNode.props[name] !== functionstr) {\n      if (name in newNode.dom) {\n        newNode.dom[name] = UND;\n      } else {\n        newNode.dom.removeAttribute(name);\n      }\n    }\n  }\n}\n\nfunction moveDom(dom, $parent, newIndex) {\n  if (dom !== $parent.childNodes[newIndex]) {\n    $parent.childNodes[newIndex] ?\n      $parent.replaceChild(dom, $parent.childNodes[newIndex]) :\n      $parent.appendChild(dom);\n  }\n}\n\nfunction removeVnode(vnode) {\n  if (vnode && vnode.dom) {\n    lifecycleCall(vnode, onremove);\n    vnode.dom.parentNode && vnode.dom.parentNode.removeChild(vnode.dom);\n  }\n}\n\n\nlet getVnodeKeys = tree => tree.map(vnode => vnode instanceof Vnode ? vnode.props.key : '');\n\nfunction updateKeyedNode($parent, newNode, compareNode, newIndex) {\n  // Moved or updated\n  if (compareNode.dom) {\n    newNode.dom = compareNode.dom;\n    if (newNode.props[noop] || lifecycleCall(newNode, onbeforeupdate, compareNode) === false) {\n      newNode.children = compareNode.children;\n      moveDom(newNode.dom, $parent, newIndex);\n    } else {\n      removeProps(newNode, compareNode);\n      updateProps(newNode, compareNode);\n      moveDom(newNode.dom, $parent, newIndex);\n      lifecycleCall(newNode, v.isMounted ? onupdate : oncreate, compareNode);\n      patch(newNode, compareNode);\n    }\n  } else {\n    newNode.dom = createElement(newNode.name, newNode.isSVG);\n    updateProps(newNode, emptyNode);\n    moveDom(newNode.dom, $parent, newIndex);\n    lifecycleCall(newNode, oncreate);\n    patch(newNode, emptyNode);\n  }\n}\n\nlet vnodesToCleanup = [];\n\nv.onCleanup = callback => {\n  let parentVnode = v.current.parentVnode;\n  if (!parentVnode.onCleanup) {\n    parentVnode.onCleanup = [];\n  }\n\n  parentVnode.onCleanup.push(callback);\n\n  if (vnodesToCleanup.indexOf(parentVnode) === -1) {\n    vnodesToCleanup.push(parentVnode);\n  }\n};\n\nfunction cleanupVnodes() {\n  for (let l = vnodesToCleanup.length; l--;) {\n    for (let callback of vnodesToCleanup[l].onCleanup) {\n      callback();\n    }\n  }\n  vnodesToCleanup = [];\n}\n\nv.current = {\n  parentVnode: UND,\n  oldParentVnode: UND,\n  component: UND\n};\n\nlet isArray = Array.isArray;\n\n// eslint-disable-next-line complexity,sonarjs/cognitive-complexity\nfunction patch(parentNode, oldParentNode) {\n  let newTree = isArray(parentNode.children) ? parentNode.children : [parentNode.children];\n  let oldTree = oldParentNode.children;\n  v.current.parentVnode = parentNode;\n  v.current.oldParentVnode = oldParentNode;\n\n  // Flatten children\n  for (let i = 0; i < newTree.length; i++) {\n    let childVnode = newTree[i];\n\n    if (isArray(childVnode)) {\n      newTree.splice(i--, 1, ...childVnode);\n    } else if (childVnode instanceof Vnode) {\n      if (typeof childVnode.name !== 'string') {\n        v.current.component = childVnode;\n        let viewMethod = childVnode.name.view || childVnode.name;\n        newTree.splice(i--, 1, ...[viewMethod.call(childVnode.name, childVnode.props, ...childVnode.children)]);\n      } else {\n        childVnode.isSVG = parentNode.isSVG || childVnode.name === 'svg';\n      }\n    }\n  }\n\n  // Is keyed list\n  if (oldTree.length && parentNode.props[list]) {\n    let oldKeys = getVnodeKeys(oldTree);\n    let newKeys = getVnodeKeys(newTree);\n\n    for (let i = 0, l = newKeys.length; i < l; i++) {\n      let key = newKeys[i];\n      let newNode = newTree[i];\n\n      // We will not handle other than Vnodes\n      if (newNode instanceof Vnode) {\n      // Updated: Same key\n        if (key === oldKeys[i]) {\n          oldTree[i].processed = true;\n          updateKeyedNode(parentNode.dom, newNode, oldTree[i], i);\n        } else {\n          let oldIndex = oldKeys.indexOf(key);\n          let newIndex = i >= oldKeys.length ? UND : i;\n\n          // Moved: Key exists in old keys\n          if (oldIndex !== -1) {\n            oldTree[oldIndex].processed = true;\n            updateKeyedNode(parentNode.dom, newNode, oldTree[oldIndex], newIndex);\n          // Added: Key does not exists in old keys\n          } else {\n            updateKeyedNode(parentNode.dom, newNode, emptyNode, newIndex);\n          }\n        }\n      }\n    }\n\n    // Delete unprocessed old keys\n    let l = oldTree.length;\n\n    while (l--) {\n      if (oldTree[l] && !oldTree[l].processed) {\n        removeVnode(oldTree[l]);\n      }\n    }\n\n    // Not keyed list or first render so use the simple algorithm\n  } else {\n    let i = oldTree.length;\n    let l = newTree.length;\n\n    // Remove deleted nodes\n    while (i-- > l) {\n      removeVnode(oldTree[i]);\n    }\n\n    for (i = 0; i < l; i++) {\n      let newNode = newTree[i];\n      let oldNode = oldTree[i];\n      // Is vnode\n      if (newNode instanceof Vnode) {\n        if (!oldNode) {\n          newNode.dom = createElement(newNode.name, newNode.isSVG);\n          updateProps(newNode, emptyNode);\n          parentNode.dom.appendChild(newNode.dom);\n          lifecycleCall(newNode, oncreate);\n          patch(newNode, emptyNode);\n        } else {\n          if (newNode.name === oldNode.name) {\n            newNode.dom = oldNode.dom;\n            if (newNode.props[noop] || lifecycleCall(newNode, onbeforeupdate, oldNode) === false) {\n              newNode.children = oldNode.children;\n            } else {\n              removeProps(newNode, oldNode);\n              updateProps(newNode, oldNode);\n              lifecycleCall(newNode, v.isMounted ? onupdate : oncreate, oldNode);\n              patch(newNode, oldNode);\n            }\n          } else {\n            lifecycleCall(oldNode, onremove);\n            newNode.dom = createElement(newNode.name, newNode.isSVG);\n            updateProps(newNode, emptyNode);\n            parentNode.dom.replaceChild(newNode.dom, oldNode.dom);\n            lifecycleCall(newNode, oncreate);\n            patch(newNode, emptyNode);\n          }\n        }\n\n      } else {\n        let dom;\n\n        // If we are getting a TextVnode could be from the dom2Vnode method\n        let value = String(newNode instanceof TextVnode ?\n          newNode.dom.nodeValue :\n          newNode);\n\n        if (oldNode instanceof TextVnode) {\n          dom = oldNode.dom;\n          if (value !== dom.nodeValue) {\n            dom.nodeValue = value;\n          }\n        } else {\n          dom = document.createTextNode(value);\n          if (!oldNode) {\n            parentNode.dom.appendChild(dom);\n          } else {\n            lifecycleCall(oldNode, onremove);\n            parentNode.dom.replaceChild(dom, oldNode.dom);\n          }\n        }\n        newTree[i] = new TextVnode(dom);\n      }\n    }\n  }\n\n  parentNode.children = newTree;\n};\n\nv.update = (props, ...children) => {\n  if (mainNode) {\n    if (mountedComponent) {\n      cleanupVnodes();\n      oldMainNode = mainNode;\n      mainNode = new Vnode(mainNode.name, mainNode.props, v(mountedComponent, props, ...children));\n      mainNode.dom = oldMainNode.dom;\n      mainNode.isSVG = mainNode.name === 'svg';\n      patch(mainNode, oldMainNode);\n      v.isMounted = true;\n    }\n\n    return v.isNode && mainNode.dom.innerHTML;\n  }\n};\n\nv.mount = (container, component, props, ...children) => {\n  let mainContainer = v.isNode\n    ? createElement('div')\n    : typeof container === 'string'\n      ? document.querySelectorAll(container)[0]\n      : container;\n\n  mainNode = v.dom2vnode(mainContainer);\n  mountedComponent = component;\n\n  return v.update(props, ...children);\n};\n\nv.unmount = () => {\n  mountedComponent = () => '';\n  let result = v.update();\n  mountedComponent = UND;\n  v.isMounted = false;\n  return result;\n};\n\nv.directive = (directive, handler) => !v.reservedWords[directive] && (v.reservedWords[directive] = handler);\nv.directive('v-for', (set, vnode) => vnode.children = set.map(vnode.children[0]));\n\nlet hideDirective = (test) => (bool, vnode, oldnode) => {\n  let value = test ? bool : !bool;\n  if (value) {\n    let newdom = document.createTextNode('');\n    if (oldnode.dom && oldnode.dom.parentNode) {\n      lifecycleCall(oldnode, onremove);\n      oldnode.dom.parentNode.replaceChild(newdom, oldnode.dom);\n    }\n    vnode.name = '';\n    vnode.children = [];\n    vnode.props = {};\n    vnode.dom = newdom;\n  }\n};\n\nv.directive('v-if', hideDirective(false));\nv.directive('v-unless', hideDirective(true));\nv.directive('v-show', (bool, vnode) => vnode.dom.style.display = bool ? '' : 'none');\nv.directive('v-class', (classes, vnode) => {\n  for (let name in classes) {\n    vnode.dom.classList.toggle(name, classes[name]);\n  }\n});\n\n(v.isNode ? global : window).v = v;\n"],"names":["mainNode","oldMainNode","mountedComponent","UND","Vnode","name","props","children","this","TextVnode","dom","prototype","emptyNode","createElement","tag","isSVG","document","createElementNS","v","tagOrComponent","isNode","window","dom2vnode","nodeType","forEach","call","attributes","prop","nodeName","nodeValue","vnode","i","l","childNodes","length","childVnode","push","trust","htmlString","div","innerHTML","trim","map","item","plugins","Map","usePlugin","plugin","options","has","set","reservedWords","key","v-list","v-noop","oncreate","onbeforeupdate","onupdate","onremove","model","attachedListeners","eventListener","e","target","type","defaultPrevented","update","parentNode","lifecycleCall","methodName","oldNode","updateProps","newNode","updateProperty","removeProps","removeAttribute","moveDom","$parent","newIndex","replaceChild","appendChild","removeVnode","removeChild","value","addEventListener","slice","setAttribute","getVnodeKeys","tree","updateKeyedNode","compareNode","isMounted","patch","vnodesToCleanup","onCleanup","callback","parentVnode","current","indexOf","oldParentVnode","component","isArray","Array","oldParentNode","newTree","oldTree","splice","viewMethod","view","oldKeys","newKeys","processed","oldIndex","String","createTextNode","cleanupVnodes","mount","container","mainContainer","querySelectorAll","unmount","result","directive","handler","hideDirective","test","bool","oldnode","newdom","style","display","classes","classList","toggle","global"],"mappings":"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"}