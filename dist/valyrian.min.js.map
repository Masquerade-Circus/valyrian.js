{"version":3,"file":"valyrian.min.js","sources":["../lib/index.js"],"sourcesContent":["\n//eslint-disable-next-line max-lines-per-function\nfunction valyrian() {\n  let UND = void 0;\n  let oncreate = 'oncreate';\n  let onupdate = 'onupdate';\n  let onremove = 'onremove';\n  let onbeforeupdate = 'onbeforeupdate';\n  let functionstr = 'function';\n  let noop = 'v-noop';\n  let isArray = Array.isArray;\n  let mainNode;\n  let oldMainNode;\n  let mountedComponent;\n\n  function Vnode(name, props, children) {\n    this.props = props || {};\n    this.children = children;\n    this.name = name;\n  };\n\n  function TextVnode(dom) {\n    this.dom = dom;\n  }\n  TextVnode.prototype = {\n    props: {},\n    children: []\n  };\n\n  let emptyNode = new TextVnode();\n\n  function createElement(tag, isSVG) {\n    return isSVG ?\n      document.createElementNS('http://www.w3.org/2000/svg', tag) :\n      document.createElement(tag);\n  }\n\n  function lifecycleCall(vnode, methodName, oldNode) {\n    if (vnode instanceof Vnode) {\n      if (methodName === onremove) {\n        for (let i = 0, l = vnode.children.length; i < l; i++) {\n          lifecycleCall(vnode.children[i], onremove);\n        }\n      }\n\n      if (vnode.props[methodName]) {\n        return vnode.props[methodName](vnode, oldNode);\n      }\n    }\n  }\n\n\n  function v(tagOrComponent, props, ...children) {\n    return new Vnode(tagOrComponent, props, children);\n  };\n\n  v.isNode = typeof window === 'undefined';\n\n  // Hydrates the current dom before mount\n  v.domToVnode = dom => {\n    if (dom.nodeType === 3) {\n      return new TextVnode(dom);\n    }\n\n    if (dom.nodeType === 1) {\n      let props = {};\n      [].forEach.call(dom.attributes, (prop) => props[prop.nodeName] = prop.nodeValue);\n\n      let vnode = new Vnode(\n        dom.nodeName,\n        props,\n        []\n      );\n      vnode.dom = dom;\n\n      for (let i = 0, l = dom.childNodes.length; i < l; i++) {\n        let childVnode = v.domToVnode(dom.childNodes[i]);\n        childVnode && vnode.children.push(childVnode);\n      }\n      return vnode;\n    }\n  };\n\n  v.trust = (htmlString) => {\n    let div = createElement('div');\n    div.innerHTML = htmlString.trim();\n\n    return [].map.call(div.childNodes, (item) => v.domToVnode(item));\n  };\n\n  // Plugin system\n  let plugins = new Map();\n  v.usePlugin = (plugin, options) => !plugins.has(plugin) && plugins.set(plugin, true) && plugin(v, options);\n\n  v.reservedWords = {\n    key: true,\n    [noop]: true,\n    [oncreate]: true,\n    [onbeforeupdate]: true,\n    [onupdate]: true,\n    [onremove]: true,\n    model: true\n  };\n\n  let attachedListeners = {};\n  function eventListener(e) {\n    let dom = e.target;\n    let name = `__on${e.type}`;\n    while (dom) {\n      if (dom[name]) {\n        dom[name](e);\n        if (!e.defaultPrevented) {\n          v.update();\n        }\n        return;\n      }\n      dom = dom.parentNode;\n    }\n  };\n\n  v.updateProperty = (name, newNode, oldNode) => {\n    if (name in newNode.props) {\n      let value = newNode.props[name];\n      if (v.reservedWords[name]) {\n        if (typeof v.reservedWords[name] === functionstr) {\n          v.reservedWords[name](value, newNode, oldNode);\n        }\n      } else if (typeof value === functionstr) {\n        name = `__${name}`;\n        if (!attachedListeners[name]) {\n          document.addEventListener(name.slice(4), eventListener);\n          attachedListeners[name] = true;\n        };\n        newNode.dom[name] = value;\n      } else if (name in newNode.dom && !newNode.isSVG) {\n        if (newNode.dom[name] !== value) {\n          newNode.dom[name] = value;\n        }\n      } else if (value !== oldNode.props[name]) {\n        newNode.dom.setAttribute(name, value);\n      }\n    }\n  };\n\n  function updateProps(newNode, oldNode) {\n    for (let name in newNode.props) {\n      v.updateProperty(name, newNode, oldNode);\n    }\n  }\n\n  function removeProps(newNode, oldNode) {\n    for (let name in oldNode.props) {\n      if (!v.reservedWords[name] && name in newNode.props === false && typeof oldNode.props[name] !== functionstr) {\n        if (name in newNode.dom) {\n          newNode.dom[name] = UND;\n        } else {\n          newNode.dom.removeAttribute(name);\n        }\n      }\n    }\n  }\n\n  function moveDom(dom, $parent, newIndex) {\n    if (dom !== $parent.childNodes[newIndex]) {\n      $parent.childNodes[newIndex] ?\n        $parent.replaceChild(dom, $parent.childNodes[newIndex]) :\n        $parent.appendChild(dom);\n    }\n  }\n\n  function removeVnode(vnode) {\n    if (vnode && vnode.dom) {\n      lifecycleCall(vnode, onremove);\n      vnode.dom.parentNode && vnode.dom.parentNode.removeChild(vnode.dom);\n    }\n  }\n\n  function updateKeyedNode($parent, newNode, compareNode, newIndex) {\n  // Moved or updated\n    if (compareNode.dom) {\n      newNode.dom = compareNode.dom;\n      if (newNode.props[noop] || lifecycleCall(newNode, onbeforeupdate, compareNode) === false) {\n        newNode.children = compareNode.children;\n        moveDom(newNode.dom, $parent, newIndex);\n      } else {\n        removeProps(newNode, compareNode);\n        updateProps(newNode, compareNode);\n        moveDom(newNode.dom, $parent, newIndex);\n        lifecycleCall(newNode, v.isMounted ? onupdate : oncreate, compareNode);\n        patch(newNode, compareNode);\n      }\n    } else {\n      newNode.dom = createElement(newNode.name, newNode.isSVG);\n      updateProps(newNode, emptyNode);\n      moveDom(newNode.dom, $parent, newIndex);\n      lifecycleCall(newNode, oncreate);\n      patch(newNode, emptyNode);\n    }\n  }\n\n  let vnodesToCleanup = [];\n\n  v.onCleanup = callback => {\n    let parentVnode = v.current.parentVnode;\n    if (!parentVnode.onCleanup) {\n      parentVnode.onCleanup = [];\n    }\n\n    parentVnode.onCleanup.push(callback);\n\n    if (vnodesToCleanup.indexOf(parentVnode) === -1) {\n      vnodesToCleanup.push(parentVnode);\n    }\n  };\n\n  function cleanupVnodes() {\n    for (let l = vnodesToCleanup.length; l--;) {\n      for (let callback of vnodesToCleanup[l].onCleanup) {\n        callback();\n      }\n    }\n    vnodesToCleanup = [];\n  }\n\n  v.current = {\n    parentVnode: UND,\n    oldParentVnode: UND,\n    component: UND\n  };\n\n  // eslint-disable-next-line complexity,sonarjs/cognitive-complexity\n  function patch(parentNode, oldParentNode) {\n    let newTree = isArray(parentNode.children) ? parentNode.children : [parentNode.children];\n    let oldTree = oldParentNode.children;\n    v.current.parentVnode = parentNode;\n    v.current.oldParentVnode = oldParentNode;\n\n    // Flatten children\n    for (let i = 0; i < newTree.length; i++) {\n      let childVnode = newTree[i];\n\n      if (isArray(childVnode)) {\n        newTree.splice(i--, 1, ...childVnode);\n      } else if (childVnode instanceof Vnode) {\n        if (typeof childVnode.name !== 'string') {\n          v.current.component = childVnode;\n          let viewMethod = childVnode.name.view || childVnode.name;\n          newTree.splice(i--, 1, ...[viewMethod.call(childVnode.name, childVnode.props, ...childVnode.children)]);\n        } else {\n          childVnode.isSVG = parentNode.isSVG || childVnode.name === 'svg';\n        }\n      } else if (childVnode === null || childVnode === UND) {\n        newTree.splice(i--, 1);\n      }\n    }\n\n    if (newTree.length === 0) {\n      let i = oldTree.length;\n      while (i--) {\n        lifecycleCall(oldTree[i], onremove);\n      }\n      parentNode.dom.textContent = '';\n\n    // Is keyed list\n    } else if (oldTree.length && newTree[0] instanceof Vnode && newTree[0].props.key) {\n      let oldKeys = oldTree.map(vnode => vnode.props.key);\n      let newKeys = newTree.map(vnode => vnode.props.key);\n\n      for (let i = 0, l = newKeys.length; i < l; i++) {\n        let key = newKeys[i];\n        let newNode = newTree[i];\n\n        // Updated: Same key\n        if (key === oldKeys[i]) {\n          oldTree[i].processed = true;\n          updateKeyedNode(parentNode.dom, newNode, oldTree[i], i);\n        } else {\n          let oldIndex = oldKeys.indexOf(key);\n          let newIndex = i >= oldKeys.length ? UND : i;\n\n          // Moved: Key exists in old keys\n          if (oldIndex !== -1) {\n            oldTree[oldIndex].processed = true;\n            updateKeyedNode(parentNode.dom, newNode, oldTree[oldIndex], newIndex);\n          // Added: Key does not exists in old keys\n          } else {\n            updateKeyedNode(parentNode.dom, newNode, emptyNode, newIndex);\n          }\n        }\n      }\n\n      // Delete unprocessed old keys\n      let l = oldTree.length;\n\n      while (l--) {\n        !oldTree[l].processed && removeVnode(oldTree[l]);\n      }\n\n    // Not keyed list or first render so use the simple algorithm\n    } else {\n      let i = oldTree.length;\n      let l = newTree.length;\n\n      // Remove deleted nodes\n      while (i-- > l) {\n        removeVnode(oldTree[i]);\n      }\n\n      for (i = 0; i < l; i++) {\n        let newNode = newTree[i];\n        let oldNode = oldTree[i];\n        // Is vnode\n        if (newNode instanceof Vnode) {\n          if (!oldNode) {\n            newNode.dom = createElement(newNode.name, newNode.isSVG);\n            updateProps(newNode, emptyNode);\n            parentNode.dom.appendChild(newNode.dom);\n            lifecycleCall(newNode, oncreate);\n            patch(newNode, emptyNode);\n          } else {\n            if (newNode.name === oldNode.name) {\n              newNode.dom = oldNode.dom;\n              if (newNode.props[noop] || lifecycleCall(newNode, onbeforeupdate, oldNode) === false) {\n                newNode.children = oldNode.children;\n              } else {\n                removeProps(newNode, oldNode);\n                updateProps(newNode, oldNode);\n                lifecycleCall(newNode, v.isMounted ? onupdate : oncreate, oldNode);\n                patch(newNode, oldNode);\n              }\n            } else {\n              lifecycleCall(oldNode, onremove);\n              newNode.dom = createElement(newNode.name, newNode.isSVG);\n              updateProps(newNode, emptyNode);\n              parentNode.dom.replaceChild(newNode.dom, parentNode.dom.childNodes[i]);\n              lifecycleCall(newNode, oncreate);\n              patch(newNode, emptyNode);\n            }\n          }\n\n        } else {\n          let dom;\n\n          // If we are getting a TextVnode could be from the domToVnode method\n          let value = newNode instanceof TextVnode ? newNode.dom.nodeValue : String(newNode);\n\n          if (oldNode instanceof TextVnode) {\n            dom = oldNode.dom;\n            if (value !== dom.nodeValue) {\n              dom.nodeValue = value;\n            }\n          } else {\n            dom = document.createTextNode(value);\n            if (!oldNode) {\n              parentNode.dom.appendChild(dom);\n            } else {\n              lifecycleCall(oldNode, onremove);\n              parentNode.dom.replaceChild(dom, oldNode.dom);\n            }\n          }\n          newTree[i] = new TextVnode(dom);\n        }\n      }\n    }\n\n    parentNode.children = newTree;\n  };\n\n  v.update = (props, ...children) => {\n    if (mainNode) {\n      if (mountedComponent) {\n        cleanupVnodes();\n        oldMainNode = mainNode;\n        mainNode = new Vnode(mainNode.name, mainNode.props, v(mountedComponent, props, ...children));\n        mainNode.dom = oldMainNode.dom;\n        mainNode.isSVG = mainNode.name === 'svg';\n        patch(mainNode, oldMainNode);\n        v.isMounted = true;\n      }\n\n      return v.isNode && mainNode.dom.innerHTML;\n    }\n  };\n\n  v.mount = (container, component, props, ...children) => {\n    let mainContainer = v.isNode\n      ? createElement('div')\n      : typeof container === 'string'\n        ? document.querySelectorAll(container)[0]\n        : container;\n\n    mainNode = v.domToVnode(mainContainer);\n    mountedComponent = component;\n\n    return v.update(props, ...children);\n  };\n\n  v.unMount = () => {\n    mountedComponent = () => '';\n    let result = v.update();\n    mountedComponent = UND;\n    v.isMounted = false;\n    return result;\n  };\n\n  v.directive = (directive, handler) => !v.reservedWords[directive] && (v.reservedWords[directive] = handler);\n  v.directive('v-for', (set, vnode) => vnode.children = set.map(vnode.children[0]));\n\n  let hideDirective = (test) => (bool, vnode, oldnode) => {\n    let value = test ? bool : !bool;\n    if (value) {\n      let newdom = document.createTextNode('');\n      if (oldnode.dom && oldnode.dom.parentNode) {\n        lifecycleCall(oldnode, onremove);\n        oldnode.dom.parentNode.replaceChild(newdom, oldnode.dom);\n      }\n      vnode.name = '';\n      vnode.children = [];\n      vnode.props = {};\n      vnode.dom = newdom;\n    }\n  };\n\n  v.directive('v-if', hideDirective(false));\n  v.directive('v-unless', hideDirective(true));\n  v.directive('v-show', (bool, vnode) => vnode.dom.style.display = bool ? '' : 'none');\n  v.directive('v-class', (classes, vnode) => {\n    for (let name in classes) {\n      vnode.dom.classList.toggle(name, classes[name]);\n    }\n  });\n\n  return v;\n}\n\nv = valyrian();\nv.newInstance = valyrian;\n\n(v.isNode ? global : window).v = v;\n"],"names":["valyrian","mainNode","oldMainNode","mountedComponent","UND","isArray","Array","Vnode","name","props","children","this","TextVnode","dom","prototype","emptyNode","createElement","tag","isSVG","document","createElementNS","lifecycleCall","vnode","methodName","oldNode","i","l","length","v","tagOrComponent","isNode","window","domToVnode","nodeType","forEach","call","attributes","prop","nodeName","nodeValue","childNodes","childVnode","push","trust","htmlString","div","innerHTML","trim","map","item","plugins","Map","usePlugin","plugin","options","has","set","reservedWords","key","v-noop","oncreate","onbeforeupdate","onupdate","onremove","model","attachedListeners","eventListener","e","target","type","defaultPrevented","update","parentNode","updateProps","newNode","updateProperty","removeProps","removeAttribute","moveDom","$parent","newIndex","replaceChild","appendChild","removeVnode","removeChild","updateKeyedNode","compareNode","isMounted","patch","value","addEventListener","slice","setAttribute","vnodesToCleanup","oldParentNode","newTree","oldTree","current","parentVnode","oldParentVnode","splice","component","viewMethod","view","textContent","oldKeys","newKeys","processed","oldIndex","indexOf","String","createTextNode","onCleanup","callback","cleanupVnodes","mount","container","mainContainer","querySelectorAll","unMount","result","directive","handler","hideDirective","test","bool","oldnode","newdom","style","display","classes","classList","toggle","new","global"],"mappings":"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"}